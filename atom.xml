<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端小栈</title>
  
  <subtitle>因为有了危机感，所以会义无反顾。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://beichensky.github.io/"/>
  <updated>2019-08-15T23:23:53.721Z</updated>
  <id>https://beichensky.github.io/</id>
  
  <author>
    <name>卢凡凡</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MonogoDB 数据库基本使用和常用命令</title>
    <link href="https://beichensky.github.io/20190810/mongodb-note/"/>
    <id>https://beichensky.github.io/20190810/mongodb-note/</id>
    <published>2019-08-10T06:27:44.000Z</published>
    <updated>2019-08-15T23:23:53.721Z</updated>
    
    <content type="html"><![CDATA[<p>本文简单介绍了 mongodb 数据库的基本概念以及基础用法</p><a id="more"></a><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul><li><code>MongoDB</code> 是为快速开发互联网 <code>Web</code> 应用而设计的数据库系统</li><li><code>MongoDB</code> 的设计目标是极简、灵活、作为 <code>Web</code> 应用栈的一部分</li><li><code>MongoDB</code> 的数据模型是面向文档的，所谓文档，是一种类似于 <code>JSON</code> 的结构，简单理解 <code>MongoDB</code> 这个数据库中存的是各种各样的 <code>JSON(BJSON)</code></li></ul><hr><h2 id="二、相关概念及名词"><a href="#二、相关概念及名词" class="headerlink" title="二、相关概念及名词"></a>二、相关概念及名词</h2><ul><li><p>数据库：是一个仓库，在仓库中可以存放集合</p></li><li><p>集合</p><ul><li>类似于数组，在集合中可以存放文档</li><li>存储的文档可以是多种多样的，没有格式要求</li></ul></li><li><p>文档</p><ul><li>数据库中的最小单位，对数据库进行存储和操作的内容都是文档</li><li>类似于 <code>JS</code> 中的对象，在 <code>MongoDB</code> 中每一条数据就是一个文档</li></ul></li></ul><blockquote><p>多个文档组成集合，多个集合组成数据库</p></blockquote><hr><h2 id="三、常用指令"><a href="#三、常用指令" class="headerlink" title="三、常用指令"></a>三、常用指令</h2><h3 id="基本指令"><a href="#基本指令" class="headerlink" title="基本指令"></a>基本指令</h3><ul><li><code>show dbs/ databases</code>: 显示当前的所有数据库</li><li><code>use</code> 数据库名：进入到指定的数据库中  <code>eg: use my_test</code></li><li><code>db</code> ：表示的是当前所处的数据库</li><li><code>show collections</code>：显示数据库中所有的集合</li></ul><h3 id="增删改查（CRUD）指令"><a href="#增删改查（CRUD）指令" class="headerlink" title="增删改查（CRUD）指令"></a>增删改查（CRUD）指令</h3><h4 id="新增（INSERT）"><a href="#新增（INSERT）" class="headerlink" title="新增（INSERT）"></a>新增（INSERT）</h4><ul><li><p>向数据库中插入文档：<code>db.&lt;collection&gt;.insert(doc)</code></p><ul><li>向集合中插入一个或多个文档</li><li>向集合中插入文档时，如果没有给文档指定 <code>id</code> 属性，则数据库会自动为文档添加 <code>_id</code>，该属性用来作为文档的唯一标识</li><li><code>_id</code> 我们可以自己指定，如果我们指定了，则数据库就不会再自动生成了。如果自己指定 <code>_id</code>，也必须确保它的唯一性</li><li>例子：向 <code>test</code> 数据库中的 <code>students</code> 集合中插入一个新的学生对象：<code>{name: &quot;小明&quot;, age: 18, addr: &quot;male&quot;}</code><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line">db.students.insert(&#123;name: "小明", age: 18, addr: "三味书屋"&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>db.&lt;collection&gt;.insertOne(doc)</code>：向数据库中插入一条数据</p></li><li><code>db.&lt;collection&gt;.insertMany(doc)</code>：向数据库中插入多条数据</li></ul><p>示例：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line">// 插入一条</span><br><span class="line">db.students.insert(&#123;name: "小明", age: 18, addr: "三味书屋", salary: 3000&#125;);</span><br><span class="line"></span><br><span class="line">// 插入多条</span><br><span class="line">db.students.insert([&#123;name: "小红", age: 16, addr: "东方明珠", salary: 5000&#125;, &#123;name: "小白", age: 19, addr: "王府井", salary: 6000&#125;]);</span><br><span class="line"></span><br><span class="line">// 等同于下面的方式</span><br><span class="line"></span><br><span class="line">// 插入一条</span><br><span class="line">db.students.insertOne(&#123;name: "小明", age: 18, addr: "三味书屋", salary: 3000&#125;);</span><br><span class="line"></span><br><span class="line">// 插入多条</span><br><span class="line">db.students.insertMany([&#123;name: "小红", age: 16, addr: "东方明珠", salary: 5000&#125;, &#123;name: "小白", age: 19, addr: "王府井", salary: 6000&#125;]);</span><br></pre></td></tr></table></figure></p><h4 id="查询（QUERY）"><a href="#查询（QUERY）" class="headerlink" title="查询（QUERY）"></a>查询（QUERY）</h4><ul><li><code>db.&lt;collection&gt;.find()</code><ul><li>默认查询当前集合中的所有文档</li><li><code>find({})</code>：也是查询当前集合中所有的文档</li><li>返回的是一个数组</li><li>接收一个对象作为参数，必须满足对象中所有的属性</li><li><code>.count()</code>: 查询出所有结果的数量</li><li><code>.length()</code>: 查询出所有结果的数量</li></ul></li><li><code>db.&lt;collection&gt;.findOne()</code>：查询集合中符合条件的第一个文档<ul><li>返回的是一个对象</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">test</span></span><br><span class="line"></span><br><span class="line">// 查询集合中所有的文档（实际项目中不会这么操作）</span><br><span class="line">db.students.find();</span><br><span class="line"></span><br><span class="line">// 查询集合中符合条件的所有文档</span><br><span class="line">db.students.find(&#123; age: 19 &#125;);</span><br><span class="line"></span><br><span class="line">// 查询符合条件的第一个文档</span><br><span class="line">db.students.findOne(&#123; age: 19 &#125;);</span><br><span class="line"></span><br><span class="line">// 查询符合条件的文档数目</span><br><span class="line">db.students.find(&#123; age: 19 &#125;).count();</span><br><span class="line">// 或</span><br><span class="line">db.students.find(&#123; age: 19 &#125;).length();</span><br></pre></td></tr></table></figure><h5 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h5><ul><li><code>db.&lt;collection&gt;.find(filter, options)</code><ul><li><code>filter</code>：查询条件对象</li><li><code>options</code>: 投影条件对象，需要展示的属性设置为 1，不需要展示的属性设置为 0</li></ul></li><li><code>.limit(num)</code>：显示多少个文档</li><li><code>.skip(num)</code>：跳过多少个文档</li><li><code>.sort({ key1: 1, key2: -1 })</code>：按照 <code>key1</code> 正序排列，排完之后再按照 <code>key2</code> 倒序排列 </li></ul><p>示例<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">test</span>;</span><br><span class="line"></span><br><span class="line">// 查询 students 集合中所有对象，只展示 age 字段</span><br><span class="line">db.students.find(&#123;&#125;, &#123; age: 1 &#125;);</span><br><span class="line"></span><br><span class="line">// 查询 students 集合中所有对象，不展示 age 字段</span><br><span class="line">db.students.find(&#123;&#125;, &#123; age: 0 &#125;);</span><br><span class="line"></span><br><span class="line">// 查询 students 集合，只展示符合条件的前 2 条数据</span><br><span class="line">db.students.find(&#123;&#125;).limit(2);</span><br><span class="line"></span><br><span class="line">// 查询 students 集合中所有对象，跳过前 2 条数据</span><br><span class="line">db.students.find(&#123;&#125;).skip(2);</span><br><span class="line"></span><br><span class="line">// 查询 students 集合中所有对象，按 age 正序排列</span><br><span class="line">db.students.find(&#123;&#125;).sort(&#123; age: 1 &#125;);</span><br><span class="line"></span><br><span class="line">// 查询 students 集合中所有对象，按 age 倒序排列</span><br><span class="line">db.students.find(&#123;&#125;).sort(&#123; age: -1 &#125;);</span><br></pre></td></tr></table></figure></p><h5 id="常用查询器"><a href="#常用查询器" class="headerlink" title="常用查询器"></a>常用查询器</h5><ul><li><code>$gt</code>：大于</li><li><code>$gte</code>：大于等于</li><li><code>$eq</code>：等于</li><li><code>$lt</code>：小于</li><li><code>$lte</code>：小于等于</li><li><code>$or</code>：或者</li></ul><blockquote><p>之前查询不使用任何查询器时，条件的判断是包含，不是相等</p></blockquote><p>示例：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">// 工资大于 3000</span><br><span class="line">db.students.find(&#123;salary: &#123; $gt: 3000 &#125;&#125;);</span><br><span class="line"></span><br><span class="line">// 工资大于等于 3000</span><br><span class="line">db.students.find(&#123;salary: &#123; $gte: 3000 &#125;&#125;);</span><br><span class="line"></span><br><span class="line">// 工资等于 3000</span><br><span class="line">db.students.find(&#123;salary: &#123; $eq: 3000 &#125;&#125;);</span><br><span class="line"></span><br><span class="line">// 工资小于 6000 </span><br><span class="line">db.students.find(&#123;salary: &#123; $lt: 6000 &#125;&#125;);</span><br><span class="line"></span><br><span class="line">// 工资小于等于 6000</span><br><span class="line">db.students.find(&#123;salary: &#123; $lte: 6000 &#125;&#125;);</span><br><span class="line"></span><br><span class="line">// 工资大于 3000 且小于 6000 </span><br><span class="line">db.students.find(&#123;salary: &#123; $gt: 3000, $lt: 6000 &#125;&#125;);</span><br><span class="line"></span><br><span class="line">// 工资是 3000 或者 名字是 小白</span><br><span class="line">db.students.find(&#123;$or: [ &#123;salary: 3000&#125;, &#123;name: "小白"&#125; ]&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="更新（UPDATE）"><a href="#更新（UPDATE）" class="headerlink" title="更新（UPDATE）"></a>更新（UPDATE）</h4><ul><li><code>db.&lt;collection&gt;.update(查询条件, 新对象, [options])</code><ul><li><code>options</code>: 配置对象 <ul><li><code>upsert: &lt;boolean&gt;</code></li><li><code>multi: &lt;boolean&gt;</code> 是否跟新多条，默认是 false</li><li><code>writeConcern: &lt;document&gt;</code></li><li><code>collation: &lt;document&gt;</code></li></ul></li><li><code>update()</code> 默认情况下会使用新对象来替换旧的对象</li><li>如果需要修改指定的属性，而不是替换，则需要使用 “修改操作符” 来完成</li><li><code>$set</code>: 修改操作符，修改属性值。</li><li><code>$unset</code>: 修改操作符，删除属性值。<ul><li>db.<collection>.update({ name: “zgd” }, {$set: { age: 21 }})</collection></li></ul></li><li>默认情况下只会更新匹配到的第一个文档对象</li></ul></li><li>db.<collection>.updateOne(查询条件, 新对象)：修改第一个符合条件的文档</collection></li><li>db.<collection>.updateMany(查询条件, 新对象)：同时修改多个符合条件的文档</collection></li><li>db.<collection>.replaceOne(查询条件, 新对象)：替换一个文档</collection></li></ul><p>示例<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> <span class="keyword">test</span></span><br><span class="line"></span><br><span class="line">// 修改一条数据</span><br><span class="line">db.students.update(&#123;<span class="keyword">name</span>: <span class="string">'小明'</span>&#125;, &#123;$<span class="keyword">set</span>: &#123; age: <span class="number">19</span> &#125;&#125;);</span><br><span class="line"></span><br><span class="line">// 等同于 updateOne</span><br><span class="line">db.students.updateOne(&#123;name: '小明'&#125;, &#123;$set: &#123; age: 19 &#125;&#125;);</span><br><span class="line"></span><br><span class="line">// 修改多条数据</span><br><span class="line">db.students.update(&#123;age: 19&#125;, &#123;$set: &#123; addr: '水月洞天' &#125;&#125;, &#123; multi: true &#125;);</span><br><span class="line"></span><br><span class="line">// 等同于 updateMany</span><br><span class="line">db.students.updateMany(&#123;age: 19&#125;, &#123;$set: &#123; addr: '水月洞天' &#125;&#125;);</span><br><span class="line"></span><br><span class="line">// 数据替换</span><br><span class="line">db.students.update(&#123;age: 16&#125;, &#123; name: '小花', age: 14, addr: '迪士尼乐园' &#125;);</span><br><span class="line"></span><br><span class="line">// 等同于 replaceOne</span><br><span class="line">db.students.replaceOne(&#123;age: 16&#125;, &#123; name: '小花', age: 14, addr: '迪士尼乐园' &#125;);</span><br></pre></td></tr></table></figure></p><p><strong>常用修改器：</strong></p><ul><li><code>$set</code>: 设置属性</li><li><code>$unset</code>：删除属性</li><li><code>$push</code>：向数组中添加一条数据</li><li><code>$addToSet</code>：向数组中添加一条数据，与 <code>$push</code> 的区别：若数据已存在，则不再添加</li><li><code>$inc</code>（只能用于 Number 类型的值）：用来增加已有属性的值，若属性不存在，则创建该属性</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 修改 addr 属性</span><br><span class="line">db.students.updateMany(&#123;age: 19&#125;, &#123; $set: &#123; addr: '花果山' &#125; &#125;);</span><br><span class="line"></span><br><span class="line">// 为小花删除 age 属性</span><br><span class="line">db.students.updateOne(&#123;name: '小花' &#125;, &#123; $unset: &#123; age: '' &#125; &#125;);</span><br><span class="line"></span><br><span class="line">// 先为小明添加一个 hobby 属性，其中有一个 cities 属性是一个数组</span><br><span class="line">db.students.updateOne(&#123;name: '小明' &#125;, &#123; $set: &#123; hobby: &#123; cities: '北京', '上海' &#125; &#125; &#125;);</span><br><span class="line">// 为小明的 cities 属性 添加一个 '杭州'，可以通过 . 操作符为下级属性赋值，但是必须用 "" 引号包裹起来</span><br><span class="line">db.students.updateOne(&#123;name: '小明' &#125;, &#123; $push: &#123; "hobby.cities": '杭州' &#125; &#125;);</span><br><span class="line"></span><br><span class="line">// 将 addr 为 '花果山' 的文档，年龄都加 2 岁</span><br><span class="line">db.students.updateMany(&#123;addr: '花果山'&#125;, &#123; $inc: &#123; age: 2 &#125; &#125;);</span><br></pre></td></tr></table></figure><h4 id="删除（DELETE）"><a href="#删除（DELETE）" class="headerlink" title="删除（DELETE）"></a>删除（DELETE）</h4><ul><li><code>db.&lt;collection&gt;.remove(查询条件, [justone]])</code><ul><li>默认删除所有符合条件的文档</li><li>不传查询对象会报错</li><li>如果传递一个空对象 <code>{}</code> 作为参数，则会删除集合中的所有数据。使用这种方式清空集合性能较差</li><li><code>justone</code>：<code>&lt;boolean&gt;</code> 默认是 <code>false</code>，设置为 <code>true</code>，则只会删除匹配到的第一个文档</li></ul></li><li><code>db.&lt;collection&gt;.deleteOne(查询条件)</code>：删除匹配到的第一个文档</li><li><code>db.&lt;collection&gt;.deleteMany(查询条件)</code>：删除匹配到的所有文档</li></ul><p>示例<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 删除一条</span><br><span class="line">db.students.remove(&#123; name: '小花' &#125;, true);</span><br><span class="line"></span><br><span class="line">// 等同于 deleteOne</span><br><span class="line">db.students.deleteOne(&#123; name: '小花' &#125;);</span><br><span class="line"></span><br><span class="line">// 删除多条</span><br><span class="line">db.students.remove(&#123; age: '19' &#125;);</span><br><span class="line"></span><br><span class="line">// 等同于</span><br><span class="line">db.students.deleteMany(&#123; age: '19' &#125;);</span><br><span class="line"></span><br><span class="line">// 删除所有数据（不建议使用这种方式清空数据，速度较慢）</span><br><span class="line">db.students.deleteMany(&#123;&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="删除集合和数据库"><a href="#删除集合和数据库" class="headerlink" title="删除集合和数据库"></a>删除集合和数据库</h3><ul><li><code>db.&lt;collection&gt;.drop()</code>: 删除集合</li><li><code>db.dropDatabase()</code>：删除数据库</li></ul><p>示例<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 删除 students 集合（建议使用这种方式清空数据，速度较快）</span><br><span class="line">db.students.drop();</span><br><span class="line"></span><br><span class="line">// 删除当前数据库</span><br><span class="line">db.dropDatabase();</span><br></pre></td></tr></table></figure></p><hr><h2 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h2><ul><li><a href="https://docs.mongodb.com/manual/crud/" target="_blank" rel="noopener">MongoDB 官方教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文简单介绍了 mongodb 数据库的基本概念以及基础用法&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="https://beichensky.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MongoDB" scheme="https://beichensky.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/MongoDB/"/>
    
    
      <category term="数据库" scheme="https://beichensky.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MongoDB" scheme="https://beichensky.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>浅显易懂的原型与原型链知识总结</title>
    <link href="https://beichensky.github.io/20190808/prototype-chain/"/>
    <id>https://beichensky.github.io/20190808/prototype-chain/</id>
    <published>2019-08-08T15:58:55.000Z</published>
    <updated>2019-08-15T23:23:53.720Z</updated>
    
    <content type="html"><![CDATA[<p>本文总结了原型以及原型链的一些概念和规律，并且提供了代码示例进行说明。有助于更深一步的理解原型与原型链</p><a id="more"></a><h2 id="一、原型"><a href="#一、原型" class="headerlink" title="一、原型"></a>一、原型</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ul><li>每个函数对象都有一个 <code>prototype</code> 属性，默认指向一个空的 <code>Object</code> 实例对象（即称为原型对象）</li><li>原型对象中有一个 <code>constructor</code> 属性，它指向当前的函数对象</li></ul><!-- - 给原型对象添加属性（一般都是方法）  - 作用：函数的所有实例对象自动拥有原型对象中的属性和方法（可以思考一下是因为什么，后面会有说明） --><p>代码示例：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Test.prototype.say = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Say Hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t1 = <span class="keyword">new</span> Test();</span><br><span class="line"><span class="keyword">const</span> t2 = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line">Test.prototype.say = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Say Hello'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"原型对象："</span>, <span class="built_in">Object</span>.keys(Test.prototype)); <span class="comment">// []，说明函数的原型对象是一个空对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Test.prototype.constructor === test);   <span class="comment">// true，说明 原型对象的 constructor 属性，它指向当前的函数对象</span></span><br></pre></td></tr></table></figure></p><h3 id="显式原型和隐式原型"><a href="#显式原型和隐式原型" class="headerlink" title="显式原型和隐式原型"></a>显式原型和隐式原型</h3><ul><li>每个函数都有一个 <code>prototype</code> 属性，即显式原型</li><li>每个实例对象都有一个 <code>__proto__</code> 属性，即隐式原型</li><li><strong>实例对象的隐式原型的值等于对应函数的显式原型的值</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t1 = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Test.prototype);    <span class="comment">// 一个空对象，包含 __proto__ 和 constructor 属性(指向 Test)</span></span><br><span class="line"><span class="built_in">console</span>.log(t1.__proto__);      <span class="comment">// 一个空对象，包含 __proto__ 和 constructor 属性(指向 Test)</span></span><br><span class="line"><span class="built_in">console</span>.log(Test.prototype === t1.__proto__);   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="显式原型和隐式原型的实现机制"><a href="#显式原型和隐式原型的实现机制" class="headerlink" title="显式原型和隐式原型的实现机制"></a>显式原型和隐式原型的实现机制</h3><ul><li>函数的 <code>prototype</code> 属性：在定义函数时自动添加的，默认值是一个空的 <code>Object</code> 对象</li><li>对象的 <code>__proto__</code> 属性：创建对象时自动添加的，默认值为构造函数的 <code>prototype</code> 属性值</li><li>开发人员一般都是通过操作函数的 <code>prototype</code> 属性来修改原型</li></ul><h3 id="原型补充"><a href="#原型补充" class="headerlink" title="原型补充"></a>原型补充</h3><ul><li><p>函数的显式原型指向的对象默认是空 <code>Object</code> 对象（但是 <code>Object</code> 除外，<code>Object</code> 的原型不是空对象，且没有 <code>__proto__</code> 属性）</p><ul><li>所以 <code>Object</code> 的原型对象是原型链的尽头，<code>Object</code> 的原型对象的原型就是 <code>null</code> 了<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> t = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.__proto__);       <span class="comment">// 包含多个方法的 Object 对象，没有 __proto__ 属性</span></span><br><span class="line"><span class="built_in">console</span>.log(t.__proto__);       <span class="comment">// 空对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(o.__proto__.__proto__);     <span class="comment">// null</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>每个函数对象既有一个隐式原型，也有一个显式原型</p><ul><li>所有函数都是 <code>Function</code> 的实例（包括 <code>Function</code> 自身）</li><li>每个函数的隐式原型都是同一个实例对象</li><li>唯一的一个隐式原型等于显式原型的函数对象就是 <code>Function</code> 这个函数对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Test.prototype);    <span class="comment">// 空对象</span></span><br><span class="line"><span class="built_in">console</span>.log(Test.__proto__);    <span class="comment">// ƒ () &#123; [native code] &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Hello.prototype === Test.prototype)         <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(Hello.__proto__ === Test.__proto__);        <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(Hello.__proto__ === <span class="built_in">Function</span>.__proto__);    <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype === <span class="built_in">Function</span>.__proto__); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><!-- - 所有函数都是 `Function` 的实例（包括 `Function` 自身）- 每个函数对象既有一个隐式原型，也有一个显式原型。- 每个函数的隐式原型都是同一个实例对象- 唯一的一个隐式原型等于显式原型的函数对象就是 `Function` 这个函数对象 --><hr><h2 id="二、原型链（别名：隐式原型链）"><a href="#二、原型链（别名：隐式原型链）" class="headerlink" title="二、原型链（别名：隐式原型链）"></a>二、原型链（别名：隐式原型链）</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><p>访问一个对象的属性时</p><ul><li>先在自身属性中查找，找到返回</li><li>如果没有，再沿着 <code>__proto__</code> 这条链向上查找，找到返回</li><li>如果最终没有找到，返回 <code>undefined</code></li></ul></li><li><p>作用：查询对象属性</p></li></ul><h3 id="对象读写"><a href="#对象读写" class="headerlink" title="对象读写"></a>对象读写</h3><ul><li><p>读取对象的属性时，会自动到对象的原型链中查找</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.speak = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Speak Chinese!'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 每个实例对象都拥有函数原型中的属性/方法</span></span><br><span class="line">p1.speak();     <span class="comment">// Speak Chinese!</span></span><br><span class="line">p2.speak();     <span class="comment">// Speak Chinese!</span></span><br></pre></td></tr></table></figure></li><li><p>设置对象的属性时，不会查找原型链，如果当前对象中没有此属性，直接添加此属性并设置值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Person.prototype.name = <span class="string">'小明'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取属性时，会从当前对象以及原型链中进行查找</span></span><br><span class="line"><span class="built_in">console</span>.log(p1.name);    <span class="comment">// 小明</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置属性时，直接修改当前对象上的属性，当前对象上没有，则直接添加，不会修改原型链上的属性</span></span><br><span class="line">p2.name = <span class="string">'小红'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1.name);   <span class="comment">// 小明</span></span><br><span class="line"><span class="built_in">console</span>.log(p2.name);   <span class="comment">// 小红</span></span><br></pre></td></tr></table></figure></li><li><p>方法一般定义在原型上，属性一般通过构造函数定义在对象本身上</p></li></ul><h3 id="扩展：instanceOf-操作符原理"><a href="#扩展：instanceOf-操作符原理" class="headerlink" title="扩展：instanceOf 操作符原理"></a>扩展：<code>instanceOf</code> 操作符原理</h3><ul><li><code>a instanceOf C</code>: 如果 <code>C</code> 的显式原型在 <code>a</code> 的隐式原型链上，返回 <code>true</code>，否则返回 <code>false</code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 C 的原型赋值给 B 的原型，将 B 的原型赋值给 A 的原型，这两行代码位置不能颠倒</span></span><br><span class="line">B.prototype = C.prototype;</span><br><span class="line">A.prototype = B.prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> A();</span><br><span class="line"><span class="built_in">console</span>.log(a <span class="keyword">instanceof</span> C);</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="三、实例讲解"><a href="#三、实例讲解" class="headerlink" title="三、实例讲解"></a>三、实例讲解</h2><h3 id="1、实例一"><a href="#1、实例一" class="headerlink" title="1、实例一"></a>1、实例一</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">A.prototype.n = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的原型在对象初始化时赋值为函数的显示原型，因此 b 的隐式原型为 &#123; n: 1 &#125;;</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line">A.prototype = &#123;</span><br><span class="line">    n: <span class="number">2</span>,</span><br><span class="line">    m: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原因同上，因此 c 的隐式原型为 &#123; n: 2, m: 3 &#125;;</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> A();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b.n, b.m, c.n, c.m);    <span class="comment">// 1 undefined 2 3</span></span><br></pre></td></tr></table></figure><h3 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Test</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.prototype.a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a 方法执行'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'b 方法执行'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> Test();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这里解释一波</span></span><br><span class="line"><span class="comment"> *  1、每个函数对象的显式原型都指向一个空对象，而每个实例对象的隐式原型 === 函数对象的显式原型，</span></span><br><span class="line"><span class="comment"> *      那么 t.a() 会按照这个顺序查找: t.__proto__ === Test.prototype = &#123;&#125;; &#123;&#125;.__proto__ === Object.prototype;</span></span><br><span class="line"><span class="comment"> *      而 Object 的显式原型中有方法 a，因此可以正确执行；</span></span><br><span class="line"><span class="comment"> *  2、t.b() 同理，在原型链中没有找到 b 方法，因此会报错：t.b is not a function;</span></span><br><span class="line"><span class="comment"> *  3、Test.a() 的查找顺序：Test.__proto__ === Function.prototype = &#123; b: function() &#123; console.log('b 方法执行'); &#125; &#125;;</span></span><br><span class="line"><span class="comment"> *      &#123;b: fucntion() &#123;console.log('b 方法执行');&#125;&#125;.__proto__ === Object.prototype;</span></span><br><span class="line"><span class="comment"> *      因此：Test.a() 和 Test.b() 都可以正确执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">t.a();          <span class="comment">// a(); </span></span><br><span class="line">t.b();          <span class="comment">// t.b is not a function</span></span><br><span class="line">Test.a();      <span class="comment">// a();</span></span><br><span class="line">Test.b();      <span class="comment">// b();</span></span><br></pre></td></tr></table></figure><hr><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><ul><li>每个函数对象（<code>Object</code> 函数对象除外）都默认有一个显式原型对象，指向一个空的 <code>Object</code> 对象，空对象中有一个 constructor 属性，指向当前函数对象</li><li>所有函数对象都有一个隐式原型对象（包括 <code>Function</code> 函数对象），且都默认指向 <code>Function</code> 函数对象的显式原型对象</li><li>函数对象的显式原型等于实例对象的隐式原型</li><li><p>访问对象属性时，会先在实例对象本身进行查找，找到则返回，没找到则在隐式原型链中继续查找，找到则返回，没找到返回 <code>undefined</code></p></li><li><p><em>额外补充一点：函数对象的隐式原型和显示原型没有关系（<code>Function</code> 函数对象除外），<code>Function</code> 函数对象的显式原型等于自身的隐式原型（因为所有函数都是 <code>Function</code> 的实例（包括 <code>Function</code> 自身））</em></p></li></ul><hr><h2 id="五、推荐链接"><a href="#五、推荐链接" class="headerlink" title="五、推荐链接"></a>五、推荐链接</h2><p>之前看到<a href="https://www.jianshu.com/p/aa1ebfdad661" target="_blank" rel="noopener">这篇博客</a>里有详细的原型链示意图，有兴趣的朋友可以详细去看一下：</p><p><strong><a href="https://www.jianshu.com/p/aa1ebfdad661" target="_blank" rel="noopener">一个例子让你彻底明白原型对象和原型链</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文总结了原型以及原型链的一些概念和规律，并且提供了代码示例进行说明。有助于更深一步的理解原型与原型链&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>快速使用 Hexo + Github 搭建个人博客（超简单的步骤）</title>
    <link href="https://beichensky.github.io/20190802/hexo-blog/"/>
    <id>https://beichensky.github.io/20190802/hexo-blog/</id>
    <published>2019-08-02T09:07:45.000Z</published>
    <updated>2019-08-03T09:27:33.918Z</updated>
    
    <content type="html"><![CDATA[<p>最近心血来潮，打算重新搭建一个个人博客。网上也有很多教程，但是都特别的详细，步骤特别的繁琐。所以我就将步骤说明进行了简化，只需要三步就能使用 Hexo + Github 搭建一个个人博客，方便以后需要的朋友们使用。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>其实原理很简单，就是将 <code>Hexo</code> 生成的静态文件部署到 <code>GitHub</code> 的仓库中，利用 <code>GitHub Pages</code> 将静态文件展示在浏览器中，就可以通过 <code>GitHub</code> 的项目地址访问个人博客。</p><p>下面就通过实际操作进行博客的搭建。</p><p>前置条件：电脑中需要安装 Node 和 Git。若果没有安装，直接去官网下载，下载完成打开，一路 <code>Next</code> 安装即可。</p><ul><li><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">Git 下载地址</a></li><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node 下载地址</a></li></ul><hr><h2 id="一、使用-Hexo"><a href="#一、使用-Hexo" class="headerlink" title="一、使用 Hexo"></a>一、使用 <code>Hexo</code></h2><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 <code>Hexo</code></h3><p>首先电脑中需要先安装 <code>node</code> 环境，如果没有安装的话直接到 <a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node 官网</a>进行下载，下载完成后一路 <code>Next</code> 安装完成即可。<br>如担心安装有问题，安装过程可自行百度，过程比较简单，这里就直接省略了。</p><p>安装完 <code>node</code> 之后，就可以使用 <code>npm</code> 命令了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装完成后测试是否安装成功</span></span><br><span class="line">hexo -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 能打印出来关于 hexo 的各种信息即代表安装成功</span></span><br></pre></td></tr></table></figure><h3 id="使用-Hexo-创建项目"><a href="#使用-Hexo-创建项目" class="headerlink" title="使用 Hexo 创建项目"></a>使用 <code>Hexo</code> 创建项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化项目</span></span><br><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里稍微需要一点时间下载资源，请耐心等待</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开项目，安装依赖</span></span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>此时项目目录应该如下展示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>在项目根目录下运行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>然后在浏览器打开 <code>http://localhost:4000/</code>，看到如下界面，说明项目启动成功了：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/hexo/default-theme.png" alt="Hexo 默认界面" title="">                </div>                <div class="image-caption">Hexo 默认界面</div>            </figure></p><hr><h2 id="在-GitHub-中创建仓库"><a href="#在-GitHub-中创建仓库" class="headerlink" title="在 GitHub 中创建仓库"></a>在 <code>GitHub</code> 中创建仓库</h2><p>在 <code>GitHub</code> 中创建仓库，使用 <code>GitHub Pages</code> 作为载体，展示 <code>Hexo</code> 编译后生成的静态文件。</p><p>如果没有 <code>GitHub</code> 账号，可以直接在<a href="https://github.com/" target="_blank" rel="noopener">官网</a>注册一下。</p><h3 id="创建新的仓库"><a href="#创建新的仓库" class="headerlink" title="创建新的仓库"></a>创建新的仓库</h3><blockquote><p>在 <code>Github</code> 中创建一个新的仓库，仓库名必须命名为：&lt;你的 github 用户名&gt;.github.io。</p></blockquote><p>因为使用这个名字作为仓库名的话，项目部署好之后可以直接通过 <code>https://&lt;你的 github 用户名&gt;.github.io</code> 访问。<br>如果用了别的名字，就需要通过 <code>https://&lt;你的 github 用户名&gt;.github.io/&lt;仓库名&gt;</code> 的地址访问。</p><p>步骤如下：</p><ul><li><p>新建仓库</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/hexo/newRepository.png" alt="新建仓库" title="">                </div>                <div class="image-caption">新建仓库</div>            </figure></li><li><p>设置仓库属性</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/hexo/createRepository.png" alt="设置属性" title="">                </div>                <div class="image-caption">设置属性</div>            </figure></li></ul><blockquote><p>箭头指示的复选框一定要进行勾选，否则后面在使用 <code>GitHub Pages</code> 的时候会因为仓库中没有内容而无法使用。</p></blockquote><h3 id="在浏览器中访问"><a href="#在浏览器中访问" class="headerlink" title="在浏览器中访问"></a>在浏览器中访问</h3><p>在浏览器中输入 <code>https://&lt;你的 github 用户名&gt;.github.io</code> 地址，看到有文字展示，说明 <code>GitHub</code> 设置完成了。</p><hr><h2 id="三、整合-Hexo-GitHub"><a href="#三、整合-Hexo-GitHub" class="headerlink" title="三、整合 Hexo + GitHub"></a>三、整合 Hexo + GitHub</h2><h3 id="拷贝当前-GitHub-仓库的地址"><a href="#拷贝当前-GitHub-仓库的地址" class="headerlink" title="拷贝当前 GitHub 仓库的地址"></a>拷贝当前 <code>GitHub</code> 仓库的地址</h3><p>将仓库地址进行拷贝，下一步中配置 <code>Hexo</code> 的 <code>deploy</code> 属性时要用到。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/hexo/copyUrl.png" alt="拷贝地址" title="">                </div>                <div class="image-caption">拷贝地址</div>            </figure><h3 id="设置-Hexo-发布配置"><a href="#设置-Hexo-发布配置" class="headerlink" title="设置 Hexo 发布配置"></a>设置 Hexo 发布配置</h3><p>打开创建好的 Hexo 项目，找到 <code>_config.yml</code> 文件，修改其中的 <code>deploy</code> 配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">&lt;上一步拷贝的</span> <span class="string">GitHub</span> <span class="string">仓库地址&gt;</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="将-Hexo-项目生成静态文件"><a href="#将-Hexo-项目生成静态文件" class="headerlink" title="将 Hexo 项目生成静态文件"></a>将 Hexo 项目生成静态文件</h3><p>进入创建好的 Hexo 项目根目录下，运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><h3 id="将-Hexo-项目发布到-GitHub-仓库中"><a href="#将-Hexo-项目发布到-GitHub-仓库中" class="headerlink" title="将 Hexo 项目发布到 GitHub 仓库中"></a>将 Hexo 项目发布到 GitHub 仓库中</h3><blockquote><p>在发布之前，如果没有在本地配置过 git，建议先执行以下两个命令</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"&lt;GitHub 用户名&gt;"</span></span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">"&lt;邮箱账号&gt;"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><blockquote><p>可能会弹窗提示输入密码，则输入你的 <code>GitHub</code> 密码即可。</p></blockquote><blockquote><p>发布完成后，根目录下会多出一个 .deploy 的文件夹，最好将其删除掉，不然之后提交代码可能会有问题</p></blockquote><h3 id="访问-GitHub-Pages-地址"><a href="#访问-GitHub-Pages-地址" class="headerlink" title="访问 GitHub Pages 地址"></a>访问 <code>GitHub Pages</code> 地址</h3><p>此时，在浏览器中输入 <code>https://&lt;你的 github 用户名&gt;.github.io</code> 地址，则可以看到跟本地启动 Hexo 展示一致的界面</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/hexo/default-theme.png" alt="Hexo 默认界面" title="">                </div>                <div class="image-caption">Hexo 默认界面</div>            </figure><blockquote><p><strong>使用Hexo + GiHub 搭建个人博客的基本步骤已经完成了。如想查看如何编写博客可以继续向下浏览，如暂时只是想搭建博客，则至此已经完成了。</strong></p></blockquote><hr><h2 id="四、使用-Hexo-编写博客"><a href="#四、使用-Hexo-编写博客" class="headerlink" title="四、使用 Hexo 编写博客"></a>四、使用 Hexo 编写博客</h2><h3 id="编写博客"><a href="#编写博客" class="headerlink" title="编写博客"></a>编写博客</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个文件草稿，在其中编写内容。草稿不会被发布</span></span><br><span class="line">hexo new draft <span class="string">"&lt;文件名称&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个文件，在其中编写内容</span></span><br><span class="line">hexo new post <span class="string">"&lt;文件名称&gt;"</span></span><br></pre></td></tr></table></figure><p>生成的都是 <code>makedown</code> 类型的文件，直接在其中使用 <code>makedown</code> 语法编写内容即可。</p><p>生成的草稿或者文件中会有部分内容，这些内容都是由模板生成的，模板在根目录下的 <code>scaffolds</code> 文件夹中，模板内容可以根据自己需要进行修改。</p><h3 id="其他常用命令"><a href="#其他常用命令" class="headerlink" title="其他常用命令"></a>其他常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将草稿发不成正式文件</span></span><br><span class="line">hexo publish <span class="string">"&lt;文件名称&gt;"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动服务，预览项目(不包括草稿文件)</span></span><br><span class="line">hexo server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动项目，包括草稿文件</span></span><br><span class="line">hexo server --draft</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成静态文件</span></span><br><span class="line">hexo generate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 发布项目</span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>可以进入到 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo 主题网站</a> 选择自己喜欢的主题，按照其中的说明进行安装配置</p><h3 id="评论、数据统计等功能"><a href="#评论、数据统计等功能" class="headerlink" title="评论、数据统计等功能"></a>评论、数据统计等功能</h3><p>不同主题都会有相应的配置文件，按照主题说明进行配置即可。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>关于 Hexo 的更多使用，建议在 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo 中文官网</a>进行查看。官网的说明更为详尽。</p><!-- ### 常用配置关于 `hexo` 项目的属性都在根目录下的 `_config.yml` 文件中：常用配置：- 网站（这些可以根据自己想要展示的文字进行修改）参数 | 描述---- | ---- `title` | 网站标题`subtitle` |    网站副标题`description` |    网站描述`keywords` |    网站的关键词。使用半角逗号 , 分隔多个关键词。`author` | 您的名字`language` |    网站使用的语言- 网址（这些配置使用如无必要，使用默认值即可）参数     | 描述 |  默认值----- | ----- | ----url      | 网址      | root  |  网站根目录 |permalink | 文章的 永久链接 格式 |    :year/:month/:day/:title/permalink_defaults | 永久链接中各部分的默认值 | -->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近心血来潮，打算重新搭建一个个人博客。网上也有很多教程，但是都特别的详细，步骤特别的繁琐。所以我就将步骤说明进行了简化，只需要三步就能使用 Hexo + Github 搭建一个个人博客，方便以后需要的朋友们使用。&lt;/p&gt;
    
    </summary>
    
      <category term="Hexo" scheme="https://beichensky.github.io/categories/Hexo/"/>
    
    
      <category term="Hexo" scheme="https://beichensky.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Express 的基本使用</title>
    <link href="https://beichensky.github.io/20190801/express-note/"/>
    <id>https://beichensky.github.io/20190801/express-note/</id>
    <published>2019-08-01T15:29:30.000Z</published>
    <updated>2019-08-03T09:27:33.918Z</updated>
    
    <content type="html"><![CDATA[<p>本文从安装、用法、常用 API 等方面简单介绍了 Express 的用法。</p><a id="more"></a><h2 id="一、Express-简介"><a href="#一、Express-简介" class="headerlink" title="一、Express 简介"></a>一、<code>Express</code> 简介</h2><h3 id="1、Express-是什么？"><a href="#1、Express-是什么？" class="headerlink" title="1、Express 是什么？"></a>1、Express 是什么？</h3><ul><li><p>基于 <code>Node</code> 平台开发的 <code>Web</code> 开发框架</p></li><li><p>提供一系列强大的特性，帮助创建各种 Web和移动设备应用</p></li><li><p>是 NodeJS 的一个模块</p></li></ul><h3 id="2、为什么使用-Express"><a href="#2、为什么使用-Express" class="headerlink" title="2、为什么使用 Express"></a>2、为什么使用 <code>Express</code></h3><ul><li>为了基于 NodeJS 开发 web 应用程序更高效</li></ul><hr><h2 id="二、安装与使用"><a href="#二、安装与使用" class="headerlink" title="二、安装与使用"></a>二、安装与使用</h2><h3 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建 my-app 文件夹</span></span><br><span class="line">mkdir my-app</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> my-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 package-json 文件</span></span><br><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 express 依赖</span></span><br><span class="line">npm install express -S</span><br></pre></td></tr></table></figure><h3 id="2、基本使用"><a href="#2、基本使用" class="headerlink" title="2、基本使用"></a>2、基本使用</h3><p>根目录下新建 <code>index.js</code> 文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">300</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.dir(<span class="string">'服务启动：http://localhost:3000/'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>根目录下运行 <code>node index.js</code>，即可看到控制台打印输出。说明服务已经启动</p><h3 id="3、路由"><a href="#3、路由" class="headerlink" title="3、路由"></a>3、路由</h3><h4 id="基本路由"><a href="#基本路由" class="headerlink" title="基本路由"></a>基本路由</h4><p>基本使用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Get 请求</span></span><br><span class="line">app.get(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(<span class="string">'欢迎使用 Express(GET)'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST 请求</span></span><br><span class="line">app.post(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(<span class="string">'欢迎使用 Express(POST)'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Put 请求</span></span><br><span class="line">app.put(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(<span class="string">'欢迎使用 Express(PUT)'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.delete(<span class="string">'/'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(<span class="string">'欢迎使用 Express(DELETE)'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 等等其他请求方式</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径支持正则表达式</span></span><br><span class="line">app.get(<span class="string">'/a+b'</span>, (req, res) =&gt; &#123;</span><br><span class="line">res.send(<span class="string">'类似于 /ab、/aab、/aaab 等的路径均可访问'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>或者使用 app.route() 的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.route(<span class="string">'/'</span>)</span><br><span class="line">    .get(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.send(<span class="string">'欢迎使用 Express(GET)'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.send(<span class="string">'欢迎使用 Express(POST)'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .put(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.send(<span class="string">'欢迎使用 Express(PUT)'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .delete(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">        res.send(<span class="string">'欢迎使用 Express(DELETE)'</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><h4 id="特殊路由：app-all-path-callback"><a href="#特殊路由：app-all-path-callback" class="headerlink" title="特殊路由：app.all([path,] callback)"></a>特殊路由：<code>app.all([path,] callback)</code></h4><ul><li>不写 path 参数，默认是根路径</li><li>请求路径（<code>pathname</code>）必须要全等于 <code>path</code>，才会执行 <code>callback</code>；</li><li>任意请求方式都会执行 <code>callback</code> 函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.all(<span class="string">'/book'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(<span class="string">'无论任意请求方式，只要请求路径（pathname）为 /book，都会返回这句话'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="app-use-path-callback"><a href="#app-use-path-callback" class="headerlink" title="app.use([path,] callback)"></a><code>app.use([path,] callback)</code></h4><ul><li>不写 path 参数，默认是根路径</li><li>只要请求路径（<code>pathname</code>）第一段为 <code>path</code>，就会执行 <code>callback</code>；</li><li>任意请求方式都会执行 <code>callback</code> 函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/book'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(<span class="string">'无论任意请求方式，只要请求路径（pathname）第一段为 /book，都会返回这句话'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4、路由拆分：express-Router-options"><a href="#4、路由拆分：express-Router-options" class="headerlink" title="4、路由拆分：express.Router([options])"></a>4、路由拆分：<code>express.Router([options])</code></h3><p><code>options</code> 中的参数：</p><table><thead><tr><th>属性</th><th style="text-align:center">描述</th><th style="text-align:right">默认值</th></tr></thead><tbody><tr><td>caseSensitive</td><td style="text-align:center">启用区分大小写。</td><td style="text-align:right">默认情况下禁用，将“/ Foo”和“/ foo”视为相同。</td></tr><tr><td>mergeParams</td><td style="text-align:center">保留req.params父路由器的值。如果父级和子级具有冲突的参数名称，则子级的值优先。</td><td style="text-align:right">false</td></tr><tr><td>strict</td><td style="text-align:center">启用严格路由。</td><td style="text-align:right">默认情况下禁用，“/ foo”和“/ foo /”由路由器处理相同。</td></tr></tbody></table><p>将所有的路由都写在 <code>index.js</code> 文件中，不易维护而且也不安全，所以我们可以把不同路径下的路由进行拆分，分别放在不同文件下，易于维护。这个时候就会用到 <code>express.Router()</code>;</p><blockquote><p>与 <code>app</code> 类似，也可以使用 <code>route()</code>、<code>all()</code>、<code>use()</code> 等方法</p></blockquote><p>编写路由文件 order.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"></span><br><span class="line">router.use(<span class="function">(<span class="params">req, resp, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleString());</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/list'</span>, (req, resp) =&gt; &#123;</span><br><span class="line">    resp.send(<span class="string">'订单列表'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/detail'</span>, (req, resp) =&gt; &#123;</span><br><span class="line">    resp.send(<span class="string">'订单详情'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">'/submit'</span>, (req, resp) =&gt; &#123;</span><br><span class="line">    resp.send(<span class="string">'提交订单'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure><p>即可在 index.js 中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> order = <span class="built_in">require</span>(<span class="string">'./order.js'</span>);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/order'</span>, order);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure><p>访问 <code>http://localhost: 3000/order/list</code> 或者其他 <code>order</code> 文件中的路径即可获取到对应返回结果</p><h3 id="5、访问静态资源"><a href="#5、访问静态资源" class="headerlink" title="5、访问静态资源"></a>5、访问静态资源</h3><ul><li><code>api: app.use([pathname,] express.static(root，[options]))</code><ul><li><code>pathname</code>: 访问路径</li><li><code>root</code>:     静态资源文件夹路径</li><li><code>options</code>： 其他配置项，可参考<a href="http://expressjs.com/en/4x/api.html" target="_blank" rel="noopener">这里</a></li></ul></li></ul><p>此时假如 <code>public</code> 文件是静态文件存放目录，文件夹下有 <code>a.png</code> 的图片文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/public'</span>, express.static(path.join(__dirname, <span class="string">'public'</span>)));</span><br></pre></td></tr></table></figure><p>则此时访问 <code>http://localhost: 3000/public/a.png</code>，可以看到图片正常显示。</p><h3 id="6、中间件的使用"><a href="#6、中间件的使用" class="headerlink" title="6、中间件的使用"></a>6、中间件的使用</h3><p><code>app.use([path, ] (req, res, next) =&gt; { ...; next() })</code></p><ul><li><code>path</code> 参数可写可不写，不写则默认为根路径，所有访问路径均可使用；</li><li>比一般回调函数多一个 <code>next</code> 参数，必须执行，否则不会继续向下执行。</li></ul><hr><h2 id="三、常用-API"><a href="#三、常用-API" class="headerlink" title="三、常用 API"></a>三、常用 API</h2><h3 id="1、Application"><a href="#1、Application" class="headerlink" title="1、Application"></a>1、<code>Application</code></h3><h4 id="app-listen（-port-，host-，backlog-，callback-）"><a href="#app-listen（-port-，host-，backlog-，callback-）" class="headerlink" title="app.listen（[port [，host [，backlog]]] [，callback]）"></a><code>app.listen（[port [，host [，backlog]]] [，callback]）</code></h4><p>启动服务，监听端口地址</p><h4 id="app-METHOD（path，callback-，callback-）"><a href="#app-METHOD（path，callback-，callback-）" class="headerlink" title="app.METHOD（path，callback [，callback ...]）"></a><code>app.METHOD（path，callback [，callback ...]）</code></h4><p>路由请求方式：</p><ul><li><code>METHOD</code> 为各种请求方式</li><li><code>path</code>：请求路径</li><li><code>callback</code>：中间件及回调函数，可包含多个，出最后一个外，其他的必须在最后执行 <code>next()</code> ，否则不会再继续向下执行</li></ul><h4 id="app-path"><a href="#app-path" class="headerlink" title="app.path()"></a><code>app.path()</code></h4><p>返回应用程序的规范路径，一个字符串。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"><span class="keyword">var</span> blog = express();</span><br><span class="line"><span class="keyword">var</span> blogAdmin = express();</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/blog'</span>, blog);</span><br><span class="line">blog.use(<span class="string">'/admin'</span>, blogAdmin);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.dir(app.path()); <span class="comment">// ''</span></span><br><span class="line"><span class="built_in">console</span>.dir(blog.path()); <span class="comment">// '/blog'</span></span><br><span class="line"><span class="built_in">console</span>.dir(blogAdmin.path()); <span class="comment">// '/blog/admin'</span></span><br></pre></td></tr></table></figure><h4 id="app-set-name-value-app-get-name"><a href="#app-set-name-value-app-get-name" class="headerlink" title="app.set(name, value) / app.get(name)"></a><code>app.set(name, value) / app.get(name)</code></h4><ul><li><code>app.set(name, value)</code>：为 <code>name</code> 属性设置 <code>value</code>，存储到服务器中</li><li><code>app.get(name)</code>：获取 <code>name</code> 属性对应的 <code>value</code></li></ul><h4 id="错误处理中间件的使用"><a href="#错误处理中间件的使用" class="headerlink" title="错误处理中间件的使用"></a>错误处理中间件的使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 错误处理逻辑</span></span><br><span class="line"><span class="built_in">console</span>.error(err.stack)</span><br><span class="line">res.status(<span class="number">500</span>).send(<span class="string">'Something broke!'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2、Request"><a href="#2、Request" class="headerlink" title="2、Request"></a>2、<code>Request</code></h3><h4 id="req-params"><a href="#req-params" class="headerlink" title="req.params"></a>req.params</h4><p>获取请求路径中的 param</p><p>例如请求路径为：<code>http://localhost:3000/news/2019/10</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/news/:year/:month'</span>, (req, res) =&gt; &#123;</span><br><span class="line">    res.send(req.params);<span class="comment">// &#123;"year":"2019","month":"10"&#125;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="req-query"><a href="#req-query" class="headerlink" title="req.query"></a><code>req.query</code></h4><p>获取 <code>Get</code> 请求路径中传递的查询参数</p><p>例如 <code>Get</code> 请求为：<code>http://localhost:3000?name=zgd</code><br><!-- `Post` 请求为：`curl -d "name=zgd" http://localhost:3000` --></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/'</span>, (req, resp) =&gt; &#123;</span><br><span class="line">    resp.send(req.query);<span class="comment">// &#123;"name": "zgd"&#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="req-body"><a href="#req-body" class="headerlink" title="req.body"></a><code>req.body</code></h4><p>获取 <code>Post</code> 请求中能够传递的查询参数</p><p>例如 <code>Post</code> 请求为：<code>curl -d &quot;name=zgd&quot; http://localhost:3000</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.use(express.json()) <span class="comment">// for parsing application/json</span></span><br><span class="line">app.use(express.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">true</span> &#125;)) <span class="comment">// for parsing application/x-www-form-urlencoded</span></span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/'</span>, (req, resp) =&gt; &#123;</span><br><span class="line">    resp.send(req.body);<span class="comment">// &#123;"name": "zgd"&#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="req-获取路径"><a href="#req-获取路径" class="headerlink" title="req 获取路径"></a>req 获取路径</h4><ul><li>req.baseUrl：安装路由器实例的URL路径，不包含请求参数</li><li>req.path: 当前请求路径，不包含请求参数</li><li>req.originalUrl：院士路径，即全路径，包含请求参数</li><li>req.url：当前请求路径，包含请求参数<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/book/list'</span>, (req, res) =&gt; &#123;</span><br><span class="line">res.write(req.baseUrl);<span class="comment">// ''</span></span><br><span class="line">res.write(req.path);<span class="comment">// '/book/list'</span></span><br><span class="line">res.write(req.originalUrl);<span class="comment">// '/book/list'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(<span class="string">'/book'</span>, book);</span><br><span class="line"></span><br><span class="line"><span class="comment">// book.js</span></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/list'</span>, (req, res) =&gt; &#123;</span><br><span class="line">res.write(req.baseUrl);<span class="comment">// '/book'</span></span><br><span class="line">res.write(req.path);<span class="comment">// '/list'</span></span><br><span class="line">res.write(req.originalUrl);<span class="comment">// '/book/list'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="其他属性"><a href="#其他属性" class="headerlink" title="其他属性"></a>其他属性</h4><table><thead><tr><th>属性</th><th style="text-align:center">描述</th><th style="text-align:right">例子</th></tr></thead><tbody><tr><td>req.baseUrl</td><td style="text-align:center">安装路由器实例的URL路径。</td><td style="text-align:right">用法查看<a href="http://expressjs.com/en/4x/api.html#req" target="_blank" rel="noopener">这里</a></td></tr><tr><td>req.path</td><td style="text-align:center">当前请求路径</td><td style="text-align:right">用法查看<a href="http://expressjs.com/en/4x/api.html#req" target="_blank" rel="noopener">这里</a></td></tr><tr><td>req.originalUrl</td><td style="text-align:center">原始 URL 请求路径。后面没有跟请求参数时，相当于是 baseUrl + path；路径后面跟了请求参数，则请求参数也包含在内</td><td style="text-align:right">/<em> GET /search?q=something  </em>/    console.dir(req.originalUrl);    // =&gt; ‘/search?q=something’</td></tr><tr><td>req.cookies</td><td style="text-align:center">此属性是包含请求发送的cookie的对象。如果请求不包含cookie，则默认为{}。</td><td style="text-align:right">console.dir(req.cookies.name)</td></tr><tr><td>req.signedCookies</td><td style="text-align:center">同 req.cookies</td><td style="text-align:right">如果cookie已签名，必须使用这个，而不能使用 req.cookies</td></tr><tr><td>req.fresh</td><td style="text-align:center">指示请求是否“新鲜”。它是相反的req.stale。</td><td style="text-align:right">用法查看<a href="http://expressjs.com/en/4x/api.html#req" target="_blank" rel="noopener">这里</a></td></tr><tr><td>req.stale</td><td style="text-align:center">指示请求是否“陈旧”，并且与之相反req.fresh。</td><td style="text-align:right">用法查看<a href="http://expressjs.com/en/4x/api.html#req" target="_blank" rel="noopener">这里</a></td></tr><tr><td>req.hostname</td><td style="text-align:center">包含从HostHTTP标头派生的主机名。</td><td style="text-align:right">/<em> Host: “example.com:3000” </em>/        console.dir(req.hostname);    // =&gt; ‘example.com’</td></tr><tr><td>req.ip</td><td style="text-align:center">包含请求的远程IP地址。</td><td style="text-align:right">console.dir(req.ip);    // =&gt; ‘127.0.0.1’</td></tr><tr><td>req.method</td><td style="text-align:center">包含对应于该请求的HTTP方法的字符串：  GET，POST，PUT，等。</td><td style="text-align:right">- </td></tr><tr><td>req.protocol</td><td style="text-align:center">包含请求协议字符串：http或者（对于TLS请求）https。</td><td style="text-align:right">console.dir(req.protocol);        // =&gt; ‘http’</td></tr><tr><td>req.route</td><td style="text-align:center">包含当前匹配的路由，一个对象。</td><td style="text-align:right">用法查看<a href="http://expressjs.com/en/4x/api.html#req" target="_blank" rel="noopener">这里</a></td></tr><tr><td>req.secure</td><td style="text-align:center">一个布尔属性，如果建立了TLS连接，则该属性为true。</td><td style="text-align:right">相当于：console.dir(req.protocol === ‘https’);    // =&gt; true</td></tr><tr><td>req.subdomains</td><td style="text-align:center">请求的域名中的一组子域。</td><td style="text-align:right">/<em> Host: “tobi.ferrets.example.com” </em>/        console.dir(req.subdomains);    // =&gt; [‘ferrets’, ‘tobi’]</td></tr><tr><td>req.xhr</td><td style="text-align:center">一个布尔属性，true如果请求的X-Requested-With头字段是“XMLHttpRequest”，则表示该请求是由客户端库（如jQuery）发出的。</td><td style="text-align:right">console.dir(req.xhr);        // =&gt; true</td></tr></tbody></table><h3 id="3、Response"><a href="#3、Response" class="headerlink" title="3、Response"></a>3、<code>Response</code></h3><h4 id="res-end（-data-，encoding-）"><a href="#res-end（-data-，encoding-）" class="headerlink" title="res.end（[data] [，encoding]）"></a>res.end（[data] [，encoding]）</h4><p>结束响应过程。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.end()</span><br><span class="line">res.status(<span class="number">404</span>).end()</span><br></pre></td></tr></table></figure><h4 id="res-send-body"><a href="#res-send-body" class="headerlink" title="res.send([body])"></a><code>res.send([body])</code></h4><p>与 <code>res.end()</code> 的区别：</p><ul><li>参数 <code>body</code> 可以是 <code>String</code>、<code>Buffer</code>，也可以是 <code>Array</code>、<code>Object</code></li><li>会自动添加响应头：”Content-Type: text/html; charset=utf-8” </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.send(Buffer.from(<span class="string">'whoop'</span>))</span><br><span class="line">res.send(&#123; <span class="attr">some</span>: <span class="string">'json'</span> &#125;)</span><br><span class="line">res.send(<span class="string">'&lt;p&gt;some html&lt;/p&gt;'</span>)</span><br></pre></td></tr></table></figure><h4 id="res-sendFile（path-，options-，fn-）"><a href="#res-sendFile（path-，options-，fn-）" class="headerlink" title="res.sendFile（path [，options] [，fn]）"></a><code>res.sendFile（path [，options] [，fn]）</code></h4><p>在指定时间发送文件到客户端。<code>Content-Type</code> 会根据文件的扩展名设置响应 <code>HTTP</code> 响应头字段。除非在 <code>options</code> 对象中设置了该选项，否则 <code>path</code> 必须是该文件的绝对路径。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/file/:name'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> options = &#123;</span><br><span class="line">    root: path.join(__dirname, <span class="string">'public'</span>),</span><br><span class="line">    dotfiles: <span class="string">'deny'</span>,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'x-timestamp'</span>: <span class="built_in">Date</span>.now(),</span><br><span class="line">      <span class="string">'x-sent'</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> fileName = req.params.name</span><br><span class="line">  res.sendFile(fileName, options, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      next(err)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'Sent:'</span>, fileName)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="res-sendStatus（statusCode）"><a href="#res-sendStatus（statusCode）" class="headerlink" title="res.sendStatus（statusCode）"></a><code>res.sendStatus（statusCode）</code></h4><p>设置响应状态码并结束响应</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.sendStatus(<span class="number">200</span>) <span class="comment">// equivalent to res.status(200).send('OK')</span></span><br></pre></td></tr></table></figure><h4 id="res-status"><a href="#res-status" class="headerlink" title="res.status"></a><code>res.status</code></h4><p>设置响应状态码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">res.status(<span class="number">200</span>).send(<span class="string">'OK'</span>)</span><br></pre></td></tr></table></figure><h4 id="res-set-field-，value"><a href="#res-set-field-，value" class="headerlink" title="res.set(field [，value])"></a><code>res.set(field [，value])</code></h4><p>将响应的 <code>HTTP</code> 请求头 <code>field</code> 设置为 <code>value</code>。要一次设置多个字段，请传递一个对象作为参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">res.set(<span class="string">'Content-Type'</span>, <span class="string">'text/plain'</span>)</span><br><span class="line"></span><br><span class="line">res.set(&#123;</span><br><span class="line">  <span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>,</span><br><span class="line">  <span class="string">'Content-Length'</span>: <span class="string">'123'</span>,</span><br><span class="line">  <span class="string">'ETag'</span>: <span class="string">'12345'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="res-get-field"><a href="#res-get-field" class="headerlink" title="res.get(field)"></a><code>res.get(field)</code></h4><p>返回由指定的HTTP响应头field。该匹配不区分大小写。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.get(<span class="string">'Content-Type'</span>)</span><br><span class="line"><span class="comment">// =&gt; "text/plain"</span></span><br></pre></td></tr></table></figure></p><h4 id="res-redirect-status，-path"><a href="#res-redirect-status，-path" class="headerlink" title="res.redirect([status，] path)"></a><code>res.redirect([status，] path)</code></h4><p>重定向到指定的 <code>URL path</code>，具有指定的status与HTTP状态代码对应的正整数。如果未指定，则status默认为”302”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res.redirect(<span class="string">'/foo/bar'</span>)</span><br><span class="line">res.redirect(<span class="string">'http://example.com'</span>)</span><br><span class="line">res.redirect(<span class="number">301</span>, <span class="string">'http://example.com'</span>)</span><br><span class="line">res.redirect(<span class="string">'../login'</span>)</span><br></pre></td></tr></table></figure><h4 id="res-json（-body-）"><a href="#res-json（-body-）" class="headerlink" title="res.json（[body]）"></a><code>res.json（[body]）</code></h4><p>用法同 <code>res.send()</code>;</p><h4 id="res-append-field-，value"><a href="#res-append-field-，value" class="headerlink" title="res.append(field [，value])"></a><code>res.append(field [，value])</code></h4><p>将指定的内容追加 <code>value</code> 到 <code>HTTP</code> 响应头 <code>field</code>。如果尚未设置标头，则会创建具有指定值的标头。所述 <code>value</code> 参数可以是字符串或数组。</p><blockquote><p>注意：调用res.set()after res.append()将重置先前设置的标头值。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">res.append(<span class="string">'Link'</span>, [<span class="string">'&lt;http://localhost/&gt;'</span>, <span class="string">'&lt;http://localhost:3000/&gt;'</span>])</span><br><span class="line">res.append(<span class="string">'Set-Cookie'</span>, <span class="string">'foo=bar; Path=/; HttpOnly'</span>)</span><br><span class="line">res.append(<span class="string">'Warning'</span>, <span class="string">'199 Miscellaneous warning'</span>)</span><br></pre></td></tr></table></figure><h4 id="res-cookie-name，value-options"><a href="#res-cookie-name，value-options" class="headerlink" title="res.cookie(name，value [, options])"></a><code>res.cookie(name，value [, options])</code></h4><p>设置 <code>cookie</code> 中的 <code>name</code> 属性为 <code>value</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.cookie(<span class="string">'name'</span>, <span class="string">'tobi'</span>, &#123; <span class="attr">domain</span>: <span class="string">'.example.com'</span>, <span class="attr">path</span>: <span class="string">'/admin'</span>, <span class="attr">secure</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">res.cookie(<span class="string">'rememberme'</span>, <span class="string">'1'</span>, &#123; <span class="attr">expires</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.now() + <span class="number">900000</span>), <span class="attr">httpOnly</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure><h4 id="res-clearCookie-name-，options"><a href="#res-clearCookie-name-，options" class="headerlink" title="res.clearCookie(name [，options])"></a><code>res.clearCookie(name [，options])</code></h4><p>清除 <code>cookie</code> 中对应的 <code>name</code> 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">res.cookie(<span class="string">'name'</span>, <span class="string">'tobi'</span>, &#123; <span class="attr">path</span>: <span class="string">'/admin'</span> &#125;)</span><br><span class="line">res.clearCookie(<span class="string">'name'</span>, &#123; <span class="attr">path</span>: <span class="string">'/admin'</span> &#125;)</span><br></pre></td></tr></table></figure><h3 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h3><p>与 app 中使用 路由的方式类似：</p><ul><li><p>router.Method(path, callback)</p></li><li><p>router.use()</p></li><li><p>router.all()</p></li><li><p>router.route()</p></li></ul><hr><h2 id="四、参考文档"><a href="#四、参考文档" class="headerlink" title="四、参考文档"></a>四、参考文档</h2><ul><li><a href="http://expressjs.com/zh-cn/" target="_blank" rel="noopener">express 中文文档</a></li><li><a href="http://expressjs.com/" target="_blank" rel="noopener">express 英文文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文从安装、用法、常用 API 等方面简单介绍了 Express 的用法。&lt;/p&gt;
    
    </summary>
    
      <category term="Node" scheme="https://beichensky.github.io/categories/Node/"/>
    
      <category term="Express" scheme="https://beichensky.github.io/categories/Node/Express/"/>
    
    
      <category term="Node" scheme="https://beichensky.github.io/tags/Node/"/>
    
      <category term="Express" scheme="https://beichensky.github.io/tags/Express/"/>
    
  </entry>
  
  <entry>
    <title>使用 JSBridge 与原生 IOS、Android 进行交互（含H5、Android、IOS端代码，附 Demo）</title>
    <link href="https://beichensky.github.io/20190709/jsbridge-native/"/>
    <id>https://beichensky.github.io/20190709/jsbridge-native/</id>
    <published>2019-07-09T02:18:29.000Z</published>
    <updated>2019-08-03T09:27:33.917Z</updated>
    
    <content type="html"><![CDATA[<p>本文详细讲述了如何使用 JSBridge 在 H5 和原生 Android、IOS之间进行交互。IOS 端包含 OC 和 Swift 的版本，Android 端包含 Java 和 Kotlin 版本。</p><a id="more"></a><h2 id="一、写在前面"><a href="#一、写在前面" class="headerlink" title="一、写在前面"></a>一、写在前面</h2><p>本文主要是通过代码讲述了如何使用 JSBridge 在 H5 和 原生之间进行通信。文中包含 H5、IOS、Android 三部分的代码。<br>IOS 中使用 OC 和 Swift 分别进行了代码实现。Android 中使用 Java 和 Kotlin 分别进行了代码实现。</p><p>Demo 地址：<a href="https://github.com/beichensky/jsbridge-example" target="_blank" rel="noopener">jsbridge-example</a></p><ul><li><code>JSBridgeH5</code>：<code>H5</code> 端代码实现</li><li><code>JSBridgeIOSOC</code>：原生 <code>IOS</code> 端 <code>OC</code> 代码实现</li><li><code>JSBridgeIOSSwift</code>：原生 <code>IOS</code> 端 <code>Swift</code> 代码实现</li><li><code>JSBridgeAndroidJava</code>：原生 <code>Android</code> 端 <code>Java</code> 代码实现</li><li><code>JSBridgeAndroidKotlin</code>：原生 <code>IOS</code> 端 <code>Kotlin</code> 代码实现</li></ul><p>本文没有讲解关于原理的部分，只是详细使用代码介绍了 JSBridge 的使用。想要了解原理的朋友，可以另行搜索关于原理的博客。</p><hr><h2 id="二、H5-端代码"><a href="#二、H5-端代码" class="headerlink" title="二、H5 端代码"></a>二、H5 端代码</h2><ul><li>初始化 <code>WebViewJavascriptBridge</code>，方式代码如下</li><li>注册供原生调用的事件函数：<br><code>window.setupWebViewJavascriptBridge(bridge =&gt; bridge.registerHandler(&#39;fnName&#39;, function) )</code></li><li>调用原生事件函数：<br><code>window.setupWebViewJavascriptBridge(bridge =&gt; bridge.callHandler(&#39;fnName&#39;, data, callback) )</code></li></ul><h3 id="1、初始化-WebViewJavascriptBridge"><a href="#1、初始化-WebViewJavascriptBridge" class="headerlink" title="1、初始化 WebViewJavascriptBridge"></a>1、初始化 <code>WebViewJavascriptBridge</code></h3><p>在项目入口文件或者根 <code>js</code> 文件下，添加以下代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 这里根据移动端原生的 userAgent 来判断当前是 Android 还是 ios</span></span><br><span class="line"><span class="keyword">const</span> u = navigator.userAgent;</span><br><span class="line"><span class="comment">// Android终端</span></span><br><span class="line"><span class="keyword">const</span> isAndroid = u.indexOf(<span class="string">'Android'</span>) &gt; <span class="number">-1</span> || u.indexOf(<span class="string">'Adr'</span>) &gt; <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// IOS 终端</span></span><br><span class="line"><span class="keyword">const</span> isIOS = !!u.match(<span class="regexp">/\(i[^;]+;( U;)? CPU.+Mac OS X/</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配合 IOS 使用时的初始化方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> iosFunction = <span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.WebViewJavascriptBridge) &#123; <span class="keyword">return</span> callback(<span class="built_in">window</span>.WebViewJavascriptBridge) &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.WVJBCallbacks) &#123; <span class="keyword">return</span> <span class="built_in">window</span>.WVJBCallbacks.push(callback) &#125;</span><br><span class="line">    <span class="built_in">window</span>.WVJBCallbacks = [callback];</span><br><span class="line">    <span class="keyword">var</span> WVJBIframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">    WVJBIframe.style.display = <span class="string">'none'</span>;</span><br><span class="line">    WVJBIframe.src = <span class="string">'wvjbscheme://__BRIDGE_LOADED__'</span>;</span><br><span class="line">    <span class="built_in">document</span>.documentElement.appendChild(WVJBIframe);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">document</span>.documentElement.removeChild(WVJBIframe);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配合 Android 使用时的初始化方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> andoirFunction = <span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.WebViewJavascriptBridge) &#123;</span><br><span class="line">        callback(<span class="built_in">window</span>.WebViewJavascriptBridge);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.addEventListener(<span class="string">'WebViewJavascriptBridgeReady'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            callback(<span class="built_in">window</span>.WebViewJavascriptBridge);</span><br><span class="line">        &#125;, <span class="literal">false</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.setupWebViewJavascriptBridge = isAndroid ? andoirFunction : iosFuntion;</span><br><span class="line"></span><br><span class="line">isAndroid &amp;&amp; <span class="built_in">window</span>.setupWebViewJavascriptBridge(<span class="function"><span class="keyword">function</span> (<span class="params">bridge</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 注册 H5 界面的默认接收函数（与安卓交互时，安卓端可以不调用函数名，直接 send 数据过来，就能够在这里接收到数据）</span></span><br><span class="line">    bridge.init(<span class="function"><span class="keyword">function</span> (<span class="params">msg, responseCallback</span>) </span>&#123;</span><br><span class="line">        message.success(msg);</span><br><span class="line">        responseCallback(<span class="string">"JS 返回给原生的消息内容"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="2、注册与原生交互的事件函数"><a href="#2、注册与原生交互的事件函数" class="headerlink" title="2、注册与原生交互的事件函数"></a>2、注册与原生交互的事件函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    window.setupWebViewJavascriptBridge(bridge =&gt; &#123;</span></span><br><span class="line"><span class="comment">        bridge.registerHandler('事件函数名',fun 执行函数);</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">window</span>.setupWebViewJavascriptBridge(<span class="function"><span class="params">bridge</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * data：原生传过来的数据</span></span><br><span class="line"><span class="comment">     * fn: 原生传过来的回调函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    bridge.registerHandler(<span class="string">"H5Function"</span>, (data, fn) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data);</span><br><span class="line">        fn &amp;&amp; fn();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3、调用原生注册的事件函数"><a href="#3、调用原生注册的事件函数" class="headerlink" title="3、调用原生注册的事件函数"></a>3、调用原生注册的事件函数</h3><p>调用原生注册的时间函数时使用如下的代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    window.setupWebViewJavascriptBridge(bridge =&gt; &#123;</span></span><br><span class="line"><span class="comment">        bridge.callHandler('安卓端函数名', "传给原生端的数据", callback 回调函数);</span></span><br><span class="line"><span class="comment">    &#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="built_in">window</span>.setupWebViewJavascriptBridge(<span class="function"><span class="params">bridge</span> =&gt;</span> &#123;</span><br><span class="line">    bridge.callHandler(<span class="string">'changeData'</span>, data, (result) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><hr><h2 id="三、IOS-端代码"><a href="#三、IOS-端代码" class="headerlink" title="三、IOS 端代码"></a>三、IOS 端代码</h2><ul><li><p>初始化 WebViewJavascriptBridge: </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+ (instancetype)bridgeForWebView:(id)webView;</span><br><span class="line">+ (instancetype)bridge:(id)webView;</span><br></pre></td></tr></table></figure></li><li><p>注册与 <code>H5</code> 端交互的事件函数：<br><code>- (void)registerHandler:(NSString*)handlerName handler:(WVJBHandler)handler;</code></p></li><li><p>调用 <code>H5</code> 端事件函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)callHandler:(NSString*)handlerName;</span><br><span class="line">- (<span class="keyword">void</span>)callHandler:(NSString*)handlerName data:(id)data;</span><br><span class="line">- (<span class="keyword">void</span>)callHandler:(NSString*)handlerName data:(id)data responseCallback:(WVJBResponseCallback)responseCallback;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1、引入-WebViewJavascriptBridge"><a href="#1、引入-WebViewJavascriptBridge" class="headerlink" title="1、引入 WebViewJavascriptBridge"></a>1、引入 WebViewJavascriptBridge</h3><h4 id="直接使用方式"><a href="#直接使用方式" class="headerlink" title="直接使用方式"></a>直接使用方式</h4><ul><li><p>下载 <a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="noopener">WebViewJavascriptBridge</a></p></li><li><p>找到 <code>WebViewJavascriptBridge</code>文件夹，直接拖入到 XCode 项目中，在提示的弹窗中选择 <code>Copy items if needed</code> 和 <code>Create groups</code>，如下图：<br><img src="/images/jsbridge/dragGroup.png" alt="Drag Group"></p></li><li><p>在 <code>ViewController.h</code> 头文件中引入 <code>#import &quot;WebViewJavascriptBridge.h&quot;</code> 即可</p></li></ul><h4 id="Cocopad-使用方式"><a href="#Cocopad-使用方式" class="headerlink" title="Cocopad 使用方式"></a>Cocopad 使用方式</h4><p>如必须使用这种方式请自行 Google。</p><h3 id="2、初始化-WebViewJavascriptBridge"><a href="#2、初始化-WebViewJavascriptBridge" class="headerlink" title="2、初始化 WebViewJavascriptBridge"></a>2、初始化 WebViewJavascriptBridge</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 启用 WebViewJavascriptBridge Log</span></span><br><span class="line">[WebViewJavascriptBridge enableLogging];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 WKWebViewConfiguration 对象</span></span><br><span class="line">self.webConfig = [[WKWebViewConfiguration alloc] init];</span><br><span class="line"><span class="comment">// 设置偏好设置</span></span><br><span class="line">_webConfig.preferences = [[WKPreferences alloc] init];</span><br><span class="line"><span class="comment">// 默认为0</span></span><br><span class="line">_webConfig.preferences.minimumFontSize = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 默认认为YES</span></span><br><span class="line">_webConfig.preferences.javaScriptEnabled = YES;</span><br><span class="line"><span class="comment">// 在iOS上默认为NO，表示不能自动通过窗口打开</span></span><br><span class="line">_webConfig.preferences.javaScriptCanOpenWindowsAutomatically = NO;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 请替换成页面的 url 地址</span></span><br><span class="line">NSString *URLSTR = @<span class="string">"http://xxx.xxx.xxx.xx:xxxx"</span>;</span><br><span class="line">self.webView = [[WKWebView alloc] initWithFrame:self.view.bounds configuration:_webConfig];</span><br><span class="line"><span class="comment">// 设置 UserAgent 后缀</span></span><br><span class="line">_webView.customUserAgent = [NSString stringWithFormat:self.webView.customUserAgent, @<span class="string">"app"</span>];</span><br><span class="line">_webView.UIDelegate = self;</span><br><span class="line">_webView.navigationDelegate = self;</span><br><span class="line">NSURL *url = [NSURL URLWithString:URLSTR];</span><br><span class="line">NSURLRequest *urlRequest = [NSURLRequest requestWithURL:url];</span><br><span class="line">[_webView loadRequest:urlRequest];</span><br><span class="line">[self.view addSubview:_webView];</span><br><span class="line"></span><br><span class="line">self.bridge = [WebViewJavascriptBridge bridgeForWebView:self.webView];</span><br><span class="line">[_bridge setWebViewDelegate:self];</span><br></pre></td></tr></table></figure><h3 id="3、注册与-H5-端交互的事件函数"><a href="#3、注册与-H5-端交互的事件函数" class="headerlink" title="3、注册与 H5 端交互的事件函数"></a>3、注册与 H5 端交互的事件函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例：注册修改 User 名称的 changeUser 函数</span></span><br><span class="line">[self.bridge registerHandler:@<span class="string">"changeUser"</span> handler:^(id data, WVJBResponseCallback responseCallback) &#123;</span><br><span class="line">    <span class="comment">// 在这里处理逻辑</span></span><br><span class="line">    NSLog(@<span class="string">"JS 传过来的数据%@"</span>, data);</span><br><span class="line">    <span class="keyword">if</span> (responseCallback) &#123;</span><br><span class="line">        <span class="comment">// 执行回调函数</span></span><br><span class="line">        responseCallback(@<span class="string">"返回给 JS 的数据"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><h3 id="4、调用-H5-端事件函数"><a href="#4、调用-H5-端事件函数" class="headerlink" title="4、调用 H5 端事件函数"></a>4、调用 H5 端事件函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 调用 H5 界面的 changeName 事件函数</span><br><span class="line">[self.bridge callHandler:@&quot;changeName&quot; data:name responseCallback:^(id responseData) &#123;</span><br><span class="line">    NSLog(@&quot;JS 调用 OC 回调函数返回的值：%@&quot;, responseData);</span><br><span class="line">&#125;];</span><br></pre></td></tr></table></figure><hr><h2 id="四、Android-端代码"><a href="#四、Android-端代码" class="headerlink" title="四、Android 端代码"></a>四、Android 端代码</h2><ul><li><p>注册与 <code>H5</code> 交互的事件函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerHandler</span><span class="params">(String handlerName, BridgeHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">        messageHandlers.put(handlerName, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用 <code>H5</code> 端事件函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callHandler</span><span class="params">(String handlerName, String data, CallBackFunction callBack)</span> </span>&#123;</span><br><span class="line">    doSend(handlerName, data, callBack);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册与 <code>H5</code> 交互的默认事件，即 <code>H5</code> 端不调用函数名，直接使用 <code>send</code> 函数传递数据，安卓端也可以在这个事件中接收到数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置默认接收函数</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDefaultHandler</span><span class="params">(BridgeHandler handler)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.defaultHandler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用 H5 端注册的默认事件函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String data, CallBackFunction responseCallback)</span> </span>&#123;</span><br><span class="line">    doSend(<span class="keyword">null</span>, data, responseCallback);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="1、引入-BridgeWebView"><a href="#1、引入-BridgeWebView" class="headerlink" title="1、引入 BridgeWebView"></a>1、引入 BridgeWebView</h3><ul><li><p>在项目的 build.gradle 文件中添加如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">buildTypes &#123;</span><br><span class="line">    // ...</span><br><span class="line">    repositories &#123;</span><br><span class="line">        // ...</span><br><span class="line">        maven &#123; url &quot;https://jitpack.io&quot; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>添加依赖：<code>implementation &#39;com.github.lzyzsd:jsbridge:1.0.4&#39;</code></p></li></ul><h3 id="2、初始化-BridgeWebView"><a href="#2、初始化-BridgeWebView" class="headerlink" title="2、初始化 BridgeWebView"></a>2、初始化 BridgeWebView</h3><h4 id="在-activity-main-xml-文件中添加布局"><a href="#在-activity-main-xml-文件中添加布局" class="headerlink" title="在 activity_main.xml 文件中添加布局"></a>在 <code>activity_main.xml</code> 文件中添加布局</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.github.lzyzsd.jsbridge.BridgeWebView</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">"@+id/main_wv"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">com.github.lzyzsd.jsbridge.BridgeWebView</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="在-MainActivity-中初始化-BridgeWebView"><a href="#在-MainActivity-中初始化-BridgeWebView" class="headerlink" title="在 MainActivity 中初始化 BridgeWebView"></a>在 MainActivity 中初始化 BridgeWebView</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">mWebView = findViewById(R.id.main_wv);</span><br><span class="line"></span><br><span class="line">mWebView.getSettings().setAllowFileAccess(<span class="keyword">true</span>);</span><br><span class="line">mWebView.getSettings().setAppCacheEnabled(<span class="keyword">true</span>);</span><br><span class="line">mWebView.getSettings().setDatabaseEnabled(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 开启 localStorage</span></span><br><span class="line">mWebView.getSettings().setDomStorageEnabled(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 设置支持javascript</span></span><br><span class="line">mWebView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 进行缩放</span></span><br><span class="line">mWebView.getSettings().setBuiltInZoomControls(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 设置UserAgent</span></span><br><span class="line">mWebView.getSettings().setUserAgentString(mWebView.getSettings().getUserAgentString() + <span class="string">"app"</span>);</span><br><span class="line"><span class="comment">// 设置不用系统浏览器打开,直接显示在当前WebView</span></span><br><span class="line">mWebView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient());</span><br><span class="line">mWebView.setWebViewClient(<span class="keyword">new</span> MyWebViewClient(mWebView));</span><br><span class="line"></span><br><span class="line">mWebView.loadUrl(URL);</span><br></pre></td></tr></table></figure><h3 id="3、注册与-H5-交互的事件函数"><a href="#3、注册与-H5-交互的事件函数" class="headerlink" title="3、注册与 H5 交互的事件函数"></a>3、注册与 H5 交互的事件函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认事件函数</span></span><br><span class="line">mWebView.setDefaultHandler(<span class="keyword">new</span> BridgeHandler() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(String data, CallBackFunction function)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, data, Toast.LENGTH_LONG).show();</span><br><span class="line">        function.onCallBack(<span class="string">"安卓返回给 JS 的消息内容"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通事件函数</span></span><br><span class="line">mWebView.registerHandler(<span class="string">"reloadUrl"</span>, <span class="keyword">new</span> BridgeHandler() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handler</span><span class="params">(String data, CallBackFunction function)</span> </span>&#123;</span><br><span class="line">        mWebView.reload();</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"刷新成功~"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        function.onCallBack(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="4、调用-H5-端事件函数-1"><a href="#4、调用-H5-端事件函数-1" class="headerlink" title="4、调用 H5 端事件函数"></a>4、调用 H5 端事件函数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用 H5 端默认事件函数</span></span><br><span class="line">mWebView.send(<span class="string">"安卓传递给 JS 的消息"</span>, <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, data, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 H5 端普通事件函数</span></span><br><span class="line">mWebView.callHandler(<span class="string">"changeName"</span>, mEditName.getText().toString(), <span class="keyword">new</span> CallBackFunction() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCallBack</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"name 修改成功"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        mEditName.setText(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5、添加网络权限"><a href="#5、添加网络权限" class="headerlink" title="5、添加网络权限"></a>5、添加网络权限</h3><p>这一步是必须的，否则的话， WebView 加载不出来，手机界面会提示 <code>Webpage not available</code>。</p><ul><li><p>在 <code>AndroidManifest.xml</code> 清单文件中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>添加了权限之后，网页可能还是加载不出来，可能是因为对未加密的流量不信任，在 <code>AndroidManifest.xml</code> 的 <code>application</code> 中添加一个属性：<code>android:usesCleartextTraffic=&quot;true&quot;</code>。如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">...</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> </span></span><br><span class="line"><span class="tag">        <span class="attr">...</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:usesCleartextTraffic</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="五、Tips"><a href="#五、Tips" class="headerlink" title="五、Tips"></a>五、Tips</h2><h3 id="1、在-Swift-中使用-WebViewJavascriptBridge"><a href="#1、在-Swift-中使用-WebViewJavascriptBridge" class="headerlink" title="1、在 Swift 中使用 WebViewJavascriptBridge"></a>1、在 Swift 中使用 WebViewJavascriptBridge</h3><p>和在 OC 中使用类似，直接将下载好的 <code>WebViewJavascriptBridge</code> 文件夹拖到 <code>Swift</code> 项目中。<br>但此时还不能直接使用，因为 <code>WebViewJavascriptBridge</code> 中使用 <code>OC</code> 编写的。所以需要先创建一个头文件，名为：项目名-Bridging-Header.h，将需要用到的 <code>OC</code> 的头文件引入进去。<br>这里我建议不要手动创建，可以让 <code>XCode</code> 自动帮忙创建。创建方式：在 <code>Swift</code> 项目中创建一个 <code>OC</code> 文件：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsbridge/newOC.png" alt="创建 OC 文件" title="">                </div>                <div class="image-caption">创建 OC 文件</div>            </figure></p><p>之后 XCode 会自动提示创建 <code>Bridging Header</code>：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsbridge/ocBridge.png" alt="创建 Bridging Header" title="">                </div>                <div class="image-caption">创建 Bridging Header</div>            </figure></p><p>创建之后，在文件夹中引入 <code>WebViewJavascriptBridge.h</code> 头文件：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsbridge/importOC.png" alt="引入 OC 头文件" title="">                </div>                <div class="image-caption">引入 OC 头文件</div>            </figure></p><p>最后，就可以在 <code>Swift</code> 代码中正常使用 <code>OC</code> 编写的方法了：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsbridge/useOC.png" alt="使用 OC 编写方法" title="">                </div>                <div class="image-caption">使用 OC 编写方法</div>            </figure></p><h3 id="2、运行-XCode-项目报错，控制台提示：Unknown-class-ViewController-in-Interface-Builder-file"><a href="#2、运行-XCode-项目报错，控制台提示：Unknown-class-ViewController-in-Interface-Builder-file" class="headerlink" title="2、运行 XCode 项目报错，控制台提示：Unknown class ViewController in Interface Builder file."></a>2、运行 XCode 项目报错，控制台提示：Unknown class ViewController in Interface Builder file.</h3><p>解决办法：<br>打开 <code>Main.storyboard</code> 文件，按照下图所示，找到箭头所指输入框中的 <code>ViewController</code>，删除掉，之后再重新输入，找到新的 <code>ViewController</code>，填进去即可：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/jsbridge/resolveProblem.png" alt="解决异常" title="">                </div>                <div class="image-caption">解决异常</div>            </figure></p><hr><h2 id="六、参考链接"><a href="#六、参考链接" class="headerlink" title="六、参考链接"></a>六、参考链接</h2><ul><li><a href="https://github.com/lzyzsd/JsBridge" target="_blank" rel="noopener">JsBridge</a></li><li><a href="https://github.com/marcuswestin/WebViewJavascriptBridge" target="_blank" rel="noopener">WebViewJavascriptBridge</a></li><li><a href="https://www.jianshu.com/p/7068868776c0" target="_blank" rel="noopener">iOS开发-WKWebView设置cookie</a></li><li><a href="https://www.cnblogs.com/huntaiji/p/4073006.html" target="_blank" rel="noopener">swift项目中使用OC/C的方法</a></li><li><a href="https://blog.csdn.net/a411358606/article/details/50478737" target="_blank" rel="noopener">iOS类似Android上toast效果</a></li></ul><hr><h2 id="七、Demo-地址"><a href="#七、Demo-地址" class="headerlink" title="七、Demo 地址"></a>七、Demo 地址</h2><p><a href="https://github.com/beichensky/jsbridge-example" target="_blank" rel="noopener">jsbridge-example</a></p><p>如果有所帮助，欢迎 Star！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文详细讲述了如何使用 JSBridge 在 H5 和原生 Android、IOS之间进行交互。IOS 端包含 OC 和 Swift 的版本，Android 端包含 Java 和 Kotlin 版本。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Andoird" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Andoird/"/>
    
      <category term="IOS" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Andoird/IOS/"/>
    
    
      <category term="JS" scheme="https://beichensky.github.io/tags/JS/"/>
    
      <category term="IOS" scheme="https://beichensky.github.io/tags/IOS/"/>
    
      <category term="Andoird" scheme="https://beichensky.github.io/tags/Andoird/"/>
    
      <category term="JSBridge" scheme="https://beichensky.github.io/tags/JSBridge/"/>
    
  </entry>
  
  <entry>
    <title>SSH 学习笔记</title>
    <link href="https://beichensky.github.io/20190531/SSH-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://beichensky.github.io/20190531/SSH-学习笔记/</id>
    <published>2019-05-31T08:59:02.000Z</published>
    <updated>2019-08-03T09:27:33.916Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、创建命令"><a href="#一、创建命令" class="headerlink" title="一、创建命令"></a>一、创建命令</h3><ul><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"这里换上你的邮箱"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="二、ssh-add-命令"><a href="#二、ssh-add-命令" class="headerlink" title="二、ssh-add 命令"></a>二、ssh-add 命令</h3><ul><li>将 ssh 添加到 ssh-agent：<code>ssh-add ~/admin/.ssh/id_rsa</code></li><li>将 ssh 从 ssh-agent 中删除：<code>ssh-add -d ~/admin/.ssh/id_rsa</code></li><li>切换用户，只需要将 前一个秘钥使用 <code>ssh-add</code> 删除，将后一个秘钥使用 <code>ssh-add</code> 添加上即可 </li><li>检查当前秘钥：<code>ssh-add -l</code></li><li><a href="http://man.linuxde.net/ssh-add" target="_blank" rel="noopener">更多命令</a></li></ul><h3 id="三、ssh-命令"><a href="#三、ssh-命令" class="headerlink" title="三、ssh 命令"></a>三、ssh 命令</h3><ul><li>检查当前用户：<code>ssh -T git@github.com</code></li><li>测试能不能连接到远程仓库服务器，并获取信息：<code>ssh 172.16.6.1</code></li></ul><h3 id="四、查看-git-凭证"><a href="#四、查看-git-凭证" class="headerlink" title="四、查看 git 凭证"></a>四、查看 git 凭证</h3><ul><li>查看当前系统支持的git 凭证：<code>git help -a | grep credential</code></li><li>查看自己电脑的全局配置：<code>git config —list</code></li><li>查看本机的 git 凭证是否全部删除：<code>git config credential.helper</code>，如果出现osxkeychain， store 或者 cache 等文件说明没有全部删除，没有任何反应，说明凭证文件全部清除了</li><li>查看凭证文件所在目录：<code>git config --show-origin --get credential.helper</code></li><li>如果你的Mac上还有Xcode的话，那么Xcode中还会有一个.gitconfig文件，找出他然后打开，清空[credential]。</li></ul><h3 id="五、其他命令"><a href="#五、其他命令" class="headerlink" title="五、其他命令"></a>五、其他命令</h3><ul><li>查看指定目录下指定文件是否存在：<code>ls -al 文件目录/文件</code><ul><li>eg：<code>ls -al ~/admin/.ssh</code></li></ul></li></ul><h3 id="六、可能遇到的问题"><a href="#六、可能遇到的问题" class="headerlink" title="六、可能遇到的问题"></a>六、可能遇到的问题</h3><ul><li><p>The authenticity of host ‘github.com (52.74.223.119)’ can’t be established.</p><p>RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</p><p>Are you sure you want to continue connecting (yes/no)?</p><ul><li>解决办法：直接输入 yes 即可，会在 .ssh 文件中生成一个 <code>known_hosts</code> 文件，之后在 clone 项目就不会出现这个问题了</li></ul></li></ul><h3 id="七、参考文档"><a href="#七、参考文档" class="headerlink" title="七、参考文档"></a>七、参考文档</h3><ul><li><a href="https://blog.csdn.net/lqlqlq007/article/details/78983879" target="_blank" rel="noopener">git ssh key配置</a></li><li><a href="https://blog.csdn.net/lqlqlq007/article/details/80613272" target="_blank" rel="noopener">git多用户切换</a></li><li><a href="https://blog.csdn.net/qq_36602939/article/details/79794686" target="_blank" rel="noopener">多个git账号的登录与切换</a></li><li><a href="https://www.jianshu.com/p/77b0340a02f3" target="_blank" rel="noopener">git 缓存密码导致的不能和远程仓库交互unable to access… 403错误</a></li><li><a href="https://blog.csdn.net/m_wbcg/article/details/79156781" target="_blank" rel="noopener">git—如何解决The authenticity of host ‘gitee.com (120.55.226.24)’ can’t be established</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、创建命令&quot;&gt;&lt;a href=&quot;#一、创建命令&quot; class=&quot;headerlink&quot; title=&quot;一、创建命令&quot;&gt;&lt;/a&gt;一、创建命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="SSH" scheme="https://beichensky.github.io/tags/SSH/"/>
    
      <category term="Shell" scheme="https://beichensky.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>JS 小数运算出现误差的两种解决办法</title>
    <link href="https://beichensky.github.io/20190528/JS-%E5%B0%8F%E6%95%B0%E8%BF%90%E7%AE%97%E5%87%BA%E7%8E%B0%E8%AF%AF%E5%B7%AE%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://beichensky.github.io/20190528/JS-小数运算出现误差的解决办法/</id>
    <published>2019-05-28T07:50:07.000Z</published>
    <updated>2019-08-03T09:27:33.915Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了解决 <code>JS</code> 中小数运算出现误差的两种解决办法</p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在 JS 的小数运算中可能会出现一些问题，比如说下面两种情况：</p><ul><li><code>0.1 + 0.2</code> 加法出现精度偏差问题</li><li><code>0.14 * 100</code> 乘法出现精度偏差问题</li></ul><hr><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>下面简单介绍了两种常用的解决方案：</p><h3 id="限制精确位数"><a href="#限制精确位数" class="headerlink" title="限制精确位数"></a>限制精确位数</h3><p>可以限制保留几位小数的方式来避免误差：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保留两位小数</span></span><br><span class="line"><span class="keyword">const</span> num = (<span class="number">0.1</span> + <span class="number">0.2</span>).toFixed(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><h3 id="先将小数转化为整数，运算之后再重新转化为小数"><a href="#先将小数转化为整数，运算之后再重新转化为小数" class="headerlink" title="先将小数转化为整数，运算之后再重新转化为小数"></a>先将小数转化为整数，运算之后再重新转化为小数</h3><p>限制保留小数位数的方式不一定适用于所有场景，有些时候我们必须要根据不同的小数位数来进行计算。那么我们就可以使用下面这种方式。</p><p>定义一个方法，用来对小数进行加法运算<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用来进行小数相加的工具方法</span></span><br><span class="line"><span class="comment">    * @param &#123;*&#125; num1 </span></span><br><span class="line"><span class="comment">    * @param &#123;*&#125; num2 </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">addNum (num1, num2) &#123;</span><br><span class="line">    <span class="keyword">let</span> sq1, sq2, multiple;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sq1 = num1.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        sq1 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        sq2 = num2.toString().split(<span class="string">"."</span>)[<span class="number">1</span>].length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        sq2 = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    multiple = <span class="built_in">Math</span>.pow(<span class="number">10</span>, <span class="built_in">Math</span>.max(sq1, sq2) + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> (num1 * multiple + num2 * multiple) / multiple;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用上面的方法进行小数相加<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = addNum(<span class="number">0.1</span> + <span class="number">0.2</span>);</span><br></pre></td></tr></table></figure></p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>第一种方法简单，方便，易于操作；</p></li><li><p>第二种方法基本可以使用所有小数相加的场景。（如果是其他的运算，修改运算符号，也可以正常使用）</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了解决 &lt;code&gt;JS&lt;/code&gt; 中小数运算出现误差的两种解决办法&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="JS" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/JS/"/>
    
    
      <category term="JS" scheme="https://beichensky.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建一个 React + Mobx + React Router 脚手架</title>
    <link href="https://beichensky.github.io/20190411/react-mobx-starter/"/>
    <id>https://beichensky.github.io/20190411/react-mobx-starter/</id>
    <published>2019-04-11T07:17:53.000Z</published>
    <updated>2019-08-03T09:27:33.914Z</updated>
    
    <content type="html"><![CDATA[<p>本文详细介绍了如何从零开始搭建一个 React 开发的脚手架，包含如何添加 Redux 以及 React Router 的环境。</p><a id="more"></a><p><strong>本文代码地址：<a href="https://github.com/beichensky/react-mobx-starter" target="_blank" rel="noopener">react-mobx-starter</a>。</strong></p><p>建议将代码拉下来之后，配合本文一起查看，效果更佳。</p><p>代码下载命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/beichensky/react-mobx-starter.git</span><br></pre></td></tr></table></figure></p><h2 id="一、前情提要"><a href="#一、前情提要" class="headerlink" title="一、前情提要"></a>一、前情提要</h2><p>本文的 <code>Demo</code> 分为两个环境，一个是开发环境，另一个是生产环境。</p><ul><li>开发环境中讲述的是如何配置出一个更好的、更方便的开发环境；</li><li>而生产环境中讲述的是如何配置出一个更优化、更小版本的生产环境。</li></ul><p>之前我也就 <code>Webpack</code> 的使用写了几篇文章，本文也是在 <code>Webpack</code> 的基础上进行开发，也是在之前的代码上进行的扩展。</p><ul><li><p>开发环境的配置是在 <a href="https://juejin.im/post/5c51520cf265da61180215e5" target="_blank" rel="noopener">从零开始搭建一个 Webpack 开发环境配置（附 Demo）</a> 一文的基础上进行的扩展。</p></li><li><p>生产环境的配置是在 <a href="https://juejin.im/post/5c5407296fb9a049bb7cc4ee" target="_blank" rel="noopener">使用 Webpack 进行生产环境配置（附 Demo）</a> 一文的基础上进行的扩展。</p></li></ul><p>建议：对于 Webpack 还不了解的朋友，可以先看一下 <a href="https://juejin.im/post/5c51520cf265da61180215e5" target="_blank" rel="noopener">从零开始搭建一个 Webpack 开发环境配置（附 Demo）</a> 和 <a href="https://juejin.im/post/5c5407296fb9a049bb7cc4ee" target="_blank" rel="noopener">使用 Webpack 进行生产环境配置（附 Demo）</a> 这两篇文章，可以更好的入手本文。</p><blockquote><p>虽然本文是在之前文章上进行的扩展，但本文还是会详细的介绍每一步的配置。</p></blockquote><hr><h2 id="二、创建项目结构"><a href="#二、创建项目结构" class="headerlink" title="二、创建项目结构"></a>二、创建项目结构</h2><p>新建文件夹，命名为：<code>react-mobx-starter</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir react-mobx-starter</span><br></pre></td></tr></table></figure></p><p>初始化 <code>package.json</code> 文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> react-mobx-starter</span><br><span class="line"></span><br><span class="line"><span class="comment"># 直接生成默认的 package.json 文件</span></span><br><span class="line">npm init -y</span><br></pre></td></tr></table></figure></p><p>创建 <code>src</code> 目录，用来存放我们编写的代码<br>创建 <code>public</code> 目录，用来存放公共的文件<br>创建 <code>webpack</code> 目录，用来存放 <code>webpack</code> 配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir src</span><br><span class="line"></span><br><span class="line">mkdir public</span><br><span class="line"></span><br><span class="line">mkdir webpack</span><br></pre></td></tr></table></figure></p><p>在 src 目录下<br>新建 pages 文件夹，用来存放书写的页面组件<br>新建 components 文件夹，用来存放公共组件<br>新建 utils 文件夹，用来存放常用的工具类<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> src</span><br><span class="line"></span><br><span class="line">mkdir pages</span><br><span class="line"></span><br><span class="line">mkdir components</span><br><span class="line"></span><br><span class="line">mkdir utils</span><br></pre></td></tr></table></figure></p><p>在 <code>public</code> 目录下新建 <code>index.html</code> 文件<br>在 <code>src</code> 目录下新建 <code>index.js</code> 文件<br>在 <code>webpack</code> 目录下创建 <code>webpack.config.dev.js</code> 和 <code>webpack.config.prod.js</code></p><ul><li><code>webpack.config.dev.js</code> 用来编写 webpack 开发环境配置</li><li><code>webpack.config.prod.js</code> 用来编写 webpack 生产环境配置</li></ul><p>index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>React + Mobx 全家桶脚手架<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> ele = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    ele.innerHTML = <span class="string">'Hello, React'</span>;</span><br><span class="line">    <span class="keyword">const</span> root = <span class="built_in">document</span>.querySelector(<span class="string">'#root'</span>);</span><br><span class="line">    root.appendChild(ele);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">createElement();</span><br></pre></td></tr></table></figure></p><p><code>webpack.config.dev.js</code> 和 <code>webpack.config.prod.js</code> 此时还没有书写内容，我们之后会详细的进行讲述。</p><p>我们看一下此时的项目结构，之后就可以进行 webpack 的配置了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">react-mobx-starter</span><br><span class="line">  ├─ public/</span><br><span class="line">    └─ index.html</span><br><span class="line">  ├─ src/</span><br><span class="line">    ├─ components/</span><br><span class="line">    ├─ pages/</span><br><span class="line">    ├─ utils/</span><br><span class="line">    └─ index.js</span><br><span class="line">  ├─ webpack/</span><br><span class="line">    ├─ webpack.config.dev.js</span><br><span class="line">    └─webpack.config.prod.js</span><br><span class="line">  ├─ package.json</span><br></pre></td></tr></table></figure><hr><h2 id="三、React-开发环境配置"><a href="#三、React-开发环境配置" class="headerlink" title="三、React 开发环境配置"></a>三、React 开发环境配置</h2><p>在 package.json 文件中添加一个执行脚本，用来执行 webpack 命令：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...,</span><br><span class="line">    "scripts": &#123;</span><br><span class="line">        "start": "webpack --config webpack/webpack.config.dev.js"</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="安装-webpack-相关插件"><a href="#安装-webpack-相关插件" class="headerlink" title="安装 webpack 相关插件"></a>安装 webpack 相关插件</h3><p>安装 webpack 和 webpack-cli<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure></p><h3 id="入口和出口"><a href="#入口和出口" class="headerlink" title="入口和出口"></a>入口和出口</h3><p>使用 webpack 进行项目配置的时候，必须要有入口和出口，作为模块引入和项目输出。</p><p>webpack.config.dev.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appSrc = path.resolve(__dirname, <span class="string">'../src'</span>);</span><br><span class="line"><span class="keyword">const</span> appDist = path.resolve(__dirname, <span class="string">'../dist'</span>);</span><br><span class="line"><span class="keyword">const</span> appPublic = path.resolve(__dirname, <span class="string">'../public'</span>);</span><br><span class="line"><span class="keyword">const</span> appIndex = path.resolve(appSrc, <span class="string">'index.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: appIndex,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'public/js/[name].[hash:8].js'</span>,</span><br><span class="line">        path: dist,</span><br><span class="line">        publicPath: <span class="string">'/'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="添加-html-webpack-plugin-插件"><a href="#添加-html-webpack-plugin-插件" class="headerlink" title="添加 html-webpack-plugin 插件"></a>添加 html-webpack-plugin 插件</h3><p>执行 npm run start 脚本，可以看到 <code>dist/public/js</code> 目录下多了一个 <code>js</code> 文件，但是这个是由 <code>hash</code> 值命名的的，我们每次都手动引入到 index.html 文件里面过于麻烦，所以可以引入 <code>html-webpack-plugin</code> 插件。</p><p> html-webpack-plugin 插件有两个作用</p><ul><li>可以将 <code>public</code> 目录下的文件夹拷贝到 <code>dist</code> 输出文件夹下</li><li>可以自动将 <code>dist</code> 下的 <code>js</code> 文件引入到 <code>html</code> 文件中</li></ul><h4 id="安装-html-webpack-plugin-插件"><a href="#安装-html-webpack-plugin-插件" class="headerlink" title="安装 html-webpack-plugin 插件"></a>安装 <code>html-webpack-plugin</code> 插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><h4 id="使用-html-webpack-plugin-插件"><a href="#使用-html-webpack-plugin-插件" class="headerlink" title="使用 html-webpack-plugin 插件"></a>使用 <code>html-webpack-plugin</code> 插件</h4><p>webpack.config.dev.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">+ <span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> appSrc = path.resolve(__dirname, <span class="string">'../src'</span>);</span><br><span class="line"><span class="keyword">const</span> appDist = path.resolve(__dirname, <span class="string">'../dist'</span>);</span><br><span class="line"><span class="keyword">const</span> appPublic = path.resolve(__dirname, <span class="string">'../public'</span>);</span><br><span class="line"><span class="keyword">const</span> appIndex = path.resolve(appSrc, <span class="string">'index.js'</span>);</span><br><span class="line">+ <span class="keyword">const</span> appHtml = path.resolve(appPublic, <span class="string">'index.html'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: appIndex,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'public/js/[name].[hash:8].js'</span>,</span><br><span class="line">        path: appDist,</span><br><span class="line">        publicPath: <span class="string">'/'</span></span><br><span class="line">    &#125;,</span><br><span class="line">+    plugins: [</span><br><span class="line">+        <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">+            template: appHtml,</span><br><span class="line">+            filename: <span class="string">'index.html'</span></span><br><span class="line">+        &#125;)</span><br><span class="line">+    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="设置开发模式"><a href="#设置开发模式" class="headerlink" title="设置开发模式"></a>设置开发模式</h3><p>webpack 配置中的 mode 属性，可以设置为 ‘development’ 和 ‘production’，我们目前是进行开发环境配置，所以可以设置为 ‘development’</p><p>webpack.config.dev.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">+    mode: <span class="string">'development'</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="设置-devtool"><a href="#设置-devtool" class="headerlink" title="设置 devtool"></a>设置 devtool</h3><p>为了方便在项目出错时，迅速定位到错误位置，可以设置 devtool，生成资源映射，我们这里使用 <code>inline-source-map</code>，更多选择可以在<a href="https://juejin.im/post/5c51520cf265da61180215e5#heading-10" target="_blank" rel="noopener">这里</a>查看区别。</p><p>webpack.config.dev.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">+    devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用-webpack-dev-server-启动项目服务"><a href="#使用-webpack-dev-server-启动项目服务" class="headerlink" title="使用 webpack-dev-server 启动项目服务"></a>使用 webpack-dev-server 启动项目服务</h3><h4 id="安装-webpack-dev-server"><a href="#安装-webpack-dev-server" class="headerlink" title="安装 webpack-dev-server"></a>安装 webpack-dev-server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-dev-server --save-dev</span><br></pre></td></tr></table></figure><h4 id="配置-webpack-dev-server"><a href="#配置-webpack-dev-server" class="headerlink" title="配置 webpack-dev-server"></a>配置 webpack-dev-server</h4><p>webpack.config.dev.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">+    devServer: &#123;</span><br><span class="line">+        contentBase: appPublic,</span><br><span class="line">+        hot: <span class="literal">true</span>,</span><br><span class="line">+        host: <span class="string">'localhost'</span>,</span><br><span class="line">+        port: <span class="number">8000</span>,</span><br><span class="line">+        historyApiFallback: <span class="literal">true</span>,</span><br><span class="line">+        <span class="comment">// 是否将错误展示在浏览器蒙层</span></span><br><span class="line">+        overlay: <span class="literal">true</span>,</span><br><span class="line">+        inline: <span class="literal">true</span>,</span><br><span class="line">+        <span class="comment">// 打印信息</span></span><br><span class="line">+        stats: <span class="string">'errors-only'</span>,</span><br><span class="line">+        <span class="comment">// 设置代理</span></span><br><span class="line">+        proxy: &#123;</span><br><span class="line">+            <span class="string">'/api'</span>: &#123;</span><br><span class="line">+                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">+                target: <span class="string">'https://easy-mock.com/mock/5c2dc9665cfaa5209116fa40/example'</span>,</span><br><span class="line">+                pathRewrite: &#123;</span><br><span class="line">+                    <span class="string">'^/api/'</span>: <span class="string">'/'</span></span><br><span class="line">+                &#125;</span><br><span class="line">+            &#125;</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改一下 <code>package.json</code> 文件中的 <code>start</code> 脚本：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...,</span><br><span class="line">    "scripts": &#123;</span><br><span class="line">        "start": "webpack-dev-server --config webpack/webpack.config.dev.js"</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="使用-friendly-errors-webpack-plugin-插件"><a href="#使用-friendly-errors-webpack-plugin-插件" class="headerlink" title="使用 friendly-errors-webpack-plugin 插件"></a>使用 friendly-errors-webpack-plugin 插件</h3><p><code>friendly-errors-webpack-plugin</code> 插件可以在命令行展示更有好的提示功能。</p><p>安装 <code>friendly-errors-webpack-plugin</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install friendly-errors-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></p><p>使用 <code>friendly-errors-webpack-plugin</code>：</p><p>webpack.config.dev.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line">+ <span class="keyword">const</span> FriendlyErrorsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'friendly-errors-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">            template: appHtml,</span><br><span class="line">            filename: <span class="string">'index.html'</span></span><br><span class="line">        &#125;),</span><br><span class="line">+        <span class="keyword">new</span> FriendlyErrorsWebpackPlugin(),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="启用热加载"><a href="#启用热加载" class="headerlink" title="启用热加载"></a>启用热加载</h3><p>webpack.config.dev.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> FriendlyErrorsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'friendly-errors-webpack-plugin'</span>);</span><br><span class="line">+ <span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins: [</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">new</span> FriendlyErrorsWebpackPlugin(),</span><br><span class="line">+        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="运行项目，测试配置成果"><a href="#运行项目，测试配置成果" class="headerlink" title="运行项目，测试配置成果"></a>运行项目，测试配置成果</h4><p>执行 <code>npm run start</code> 命令，命令行提示成功后，在浏览器打开 <code>http://localhost:8000</code>，可以看到 <code>Hello React</code>，说明基本的Webpack 配置已经成功了。</p><h3 id="配置-babel"><a href="#配置-babel" class="headerlink" title="配置 babel"></a>配置 babel</h3><p>我们现在 <code>index.js</code> 里面的代码量比较少，所以没有问题。但是我如果想在里面使用一些 ES6 的语法或者是还未被标准定义的 JS 特性，那么我们就需要使用 babel 来进行转换了。下面我们来配置一下 <code>babel</code>。</p><h4 id="安装-babel-相关插件"><a href="#安装-babel-相关插件" class="headerlink" title="安装 babel 相关插件"></a>安装 babel 相关插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-core babel-loader@7 --save-dev</span><br></pre></td></tr></table></figure><h4 id="使用-babel-loader"><a href="#使用-babel-loader" class="headerlink" title="使用 babel-loader"></a>使用 babel-loader</h4><p>设置 cacheDirectory 属性，指定的目录将用来缓存 loader 的执行结果。之后的 webpack 构建，将会尝试读取缓存，来避免在每次执行时，可能产生的、高性能消耗的 Babel 重新编译过程。</p><p>webpack.config.dev.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins: [ ... ],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">                loader: <span class="string">'babel-loader?cacheDirectory'</span>,</span><br><span class="line">                include: [ appSrc ],</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="在项目根目录下新建-babelrc-文件"><a href="#在项目根目录下新建-babelrc-文件" class="headerlink" title="在项目根目录下新建 .babelrc 文件"></a>在项目根目录下新建 .babelrc 文件</h4><p><code>.babelrc</code> 文件是运行时控制文件，在项目编译的时候会自动读取 <code>.babelrc</code> 文件中的 <code>babel</code> 配置。</p><h4 id="使用-babel-相关-presets"><a href="#使用-babel-相关-presets" class="headerlink" title="使用 babel 相关 presets"></a>使用 babel 相关 presets</h4><p>安装相关插件：</p><ul><li><code>babel-preset-env</code>：可以在项目中使用所有 <code>ECMAScript</code> 标准里的最新特性。</li><li><code>babel-preset-stage0</code>：可以在项目中使用社区提出来的但还未被写入 <code>ECMAScript</code> 标准里的特性。</li><li><code>babel-preset-react</code>：可以在项目中使用 <code>react</code> 语法。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-preset-env babel-preset-stage-0 babel-preset-react --save-dev</span><br></pre></td></tr></table></figure><p>配置 <code>.babelrc</code> 文件：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        <span class="string">"env"</span>,</span><br><span class="line">        <span class="string">"stage-0"</span>,</span><br><span class="line">        <span class="string">"react"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="使用-babel-相关-plugins"><a href="#使用-babel-相关-plugins" class="headerlink" title="使用 babel 相关 plugins"></a>使用 babel 相关 plugins</h4><p>安装相关插件：</p><ul><li><code>babel-plugin-transform-decorators-legacy</code>：可以在项目中使用装饰器语法。</li><li><code>babel-plugin-transform-class-properties</code>：可以在项目中使用新的 class 属性语法。</li><li><code>babel-plugin-transform-runtime</code>：使用此插件可以直接使用 babel-runtime 中的代码对 <code>js</code> 文件进行转换，避免代码冗余。</li><li><code>babel-runtime</code>：配合 <code>babel-plugin-transform-runtime</code> 插件成对使用</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install  babel-plugin-transform-decorators-legacy babel-plugin-transform-class-properties babel-plugin-transform-runtime babel-runtime --save-dev</span><br></pre></td></tr></table></figure><p>配置 <code>.babelrc</code> 文件：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        <span class="string">"env"</span>,</span><br><span class="line">        <span class="string">"stage-0"</span>,</span><br><span class="line">        <span class="string">"react"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">        <span class="string">"transform-decorators-legacy"</span>,</span><br><span class="line">        <span class="string">"transform-runtime"</span>,</span><br><span class="line">        <span class="string">"transform-class-properties"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>这里需要注意 <code>transform-decorators-legacy</code> 插件的放置顺序，最好放在第一位，否则可能会出现某些注解失效的问题。</p></blockquote><p>至此，babel 相关的基本配置完成了。之后我们就可以在项目中肆意使用各种新的 JS 特性了。</p><h3 id="添加-css-相关-loader"><a href="#添加-css-相关-loader" class="headerlink" title="添加 css 相关 loader"></a>添加 css 相关 loader</h3><p><code>js</code> 文件相关的 <code>babel-loader</code> 配置好了，但是有时候我们想在项目中为元素添加一些样式，而 <code>webpack</code> 中认为一切都是模块，所以我们这时候也需要别的 <code>loader</code> 来解析一波样式代码了。</p><h4 id="安装相关插件："><a href="#安装相关插件：" class="headerlink" title="安装相关插件："></a>安装相关插件：</h4><ul><li><code>css-loader</code>：处理 <code>css</code> 文件中的 <code>url()</code> 等。</li><li><code>style-loader</code>：将 <code>css</code> 插入到页面的 <code>style</code> 标签。</li><li><code>less-loader</code>：是将 <code>less</code> 文件编译成 <code>css</code>。</li><li><code>postcss-loader</code>：可以集成很多插件，用来操作 <code>css</code>。我们这里使用它集成 <code>autoprefixer</code> 来自动添加前缀。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader style-loader less less-loader postcss-loader autoprefixer --save-dev</span><br></pre></td></tr></table></figure><h4 id="配置样式相关-loader"><a href="#配置样式相关-loader" class="headerlink" title="配置样式相关 loader"></a>配置样式相关 loader</h4><ul><li>由于 <code>React</code> 无法直接使用类似 <code>Vue</code> 中 <code>scope</code> 这种局部作用变量，所以我们可以使用 <code>webpack</code> 提供的 <code>CSS Module</code>。<br>2、由于等会儿会使用 <code>antd</code>，所以引入 <code>antd</code> 时需要开启 <code>less</code> 的 <code>javascript</code> 选项，所以要将 <code>less-loader</code> 中的属性 <code>javascriptEnabled</code> 设置为 <code>true</code>。</li></ul><p>在 webpack.config.dev.js 中配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> autoprefixer = <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...,</span><br><span class="line">    plugins: [...],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            ...,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                        loader: <span class="string">'style-loader'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            sourceMap: <span class="literal">true</span>,</span><br><span class="line">                            modules: <span class="literal">true</span>,</span><br><span class="line">                            localIdentName: <span class="string">'[local].[hash:8]'</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            plugins: <span class="function"><span class="params">()</span> =&gt;</span> [autoprefixer()]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'less-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            javascriptEnabled: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">                include: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                        loader: <span class="string">'style-loader'</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;&#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'postcss-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            plugins: <span class="function"><span class="params">()</span> =&gt;</span> [autoprefixer()]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'less-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            javascriptEnabled: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="添加其他模块解析-loader-配置"><a href="#添加其他模块解析-loader-配置" class="headerlink" title="添加其他模块解析 loader 配置"></a>添加其他模块解析 loader 配置</h3><p>安装相关插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install file-loader csv-loader xml-loader html-loader markdown-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>在 webpack.config.dev.js 中配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...,</span><br><span class="line">    plugins: [...],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            ...,</span><br><span class="line">            <span class="comment">// 解析图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'file-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析 字体</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'file-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析数据资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(csv|tsv)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'csv-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析数据资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.xml$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'xml-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析 MakeDown 文件</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.md$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'html-loader'</span>,</span><br><span class="line">                    <span class="string">'markdown-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="额外的-webpack-配置优化"><a href="#额外的-webpack-配置优化" class="headerlink" title="额外的 webpack 配置优化"></a>额外的 webpack 配置优化</h3><h4 id="添加-resolve-allias-属性，设置别名"><a href="#添加-resolve-allias-属性，设置别名" class="headerlink" title="添加 resolve allias 属性，设置别名"></a>添加 resolve allias 属性，设置别名</h4><p>在项目开发过程中，随着项目越来越大， 文件层级越来越深，引入文件的时候可能会需要一层一层的找路径，就会比较繁琐，我们可以使用 <code>resolve</code>  中的 <code>alias</code> 属性为一些常用的文件夹设置别名</p><p>webpack.config.dev.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">··· </span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...,</span><br><span class="line">    plugins: [...],</span><br><span class="line">    <span class="built_in">module</span>: &#123;...&#125;,</span><br><span class="line">+    resolve: &#123;</span><br><span class="line">+        alias: &#123;</span><br><span class="line">+            src: appSrc,</span><br><span class="line">+            utils: path.resolve(__dirname, <span class="string">'../src/utils'</span>),</span><br><span class="line">+            pages: path.resolve(__dirname, <span class="string">'../src/pages'</span>),</span><br><span class="line">+            components: path.resolve(__dirname, <span class="string">'../src/components'</span>)</span><br><span class="line">+        &#125;</span><br><span class="line">+    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="添加-resolve-modules-属性，指明第三方模块存放位置"><a href="#添加-resolve-modules-属性，指明第三方模块存放位置" class="headerlink" title="添加 resolve.modules 属性，指明第三方模块存放位置"></a>添加 resolve.modules 属性，指明第三方模块存放位置</h4><p>我们知道，一般进行模块搜索时，会从当前目录下的 <code>node_modules</code> 一直搜索到磁盘根目录下的 <code>node_modules</code>。所以为了减少搜索步骤，我们可以设置 <code>resolve.modules</code> 属性强制只从项目的 <code>node_modules</code> 中查找模块。</p><p>webpack.config.dev.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">··· </span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...,</span><br><span class="line">    plugins: [...],</span><br><span class="line">    <span class="built_in">module</span>: &#123;...&#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        ...,</span><br><span class="line">+        modules: [path.resolve(__dirname, <span class="string">'../node_modules'</span>)],</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="安装-React、MObx-以及-React-Router-相关插件"><a href="#安装-React、MObx-以及-React-Router-相关插件" class="headerlink" title="安装 React、MObx 以及 React Router 相关插件"></a>安装 React、MObx 以及 React Router 相关插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react react-dom prop-types mobx mobx-react react-router-dom --save</span><br></pre></td></tr></table></figure><h3 id="引入-antd"><a href="#引入-antd" class="headerlink" title="引入 antd"></a>引入 antd</h3><p>按照 <code>antd</code> 官网的说明，直接在 <code>.babelrc</code> 文件中添加配置，之后即可在项目中正常使用了。</p><p>安装 antd 相关插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install antd moment --save</span><br></pre></td></tr></table></figure></p><p>安装 babel-plugin-import 对组件进行按需加载：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install babel-plugin-import --save-dev</span><br></pre></td></tr></table></figure></p><p>在 .babelrc 文件中添加 antd 配置：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [</span><br><span class="line">        <span class="string">"env"</span>,</span><br><span class="line">        <span class="string">"stage-0"</span>,</span><br><span class="line">        <span class="string">"react"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">        <span class="string">"transform-decorators-legacy"</span>,</span><br><span class="line">+        [</span><br><span class="line">+            <span class="string">"import"</span>,</span><br><span class="line">+            &#123;</span><br><span class="line">+                "libraryName": "antd",</span><br><span class="line">+                "style": true</span><br><span class="line">+            &#125;</span><br><span class="line">+        ],</span><br><span class="line">        "transform-runtime",</span><br><span class="line">        <span class="string">"transform-class-properties"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="四、进行-React-开发"><a href="#四、进行-React-开发" class="headerlink" title="四、进行 React 开发"></a>四、进行 React 开发</h2><p>基本上需要的插件目前都已经引入了，是时候进行开发了。</p><h3 id="修改根目录下的-index-js-文件"><a href="#修改根目录下的-index-js-文件" class="headerlink" title="修改根目录下的 index.js 文件"></a>修改根目录下的 index.js 文件</h3><p>index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; LocaleProvider &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HashRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> zh_CN <span class="keyword">from</span> <span class="string">'antd/lib/locale-provider/zh_CN'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'moment/locale/zh-cn'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> GlobalModel <span class="keyword">from</span> <span class="string">'./GlobalModel'</span>;</span><br><span class="line"><span class="comment">// import App from './App';</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> globalModel = <span class="keyword">new</span> GlobalModel();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> App = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>开发环境配置完成<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDom.render(</span><br><span class="line">    &lt;Provider globalModel=&#123; globalModel &#125;&gt;</span><br><span class="line">        &lt;LocaleProvider locale=&#123;zh_CN&#125;&gt;</span><br><span class="line">            &lt;HashRouter&gt;</span><br><span class="line">                &lt;App /&gt;</span><br><span class="line">            &lt;<span class="regexp">/HashRouter&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>LocaleProvider&gt;</span><br><span class="line">    &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">    document.querySelector('#root')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure></p><p>运行 <code>npm run start</code> 命令，在浏览器打开 <code>http://localhost:8000/</code>，就能够看到 <em>开发环境配置完成</em> 正常显示。</p><p>此时说明我们各种插件、库都已经引入完成，可以正常使用了。</p><h3 id="使用-React-Route-进行页面间路由跳转"><a href="#使用-React-Route-进行页面间路由跳转" class="headerlink" title="使用 React Route 进行页面间路由跳转"></a>使用 React Route 进行页面间路由跳转</h3><h4 id="在-src-目录下新建-App-js-文件："><a href="#在-src-目录下新建-App-js-文件：" class="headerlink" title="在 src 目录下新建 App.js 文件："></a>在 src 目录下新建 App.js 文件：</h4><p>App.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Switch, Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'pages/home'</span>;</span><br><span class="line"><span class="keyword">import</span> Settings <span class="keyword">from</span> <span class="string">'pages/settings'</span>;</span><br><span class="line"><span class="keyword">import</span> Display <span class="keyword">from</span> <span class="string">'pages/display'</span>;</span><br><span class="line"><span class="keyword">import</span> NotFound <span class="keyword">from</span> <span class="string">'pages/exception'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./App.less'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (props) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=&#123; styles.app &#125;&gt;</span><br><span class="line">            &lt;Switch&gt;</span><br><span class="line">                &lt;Route path=<span class="string">'/settings'</span> component=&#123; Settings &#125; /&gt;</span><br><span class="line">                &lt;Route path=<span class="string">'/display'</span> component=&#123; Display &#125; /&gt;</span><br><span class="line">                &lt;Route exact path=<span class="string">'/'</span> component=&#123; Home &#125; /&gt;</span><br><span class="line">                &lt;Route component=&#123; NotFound &#125; /&gt;</span><br><span class="line">            &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 <code>src</code> 目录下创建 <code>App.less</code> 文件，编写 <code>App</code> 组件样式</p><p>App.less<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.app</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="在-pages-目录下编写-Home、Settings、Display、NotFound-组件"><a href="#在-pages-目录下编写-Home、Settings、Display、NotFound-组件" class="headerlink" title="在 pages 目录下编写 Home、Settings、Display、NotFound 组件"></a>在 pages 目录下编写 Home、Settings、Display、NotFound 组件</h4><ul><li><code>Home</code> 组件是根路由组件，用来跳转到 <code>Setting</code> 界面和 <code>Display</code> 界面</li><li><code>Settings</code> 组件演示了如何获取和修改 <code>mobx</code> 的全局 <code>Model</code></li><li><code>Display</code> 组件演示了如何使用 mobx 进行同步和异步的数据处理</li><li><code>NotFound</code> 组件在匹配不到正确路由时展示</li></ul><blockquote><p>Home、Settings、Display 相关的代码我就不贴了，占的篇幅较长，大家需要的话可以去我的 Github 上看一下或者下载下来也可以。比较方便。地址：<a href="https://github.com/beichensky/react-mobx-starter" target="_blank" rel="noopener">Github</a></p></blockquote><h4 id="再修改一下-index-js-文件"><a href="#再修改一下-index-js-文件" class="headerlink" title="再修改一下 index.js 文件"></a>再修改一下 index.js 文件</h4><p>index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDom <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span></span><br><span class="line"><span class="keyword">import</span> &#123; LocaleProvider &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HashRouter &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> zh_CN <span class="keyword">from</span> <span class="string">'antd/lib/locale-provider/zh_CN'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'moment/locale/zh-cn'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> GlobalModel <span class="keyword">from</span> <span class="string">'./GlobalModel'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> globalModel = <span class="keyword">new</span> GlobalModel();</span><br><span class="line"></span><br><span class="line">ReactDom.render(</span><br><span class="line">    &lt;Provider globalModel=&#123; globalModel &#125;&gt;</span><br><span class="line">        &lt;LocaleProvider locale=&#123;zh_CN&#125;&gt;</span><br><span class="line">            &lt;HashRouter&gt;</span><br><span class="line">                &lt;App /&gt;</span><br><span class="line">            &lt;<span class="regexp">/HashRouter&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>LocaleProvider&gt;</span><br><span class="line">    &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">    document.querySelector('#root')</span></span><br><span class="line"><span class="regexp">);</span></span><br></pre></td></tr></table></figure></p><p>可以看到这里有一个 <code>GlobalModel</code> 存放全局通用数据的 Model，里面的逻辑比较简单，我们稍微看一下。</p><p>GlobalModel.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalModel</span> </span>&#123;</span><br><span class="line">    @observable username = <span class="string">'小明'</span>;</span><br><span class="line"></span><br><span class="line">    @action</span><br><span class="line">    changeUserName = <span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.username = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="添加-fetch-工具类进行网络请求"><a href="#添加-fetch-工具类进行网络请求" class="headerlink" title="添加 fetch 工具类进行网络请求"></a>添加 fetch 工具类进行网络请求</h3><p>由于我们在 Display 组件中需要进行网络请求的异步操作，所以我们这里引入 fetch 进行网络请求。</p><h4 id="安装-fetch-相关插件："><a href="#安装-fetch-相关插件：" class="headerlink" title="安装 fetch 相关插件："></a>安装 fetch 相关插件：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install whatwg-fetch qs --save</span><br></pre></td></tr></table></figure><h4 id="编写网络请求工具类"><a href="#编写网络请求工具类" class="headerlink" title="编写网络请求工具类"></a>编写网络请求工具类</h4><p>在 <code>utils</code> 目录下创建 <code>request.js</code> 文件。</p><p>utils/request.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'whatwg-fetch'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; stringify &#125; <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 Get 方式进行网络请求</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; url </span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; data </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> get = <span class="function">(<span class="params">url, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> newUrl = url + <span class="string">'?'</span> + stringify(data) + (stringify(data) === <span class="string">''</span> ? <span class="string">''</span> : <span class="string">'&amp;'</span>) +<span class="string">'_random='</span> + <span class="built_in">Date</span>.now();</span><br><span class="line">    <span class="keyword">return</span> fetch(newUrl, &#123;</span><br><span class="line">            cache: <span class="string">'no-cache'</span>,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">                <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            method: <span class="string">'GET'</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 进行 Post 方式进行网络请求</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; url </span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; data </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> post = <span class="function">(<span class="params">url, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fetch(url, &#123;</span><br><span class="line">        body: <span class="built_in">JSON</span>.stringify(data), </span><br><span class="line">        cache: <span class="string">'no-cache'</span>,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">'Accept'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">            <span class="string">'Content-Type'</span>: <span class="string">'application/json; charset=utf-8'</span></span><br><span class="line">        &#125;,</span><br><span class="line">        method: <span class="string">'POST'</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">response</span> =&gt;</span> response.json()) <span class="comment">// parses response to JSON</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="至此，简单的-React-框架搭建完成了"><a href="#至此，简单的-React-框架搭建完成了" class="headerlink" title="至此，简单的 React 框架搭建完成了"></a>至此，简单的 React 框架搭建完成了</h3><p>执行 <code>npm run start</code>，编译成功后，可以看到界面长这样。</p><p>Home 界面：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-mobx-starter/Home.png" alt="Home 界面" title="">                </div>                <div class="image-caption">Home 界面</div>            </figure></p><p>Settings 界面：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-mobx-starter/Settings.png" alt="Settings 界面" title="">                </div>                <div class="image-caption">Settings 界面</div>            </figure></p><p>Display 界面：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-mobx-starter/Display.png" alt="Display 界面" title="">                </div>                <div class="image-caption">Display 界面</div>            </figure></p><p>NotFound 界面：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-mobx-starter/NotFound.png" alt="NotFound 界面" title="">                </div>                <div class="image-caption">NotFound 界面</div>            </figure></p><hr><h2 id="五、进行-React-项目打包配置"><a href="#五、进行-React-项目打包配置" class="headerlink" title="五、进行 React 项目打包配置"></a>五、进行 React 项目打包配置</h2><h3 id="先在-package-json-文件中新增一个执行脚本："><a href="#先在-package-json-文件中新增一个执行脚本：" class="headerlink" title="先在 package.json 文件中新增一个执行脚本："></a>先在 package.json 文件中新增一个执行脚本：</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...,</span><br><span class="line">    "scripts": &#123;</span><br><span class="line">        "start": "webpack-dev-server --config webpack/webpack.config.dev.js",</span><br><span class="line">        "build": "webpack --config webpack/webpack.config.prod.js"</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="配置-webpack-config-prod-js-文件"><a href="#配置-webpack-config-prod-js-文件" class="headerlink" title="配置 webpack.config.prod.js 文件"></a>配置 webpack.config.prod.js 文件</h3><p>其中大部分的 <code>module</code> 和 <code>plugin</code> 还有 <code>resolve</code> 都与开发环境的一致。所以我们就以 <code>webpack.config.dev.js</code> 文件中的配置为基础进行说明。</p><ul><li>将 mode 属性值修改为：’production’</li><li>将 devtool 属性值修改为：’hidden-source-map’</li><li>删除 devServer 属性所有的配置。</li><li>删除使用的热加载插件：·webpack.HotModuleReplacementPlugin`,</li></ul><h4 id="添加-optimization-属性进行代码压缩"><a href="#添加-optimization-属性进行代码压缩" class="headerlink" title="添加 optimization 属性进行代码压缩"></a>添加 optimization 属性进行代码压缩</h4><p>安装相关插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install uglifyjs-webpack-plugin optimize-css-assets-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></p><p>添加代码压缩配置：</p><p>webpack.config.prod.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">...;</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">"optimize-css-assets-webpack-plugin"</span>);</span><br><span class="line">...;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    devtool: <span class="string">'hidden-source-map'</span>,</span><br><span class="line">    entry: ...,</span><br><span class="line">    output: &#123;...&#125;,</span><br><span class="line">    plugins: [...],</span><br><span class="line">    <span class="built_in">module</span>: &#123;...&#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        <span class="comment">// 打包压缩js/css文件</span></span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">                uglifyOptions: &#123;</span><br><span class="line">                    compress: &#123;</span><br><span class="line">                        <span class="comment">// 在UglifyJs删除没有用到的代码时不输出警告</span></span><br><span class="line">                        warnings: <span class="literal">false</span>,</span><br><span class="line">                        <span class="comment">// 删除所有的 `console` 语句，可以兼容ie浏览器</span></span><br><span class="line">                        drop_console: <span class="literal">true</span>,</span><br><span class="line">                        <span class="comment">// 内嵌定义了但是只用到一次的变量</span></span><br><span class="line">                        collapse_vars: <span class="literal">true</span>,</span><br><span class="line">                        <span class="comment">// 提取出出现多次但是没有定义成变量去引用的静态值</span></span><br><span class="line">                        reduce_vars: <span class="literal">true</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    output: &#123;</span><br><span class="line">                        <span class="comment">// 最紧凑的输出</span></span><br><span class="line">                        beautify: <span class="literal">false</span>,</span><br><span class="line">                        <span class="comment">// 删除所有的注释</span></span><br><span class="line">                        comments: <span class="literal">false</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;&#125;)</span><br><span class="line">        ],</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            cacheGroups: &#123;</span><br><span class="line">                styles: &#123;</span><br><span class="line">                    name: <span class="string">'styles'</span>,</span><br><span class="line">                    test: <span class="regexp">/\.(css|less)/</span>,</span><br><span class="line">                    chunks: <span class="string">'all'</span>,</span><br><span class="line">                    enforce: <span class="literal">true</span>,</span><br><span class="line">                    reuseExistingChunk: <span class="literal">true</span> <span class="comment">// 表示是否使用已有的 chunk，如果为 true 则表示如果当前的 chunk 包含的模块已经被抽取出去了，那么将不会重新生成新的。</span></span><br><span class="line">                &#125;,</span><br><span class="line">                commons: &#123;</span><br><span class="line">                    name: <span class="string">'commons'</span>,</span><br><span class="line">                    chunks: <span class="string">'initial'</span>,</span><br><span class="line">                    minChunks: <span class="number">2</span>,</span><br><span class="line">                    reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                vendors: &#123;</span><br><span class="line">                    name: <span class="string">'vendors'</span>,</span><br><span class="line">                    test: <span class="regexp">/[\\/]node_modules[\\/]/</span>,</span><br><span class="line">                    priority: <span class="number">-10</span>,</span><br><span class="line">                    reuseExistingChunk: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        runtimeChunk: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="使用-mini-css-extract-plugin-插件提取-CSS-代码"><a href="#使用-mini-css-extract-plugin-插件提取-CSS-代码" class="headerlink" title="使用 mini-css-extract-plugin 插件提取 CSS 代码"></a>使用 mini-css-extract-plugin 插件提取 CSS 代码</h4><p>安装相关插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mini-css-extract-plugin --save-dev</span><br></pre></td></tr></table></figure></p><p>配置 <code>mini-css-extract-plugin</code> 插件：</p><ul><li>在 <code>plugins</code> 属性中引入</li><li>将 <code>module</code> 的 <code>rules</code> 中使用的 <code>style-loader</code> 替换为 <code>MiniCssExtractPlugin.loader</code></li></ul><p>webpack.config.prod.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...,</span><br><span class="line">    plugins: [</span><br><span class="line">        ...,</span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'public/styles/[name].[contenthash:8].css'</span>,</span><br><span class="line">            chunkFilename: <span class="string">'public/styles/[name].[contenthash:8].chunk.css'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    modules: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            ...,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">-                        loader: <span class="string">'style-loader'</span></span><br><span class="line">+                        loader: MiniCssExtractPlugin.loader</span><br><span class="line">                    &#125;,</span><br><span class="line">                    ...</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">-                        loader: <span class="string">'style-loader'</span></span><br><span class="line">+                        loader: MiniCssExtractPlugin.loader</span><br><span class="line">                    &#125;,</span><br><span class="line">                    ...</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            ...</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="使用-DefinePlugin-插件定义当前为生产环境"><a href="#使用-DefinePlugin-插件定义当前为生产环境" class="headerlink" title="使用 DefinePlugin 插件定义当前为生产环境"></a>使用 DefinePlugin 插件定义当前为生产环境</h4><p>webpack.config.prod.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...,</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        ...,</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="comment">// 定义 NODE_ENV 环境变量为 production</span></span><br><span class="line">            <span class="string">'process.env'</span>: &#123;</span><br><span class="line">                NODE_ENV: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="使用-clean-webpack-plugin-清理-dist-目录"><a href="#使用-clean-webpack-plugin-清理-dist-目录" class="headerlink" title="使用 clean-webpack-plugin 清理 dist 目录"></a>使用 clean-webpack-plugin 清理 dist 目录</h4><p>打包的过程中，由于部分文件名使用的是 hash 值，会导致每次文件不同，因而在 dist 中生成一些多余的文件。所以我们可以在每次打包之前清理一下 dist 目录。</p><p>安装插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install clean-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></p><p>使用插件：</p><p>webpack.config.prod.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...,</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...,</span><br><span class="line">    plugins: [</span><br><span class="line">        ...,</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin()</span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="添加其他优化配置"><a href="#添加其他优化配置" class="headerlink" title="添加其他优化配置"></a>添加其他优化配置</h4><ul><li>添加 stats 配置过滤打包时出现的一些统计信息。</li><li>添加 performance 配置关闭性能提示</li></ul><p>webpack.config.prod.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...,</span><br><span class="line">    stats: &#123;</span><br><span class="line">        modules: <span class="literal">false</span>,</span><br><span class="line">        children: <span class="literal">false</span>,</span><br><span class="line">        chunks: <span class="literal">false</span>,</span><br><span class="line">        chunkModules: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    performance: &#123;</span><br><span class="line">        hints: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="进行项目的打包发布"><a href="#进行项目的打包发布" class="headerlink" title="进行项目的打包发布"></a>进行项目的打包发布</h3><h4 id="打包项目"><a href="#打包项目" class="headerlink" title="打包项目"></a>打包项目</h4><p>运行 <code>npm run build</code> 指令，控制台打包完成之后，根目录下多出了 <code>dist</code> 文件夹。</p><h4 id="使用-Nginx-发布项目"><a href="#使用-Nginx-发布项目" class="headerlink" title="使用 Nginx 发布项目"></a>使用 Nginx 发布项目</h4><p>我这里是用的是 <code>Nginx</code> 作为服务器，发布在本地。</p><p><code>Nginx</code> 下载地址：<a href="http://nginx.org/en/download.html" target="_blank" rel="noopener">http://nginx.org/en/download.html</a>。</p><p>下载完成之后，解压完成。打开 <code>Nginx</code> 目录，可以找到一个 <code>conf</code> 文件夹，找到其中的 <code>nginx.conf</code> 文件，修改器中的配置：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-mobx-starter/nginxConf" alt="Nginx 配置" title="">                </div>                <div class="image-caption">Nginx 配置</div>            </figure><blockquote><p>将图中标注的 <code>html</code> 更换为 <code>dist</code>。</p></blockquote><p>然后我们就可以放心的将打包生成的 <code>dist</code> 文件夹直接放到 <code>Nginx</code> 的安装目录下了。（此时 <code>dist</code> 目录与刚才的 <code>conf</code> 目录应该是同级的）。</p><p>启动 <code>Nginx</code> 服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start nginx</span><br></pre></td></tr></table></figure></p><blockquote><p>打开浏览器，输入 <code>http://127.0.0.1</code> 或者 <code>http://localhost</code> 即可看到我们的项目已经正常的跑起来了。</p></blockquote><p>Nginx 其他命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 停止 Nginx 服务</span></span><br><span class="line">nginx -s stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启 Nginx 服务</span></span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出 nginx</span></span><br><span class="line">nginx -s quit</span><br></pre></td></tr></table></figure></p><p>更多 Ngnix 相关请参考：<a href="http://nginx.org/en/" target="_blank" rel="noopener">Nginx官方文档</a></p><blockquote><p><strong>注意：需要在 Nginx 安装目下执行 nginx 相关命令！</strong></p></blockquote><hr><h2 id="六、使用-webpack-merge-引入webpack-公共配置"><a href="#六、使用-webpack-merge-引入webpack-公共配置" class="headerlink" title="六、使用 webpack-merge 引入webpack 公共配置"></a>六、使用 webpack-merge 引入webpack 公共配置</h2><p>观察 <code>webpack.config.dev.js</code> 和 <code>webpack.config.prod.js</code> 文件，可以发现有大量的代码和配置出现了重复。所以我们可以编写一个 <code>webpack.common.js</code> 文件，将共有的配置放入其中，然后使用 <code>webpack-merge</code> 插件分别引入到 <code>webpack.config.dev.js</code> 和 <code>webpack.config.prod.js</code> 文件中使用。</p><p>插件安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack-merge --save-dev</span><br></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="keyword">const</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>);</span><br><span class="line">+ <span class="keyword">const</span> common = <span class="built_in">require</span>(<span class="string">'./webpack.common.js'</span>);</span><br><span class="line"></span><br><span class="line">+ <span class="built_in">module</span>.exports = merge(common, &#123;</span><br><span class="line">+   mode: <span class="string">'production'</span>,</span><br><span class="line">+   ...</span><br><span class="line">+ &#125;);</span><br></pre></td></tr></table></figure></p><p>这里就展示了一下用法，由于篇幅太长，三个文件中具体的配置代码我就不贴了，<br>大家可以到 <a href="https://github.com/beichensky/react-mobx-starter" target="_blank" rel="noopener">我的 GitHub</a> 上查看一下使用 <code>webpack-merge</code> 后的配置文件。</p><hr><h2 id="七、本文源码地址"><a href="#七、本文源码地址" class="headerlink" title="七、本文源码地址"></a>七、本文源码地址</h2><p><strong><a href="https://github.com/beichensky/react-mobx-starter" target="_blank" rel="noopener">react-mobx-starter</a></strong></p><p><strong>欢迎Star，谢谢各位！</strong></p><p><strong>文章及代码中如有问题，欢迎指正，谢谢！</strong></p><hr><h2 id="八、参考文档："><a href="#八、参考文档：" class="headerlink" title="八、参考文档："></a>八、参考文档：</h2><p><a href="https://juejin.im/post/58ff0de18d6d810058a69a26" target="_blank" rel="noopener">如何在react项目中配置ESlint</a></p><p><a href="https://webpack.js.org/" target="_blank" rel="noopener">webpack 官网</a></p><p><a href="https://juejin.im/post/5c51520cf265da61180215e5" target="_blank" rel="noopener">从零开始搭建一个 Webpack 开发环境配置（附 Demo）</a></p><p><a href="https://juejin.im/post/5c51520cf265da61180215e5" target="_blank" rel="noopener">使用 Webpack 进行生产环境配置（附 Demo）</a></p><!-- ### 使用 elint 进行代码校验#### 安装 eslint 相关插件<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint babel-eslint eslint-config-airbnb eslint-loader eslint-plugin-react eslint-plugin-import eslint-plugin-jsx-a11y --save-dev</span><br></pre></td></tr></table></figure><h4 id="配置-elint-loader"><a href="#配置-elint-loader" class="headerlink" title="配置 elint-loader"></a>配置 elint-loader</h4><p>在 webpack.config.dev.js 中添加配置：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins: [ ... ],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            <span class="comment">// 为 js 文件添加 eslint</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(js|jsx)$/</span>,</span><br><span class="line">                enforce: <span class="string">'pre'</span>,</span><br><span class="line">                use: [&#123;</span><br><span class="line">                    loader: <span class="built_in">require</span>.resolve(<span class="string">'eslint-loader'</span>),</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        eslintPath: <span class="built_in">require</span>.resolve(<span class="string">'eslint'</span>),</span><br><span class="line">                        emitWarning: <span class="literal">false</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;],</span><br><span class="line">                exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">                include: [ appSrc ]</span><br><span class="line">            &#125;,</span><br><span class="line">            ...</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="新建-eslintrc-文件添加-eslint-配置"><a href="#新建-eslintrc-文件添加-eslint-配置" class="headerlink" title="新建 .eslintrc 文件添加 eslint 配置"></a>新建 .eslintrc 文件添加 eslint 配置</h4><p>.elintrc<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"parser"</span>: <span class="string">"babel-eslint"</span>,</span><br><span class="line">    <span class="attr">"extends"</span>: <span class="string">"airbnb"</span>,</span><br><span class="line">    <span class="attr">"rules"</span>: &#123;</span><br><span class="line">        <span class="attr">"global-require"</span>: [<span class="number">1</span>],</span><br><span class="line">        <span class="attr">"jsx-a11y/no-static-element-interactions"</span>: [<span class="number">0</span>],</span><br><span class="line">        <span class="attr">"no-else-return"</span>: [<span class="number">0</span>],</span><br><span class="line">        <span class="attr">"lines-between-class-members"</span>: <span class="string">"off"</span>,</span><br><span class="line">        <span class="attr">"no-restricted-syntax"</span>: [<span class="number">0</span>],</span><br><span class="line">        <span class="attr">"react/jsx-no-bind"</span>: [<span class="number">0</span>],</span><br><span class="line">        <span class="attr">"react/prop-types"</span>: [<span class="number">2</span>],</span><br><span class="line">        <span class="attr">"react/sort-comp"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"import/no-dynamic-require"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"no-debugger"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"indent"</span>: [<span class="number">0</span>, <span class="number">4</span>],</span><br><span class="line">        <span class="attr">"linebreak-style"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"comma-dangle"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</span><br><span class="line">        <span class="attr">"react/jsx-equals-spacing"</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"parserOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"ecmaFeatures"</span>: &#123;</span><br><span class="line">            <span class="attr">"experimentalObjectRestSpread"</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"env"</span>: &#123;</span><br><span class="line">        <span class="attr">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"node"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 rules 属性中可以自行进行规则的新增和修改。更多 ESLint 规则请查看：<a href="https://cn.eslint.org/docs/rules/">ESLint Rules</a>。<br>–&gt;</p>-->]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文详细介绍了如何从零开始搭建一个 React 开发的脚手架，包含如何添加 Redux 以及 React Router 的环境。&lt;/p&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://beichensky.github.io/tags/React/"/>
    
      <category term="Webpack" scheme="https://beichensky.github.io/tags/Webpack/"/>
    
      <category term="前端开发" scheme="https://beichensky.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>React Hooks 使用详解</title>
    <link href="https://beichensky.github.io/20190408/react-hooks/"/>
    <id>https://beichensky.github.io/20190408/react-hooks/</id>
    <published>2019-04-08T02:07:43.000Z</published>
    <updated>2019-08-03T09:27:33.913Z</updated>
    
    <content type="html"><![CDATA[<p>本文对 16.8 版本之后 React 发布的新特性 Hooks 进行了详细讲解，并对一些常用的 Hooks 进行代码演示，希望可以对需要的朋友提供点帮助。</p><a id="more"></a><h2 id="一、Hooks-简介"><a href="#一、Hooks-简介" class="headerlink" title="一、Hooks 简介"></a>一、Hooks 简介</h2><p><code>Hooks</code> 是 <code>React v16.7.0-alpha</code> 中加入的新特性。它可以让你在 <code>class</code> 以外使用 <code>state</code> 和其他 <code>React</code> 特性。<br>本文就是演示各种 Hooks API 的使用方式，对于内部的原理这里就不做详细说明。</p><hr><h2 id="二、Hooks-初体验"><a href="#二、Hooks-初体验" class="headerlink" title="二、Hooks 初体验"></a>二、Hooks 初体验</h2><p>Example.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState  &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 声明一个名为“count”的新状态变量</span></span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">                Click me</span></span><br><span class="line"><span class="regexp">            &lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Example;</span></span><br></pre></td></tr></table></figure><p><code>useState</code> 就是一个 <code>Hook</code>，可以在我们不使用 <code>class</code> 组件的情况下，拥有自身的 <code>state</code>，并且可以通过修改 <code>state</code> 来控制 UI 的展示。</p><hr><h2 id="三、常用的两个-Hooks"><a href="#三、常用的两个-Hooks" class="headerlink" title="三、常用的两个 Hooks"></a>三、常用的两个 Hooks</h2><h3 id="1、useState"><a href="#1、useState" class="headerlink" title="1、useState"></a>1、useState</h3><h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><blockquote><p>const [state, setState] = useState(initialState)</p></blockquote><ul><li>传入唯一的参数: <code>initialState</code>，可以是数字，字符串等，也可以是对象或者数组。</li><li>返回的是包含两个元素的数组：第一个元素，<code>state</code> 变量，<code>setState</code> 修改 state值的方法。</li></ul><h4 id="与在类中使用-setState-的异同点："><a href="#与在类中使用-setState-的异同点：" class="headerlink" title="与在类中使用 setState 的异同点："></a>与在类中使用 <code>setState</code> 的异同点：</h4><ul><li>相同点：也是异步的，例如在 <code>onClick</code> 事件中，调用两次 <code>setState</code>，数据只改变一次。</li><li>不同点：类中的 <code>setState</code> 是合并，而函数组件中的 <code>setState</code> 是替换。</li></ul><h4 id="使用对比"><a href="#使用对比" class="headerlink" title="使用对比"></a>使用对比</h4><p>之前想要使用组件内部的状态，必须使用 class 组件，例如：</p><p>Example.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            count: <span class="number">0</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">            &lt;p&gt;You clicked &#123;<span class="keyword">this</span>.state.count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;() =&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span></span><br><span class="line"><span class="regexp">                Click me</span></span><br><span class="line"><span class="regexp">            &lt;/</span>button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>而现在，我们使用函数式组件也可以实现一样的功能了。也就意味着函数式组件内部也可以使用 state 了。</p><p>Example.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 声明一个名为“count”的新状态变量</span></span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">                Click me</span></span><br><span class="line"><span class="regexp">            &lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Example;</span></span><br></pre></td></tr></table></figure></p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>创建初始状态是比较昂贵的，所以我们可以在使用 <code>useState</code> API 时，传入一个函数，就可以避免重新创建忽略的初始状态。</p><p>普通的方式：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 直接传入一个值，在每次 render 时都会执行 createRows 函数获取返回值</span></span><br><span class="line"><span class="keyword">const</span> [rows, setRows] = useState(createRows(props.count));</span><br></pre></td></tr></table></figure></p><p>优化后的方式（推荐）：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createRows 只会被执行一次</span></span><br><span class="line"><span class="keyword">const</span> [rows, setRows] = useState(<span class="function"><span class="params">()</span> =&gt;</span> createRows(props.count));</span><br></pre></td></tr></table></figure></p><h3 id="2、useEffect"><a href="#2、useEffect" class="headerlink" title="2、useEffect"></a>2、useEffect</h3><p>之前很多具有副作用的操作，例如网络请求，修改 UI 等，一般都是在 <code>class</code> 组件的 <code>componentDidMount</code> 或者 <code>componentDidUpdate</code> 等生命周期中进行操作。而在函数组件中是没有这些生命周期的概念的，只能 <code>return</code> 想要渲染的元素。<br>但是现在，在函数组件中也有执行副作用操作的地方了，就是使用 <code>useEffect</code> 函数。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h4><blockquote><p>useEffect(() =&gt; { doSomething });</p></blockquote><p>两个参数：</p><ul><li><p>第一个是一个函数，是在第一次渲染以及之后更新渲染之后会进行的副作用。</p><ul><li>这个函数可能会有返回值，倘若有返回值，返回值也必须是一个函数，会在组件被销毁时执行。</li></ul></li><li><p>第二个参数是可选的，是一个数组，数组中存放的是第一个函数中使用的某些副作用属性。用来优化 useEffect</p><ul><li>如果使用此优化，请确保该数组包含外部作用域中随时间变化且 effect 使用的任何值。 否则，您的代码将引用先前渲染中的旧值。</li><li>如果要运行 effect 并仅将其清理一次（在装载和卸载时），则可以将空数组（[]）作为第二个参数传递。 这告诉React你的 effect 不依赖于来自 props 或 state 的任何值，所以它永远不需要重新运行。</li></ul></li></ul><blockquote><p>虽然传递 [] 更接近熟悉的 <code>componentDidMount</code> 和 <code>componentWillUnmount</code> 执行规则，但我们建议不要将它作为一种习惯，因为它经常会导致错误。</p></blockquote><h4 id="使用对比-1"><a href="#使用对比-1" class="headerlink" title="使用对比"></a>使用对比</h4><p>假如此时我们有一个需求，让 document 的 title 与 Example 中的 count 次数保持一致。</p><p>使用 class 组件：</p><p>Example.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Example</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            count: <span class="number">0</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123; <span class="keyword">this</span>.state.count &#125;</span> times`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidUpdate() &#123;</span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123; <span class="keyword">this</span>.state.count &#125;</span> times`</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">            &lt;p&gt;You clicked &#123;<span class="keyword">this</span>.state.count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;() =&gt; this.setState(&#123; count: this.state.count + 1 &#125;)&#125;&gt;</span></span><br><span class="line"><span class="regexp">                Click me</span></span><br><span class="line"><span class="regexp">            &lt;/</span>button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>而现在在函数组件中也可以进行副作用操作了。</p><p>Example.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 声明一个名为“count”的新状态变量</span></span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类似于 componentDidMount 和 componentDidUpdate:</span></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 使用浏览器API更新文档标题</span></span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">                Click me</span></span><br><span class="line"><span class="regexp">            &lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Example;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>不仅如此，我们可以使用 useEffect 执行多个副作用（可以使用一个 useEffect 执行多个副作用，也可以分开执行）</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用浏览器API更新文档标题</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'鼠标点击'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 给 window 绑定点击事件</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, handleClick);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>现在看来功能差不多了。但是在使用类组件时，我们一般会在 <code>componentWillMount</code> 生命周期中进行移除注册的事件等操作。那么在函数组件中又该如何操作呢？</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用浏览器API更新文档标题</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'鼠标点击'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 给 window 绑定点击事件</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, handleClick);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 给 window 移除点击事件</span></span><br><span class="line">        <span class="built_in">window</span>.addEventListener(<span class="string">'click'</span>, handleClick);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以看到，我们传入的第一个参数，可以 return 一个函数出去，<strong>在组件被销毁时，会自动执行这个函数</strong>。</p><h4 id="优化-useEffect"><a href="#优化-useEffect" class="headerlink" title="优化 useEffect"></a>优化 useEffect</h4><p>上面我们一直使用的都是 <code>useEffect</code> 中的第一个参数，传入了一个函数。那么 <code>useEffect</code> 的第二个参数呢？</p><p><code>useEffect</code> 的第二个参数是一个数组，里面放入在 useEffect 使用到的 state 值，可以用作优化，只有当数组中 state 值发生变化时，才会执行这个 <code>useEffect</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 使用浏览器API更新文档标题</span></span><br><span class="line">    <span class="built_in">document</span>.title = <span class="string">`You clicked <span class="subst">$&#123;count&#125;</span> times`</span>;</span><br><span class="line">&#125;, [ count ]);</span><br></pre></td></tr></table></figure><blockquote><p>Tip：如果想模拟 class 组件的行为，只在 componetDidMount 时执行副作用，在 componentDidUpdate 时不执行，那么 <code>useEffect</code> 的第二个参数传一个 [] 即可。（但是不建议这么做，可能会由于疏漏出现错误） </p></blockquote><hr><h2 id="四、其他-Hoos-API"><a href="#四、其他-Hoos-API" class="headerlink" title="四、其他 Hoos API"></a>四、其他 Hoos API</h2><h3 id="1、useContext"><a href="#1、useContext" class="headerlink" title="1、useContext"></a>1、useContext</h3><h4 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h4><blockquote><p><code>const value = useContext(MyContext);</code></p></blockquote><p>接受上下文对象（从中React.createContext返回的值）并返回该上下文的当前上下文值。当前上下文值由树中调用组件上方value最近的prop 确定&lt;MyContext.Provider&gt;。</p><p><code>useContext(MyContext)</code> 则相当于 <code>static contextType = MyContext</code> 在类中，或者 <code>&lt;MyContext.Consumer&gt;</code>。</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><p>在 <code>App.js</code> 文件中创建一个 <code>context</code>，并将 <code>context</code> 传递给 <code>Example</code> 子组件</p><p>App.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; createContext &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> Example <span class="keyword">from</span> <span class="string">'./Example'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ThemeContext = createContext(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;ThemeContext.Provider value=<span class="string">"light"</span>&gt;</span><br><span class="line">            &lt;Example /&gt;</span><br><span class="line">        &lt;<span class="regexp">/ThemeContext.Provider&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>在 <code>Example</code> 组件中，使用 <code>useContext</code> API 可以获取到传入的 <code>context</code> 值</p><p>Example.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useContext &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; ThemeContext &#125; <span class="keyword">from</span> <span class="string">'./App'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> context = useContext(ThemeContext);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;Example 组件：当前 theme 是：&#123; context &#125;&lt;<span class="regexp">/div&gt;   </span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><p>useContext必须是上下文对象本身的参数：</p><ul><li>正确： useContext(MyContext)</li><li>不正确： useContext(MyContext.Consumer)</li><li>不正确： useContext(MyContext.Provider)</li></ul><blockquote><p>useContext(MyContext)只允许您阅读上下文并订阅其更改。您仍然需要&lt;MyContext.Provider&gt;在树中使用以上内容来为此上下文提供值。</p></blockquote><h3 id="2、useReducer"><a href="#2、useReducer" class="headerlink" title="2、useReducer"></a>2、useReducer</h3><h4 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h4><blockquote><p><code>const [state, dispatch] = useReducer(reducer, initialArg, init);</code></p></blockquote><p><code>useState</code> 的替代方案。 接受类型为 <code>(state, action) =&gt; newState 的reducer</code>，并返回与 <code>dispatch</code> 方法配对的当前状态。</p><blockquote><p>当你涉及多个子值的复杂 <code>state</code>(状态) 逻辑时，<code>useReducer</code> 通常优于 <code>useState</code> 。</p></blockquote><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><p>Example.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'increment'</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'decrement'</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.count - <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 useReducer 函数创建状态 state 以及更新状态的 dispatch 函数</span></span><br><span class="line">    <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            Count: &#123;state.count&#125;</span><br><span class="line">            &lt;br /&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; dispatch(&#123;<span class="attr">type</span>: <span class="string">'increment'</span>&#125;)&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">            &lt;button onClick=&#123;() =&gt; dispatch(&#123;<span class="attr">type</span>: <span class="string">'decrement'</span>&#125;)&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="优化：延迟初始化"><a href="#优化：延迟初始化" class="headerlink" title="优化：延迟初始化"></a>优化：延迟初始化</h4><p>还可以懒惰地创建初始状态。为此，您可以将init函数作为第三个参数传递。初始状态将设置为 <code>init(initialArg)</code>。</p><p>它允许您提取用于计算 <code>reducer</code> 外部的初始状态的逻辑。这对于稍后重置状态以响应操作也很方便：</p><p>Example.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params">initialCount</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="attr">count</span>: initialCount&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'increment'</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'decrement'</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.count - <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'reset'</span>:</span><br><span class="line">            <span class="keyword">return</span> init(action.payload);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123;initialCount = <span class="number">0</span>&#125;) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialCount, init);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            Count: &#123;state.count&#125;</span><br><span class="line">            &lt;br /&gt;</span><br><span class="line">            &lt;button</span><br><span class="line">                onClick=&#123;() =&gt; dispatch(&#123;<span class="attr">type</span>: <span class="string">'reset'</span>, <span class="attr">payload</span>: initialCount&#125;)&#125;&gt;</span><br><span class="line">                Reset</span><br><span class="line">            &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;() =&gt; dispatch(&#123;type: 'increment'&#125;)&#125;&gt;+&lt;/</span>button&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; dispatch(&#123;<span class="attr">type</span>: <span class="string">'decrement'</span>&#125;)&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><h4 id="与-useState-的区别"><a href="#与-useState-的区别" class="headerlink" title="与 useState 的区别"></a>与 useState 的区别</h4><ul><li>当 <code>state</code> 状态值结构比较复杂时，使用 <code>useReducer</code> 更有优势。</li><li><strong>使用 <code>useState</code> 获取的 <code>setState</code> 方法更新数据时是异步的；而使用 <code>useReducer</code> 获取的 <code>dispatch</code> 方法更新数据是同步的。</strong></li></ul><p>针对第二点区别，我们可以演示一下：<br>在上面 <code>useState</code> 用法的例子中，我们新增一个 <code>button</code>：</p><p>useState 中的 Example.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 声明一个名为“count”的新状态变量</span></span><br><span class="line">    <span class="keyword">const</span> [count, setCount] = useState(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;p&gt;You clicked &#123;count&#125; times&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;</span></span><br><span class="line"><span class="regexp">                Click me</span></span><br><span class="line"><span class="regexp">            &lt;/</span>button&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">                setCount(count + <span class="number">1</span>);</span><br><span class="line">                setCount(count + <span class="number">1</span>);</span><br><span class="line">            &#125;&#125;&gt;</span><br><span class="line">                测试能否连加两次</span><br><span class="line">            &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Example;</span><br></pre></td></tr></table></figure></p><blockquote><p>点击 <em>测试能否连加两次</em> 按钮，会发现，点击一次， <code>count</code> 还是只增加了 1，由此可见，<code>useState</code> 确实是 <strong>异步</strong> 更新数据；</p></blockquote><p>在上面 <code>useReducer</code> 用法的例子中，我们新增一个 <code>button</code>：<br>useReducer 中的 Example.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useReducer &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'increment'</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'decrement'</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.count - <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 useReducer 函数创建状态 state 以及更新状态的 dispatch 函数</span></span><br><span class="line">    <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            Count: &#123;state.count&#125;</span><br><span class="line">            &lt;br /&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; dispatch(&#123;<span class="attr">type</span>: <span class="string">'increment'</span>&#125;)&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">            &lt;button onClick=&#123;() =&gt; dispatch(&#123;<span class="attr">type</span>: <span class="string">'decrement'</span>&#125;)&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">            &lt;button onClick=&#123;() =&gt; &#123;</span><br><span class="line">                dispatch(&#123;<span class="attr">type</span>: <span class="string">'increment'</span>&#125;);</span><br><span class="line">                dispatch(&#123;<span class="attr">type</span>: <span class="string">'increment'</span>&#125;);</span><br><span class="line">            &#125;&#125;&gt;</span><br><span class="line">                测试能否连加两次</span><br><span class="line">            &lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>&gt;</span><br><span class="line">    );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>点击 <em>测试能否连加两次</em> 按钮，会发现，点击一次， <code>count</code> 增加了 2，由此可见，每次dispatch 一个 action 就会更新一次数据，<code>useReducer</code> 确实是 <strong>同步</strong> 更新数据；</p></blockquote><h3 id="3、useCallback"><a href="#3、useCallback" class="headerlink" title="3、useCallback"></a>3、useCallback</h3><h4 id="语法-4"><a href="#语法-4" class="headerlink" title="语法"></a>语法</h4><blockquote><p>const memoizedCallback = useCallback(() =&gt; { doSomething(a, b); }, [a, b]);</p></blockquote><p>返回值 <code>memoizedCallback</code> 是一个 <code>memoized</code> 回调。传递内联回调和一系列依赖项。useCallback将返回一个回忆的memoized版本，该版本仅在其中一个依赖项发生更改时才会更改。当将回调传递给依赖于引用相等性的优化子组件以防止不必要的渲染（例如shouldComponentUpdate）时，这非常有用。</p><blockquote><p>这个 Hook 的 API 不能够一两句解释的清楚，建议看一下这篇文章：<a href="https://zhuanlan.zhihu.com/p/56975681" target="_blank" rel="noopener">useHooks 第一期：聊聊 hooks 中的 useCallback</a>。里面介绍的比较详细。</p></blockquote><h3 id="4、useMemo"><a href="#4、useMemo" class="headerlink" title="4、useMemo"></a>4、useMemo</h3><h4 id="语法-5"><a href="#语法-5" class="headerlink" title="语法"></a>语法</h4><blockquote><p>const memoizedValue = useMemo(() =&gt; computeExpensiveValue(a, b), [a, b]);</p></blockquote><p>返回一个memoized值。<br>传递“创建”函数和依赖项数组。useMemo只会在其中一个依赖项发生更改时重新计算memoized值。此优化有助于避免在每个渲染上进行昂贵的计算。</p><blockquote><p>useMemo在渲染过程中传递的函数会运行。不要做那些在渲染时通常不会做的事情。例如，副作用属于useEffect，而不是useMemo。</p></blockquote><h4 id="用法-2"><a href="#用法-2" class="headerlink" title="用法"></a>用法</h4><p><code>useMemo</code> 可以帮助我们优化子组件的渲染，比如这种场景：<br>在 A 组件中有两个子组件 B 和 C，当 A 组件中传给 B 的 <code>props</code> 发生变化时，A 组件状态会改变，重新渲染。此时 B 和 C 也都会重新渲染。其实这种情况是比较浪费资源的，现在我们就可以使用 <code>useMemo</code> 进行优化，B 组件用到的 props 变化时，只有 B 发生改变，而 C 却不会重新渲染。</p><p>例子：</p><p>ExampleA.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; text &#125;) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Example A：'</span>, <span class="string">'render'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Example A 组件：&#123; text &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ExampleB.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; text &#125;) =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Example B：'</span>, <span class="string">'render'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Example B 组件：&#123; text &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>App.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ExampleA <span class="keyword">from</span> <span class="string">'./ExampleA'</span>;</span><br><span class="line"><span class="keyword">import</span> ExampleB <span class="keyword">from</span> <span class="string">'./ExampleB'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [a, setA] = useState(<span class="string">'ExampleA'</span>);</span><br><span class="line">    <span class="keyword">const</span> [b, setB] = useState(<span class="string">'ExampleB'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">            &lt;ExampleA text=&#123; a &#125; /&gt;</span><br><span class="line">            &lt;ExampleB text=&#123; b &#125; /&gt;</span><br><span class="line">            &lt;br /&gt;</span><br><span class="line">            &lt;button onClick=&#123; () =&gt; setA(<span class="string">'修改后的 ExampleA'</span>) &#125;&gt;修改传给 ExampleA 的属性&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123; () =&gt; setB('修改后的 ExampleB') &#125;&gt;修改传给 ExampleB 的属性&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>此时我们点击上面任意一个按钮，都会看到控制台打印了两条输出， A 和 B 组件都会被重新渲染。</p></blockquote><p>现在我们使用 <code>useMemo</code> 进行优化</p><p>App.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState, useMemo &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ExampleA <span class="keyword">from</span> <span class="string">'./ExampleA'</span>;</span><br><span class="line"><span class="keyword">import</span> ExampleB <span class="keyword">from</span> <span class="string">'./ExampleB'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [a, setA] = useState(<span class="string">'ExampleA'</span>);</span><br><span class="line">    <span class="keyword">const</span> [b, setB] = useState(<span class="string">'ExampleB'</span>);</span><br><span class="line"></span><br><span class="line">+    <span class="keyword">const</span> exampleA = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &lt;ExampleA /&gt;, [a]);</span><br><span class="line">+    <span class="keyword">const</span> exampleB = useMemo(<span class="function"><span class="params">()</span> =&gt;</span> &lt;ExampleB /&gt;, [b]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div&gt;</span><br><span class="line">+            &#123;<span class="comment">/* &lt;ExampleA text=&#123; a &#125; /&gt;</span></span><br><span class="line"><span class="comment">+            &lt;ExampleB text=&#123; b &#125; /&gt; */</span>&#125;</span><br><span class="line">+            &#123; exampleA &#125;</span><br><span class="line">+            &#123; exampleB &#125;</span><br><span class="line">            &lt;br /&gt;</span><br><span class="line">            &lt;button onClick=&#123; () =&gt; setA(<span class="string">'修改后的 ExampleA'</span>) &#125;&gt;修改传给 ExampleA 的属性&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span></span><br><span class="line"><span class="regexp">            &lt;button onClick=&#123; () =&gt; setB('修改后的 ExampleB') &#125;&gt;修改传给 ExampleB 的属性&lt;/</span>button&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><blockquote><p>此时我们点击不同的按钮，控制台都只会打印一条输出，改变 a 或者 b，A 和 B 组件都只有一个会重新渲染。</p></blockquote><h3 id="5、useRef"><a href="#5、useRef" class="headerlink" title="5、useRef"></a>5、useRef</h3><h4 id="语法-6"><a href="#语法-6" class="headerlink" title="语法"></a>语法</h4><blockquote><p>const refContainer = useRef(initialValue);</p></blockquote><p>useRef 返回一个可变的 ref 对象，其 .current 属性被初始化为传递的参数（initialValue）。返回的对象将存留在整个组件的生命周期中。</p><ul><li>从本质上讲，useRef就像一个“盒子”，可以在其.current财产中保持一个可变的价值。</li><li>useRef() Hooks 不仅适用于 DOM 引用。 “ref” 对象是一个通用容器，其 current 属性是可变的，可以保存任何值（可以是元素、对象、基本类型、甚至函数），类似于类上的实例属性。</li></ul><blockquote><p>注意：useRef() 比 ref 属性更有用。与在类中使用 instance(实例) 字段的方式类似，它可以 方便地保留任何可变值。</p></blockquote><blockquote><p>注意，内容更改时useRef 不会通知您。变异.current属性不会导致重新渲染。如果要在React将引用附加或分离到DOM节点时运行某些代码，则可能需要使用回调引用。</p></blockquote><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>下面这个例子中展示了可以在 <code>useRef()</code> 生成的 <code>ref</code> 的 <code>current</code> 中存入元素、字符串</p><p>Example.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useRef, useState, useEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 useRef 创建 inputEl </span></span><br><span class="line">    <span class="keyword">const</span> inputEl = useRef(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [text, updateText] = useState(<span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 useRef 创建 textRef </span></span><br><span class="line">    <span class="keyword">const</span> textRef = useRef();</span><br><span class="line"></span><br><span class="line">    useEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 将 text 值存入 textRef.current 中</span></span><br><span class="line">        textRef.current = text;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'textRef.current：'</span>, textRef.current);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> onButtonClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// `current` points to the mounted text input element</span></span><br><span class="line">        inputEl.current.value = <span class="string">"Hello, useRef"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            &#123;<span class="comment">/* 保存 input 的 ref 到 inputEl */</span>&#125;</span><br><span class="line">            &lt;input ref=&#123; inputEl &#125; type=<span class="string">"text"</span> /&gt;</span><br><span class="line">            &lt;button onClick=&#123; onButtonClick &#125;&gt;在 input 上展示文字&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">            &lt;br /</span>&gt;</span><br><span class="line">            &lt;br /&gt;</span><br><span class="line">            &lt;input value=&#123;text&#125; onChange=&#123;e =&gt; updateText(e.target.value)&#125; /&gt;</span><br><span class="line">        &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>点击 <em>在 input 上展示文字</em> 按钮，就可以看到第一个 input 上出现 <code>Hello, useRef</code>；在第二个 input 中输入内容，可以看到控制台打印出对应的内容。</p><h3 id="6、useLayoutEffect"><a href="#6、useLayoutEffect" class="headerlink" title="6、useLayoutEffect"></a>6、useLayoutEffect</h3><h4 id="语法-7"><a href="#语法-7" class="headerlink" title="语法"></a>语法</h4><blockquote><p>useLayoutEffect(() =&gt; { doSomething });</p></blockquote><p>与 <code>useEffect</code> Hooks 类似，都是执行副作用操作。但是它是在所有 DOM 更新完成后触发。可以用来执行一些与布局相关的副作用，比如获取 DOM 元素宽高，窗口滚动距离等等。</p><blockquote><p>进行副作用操作时尽量优先选择 useEffect，以免阻止视觉更新。与 DOM 无关的副作用操作请使用 <code>useEffect</code>。</p></blockquote><h3 id="用法-3"><a href="#用法-3" class="headerlink" title="用法"></a>用法</h3><p>用法与 useEffect 类似。</p><p>Example.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useRef, useState, useLayoutEffect &#125; <span class="keyword">from</span> <span class="string">'react'</span>; </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> divRef = useRef(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> [height, setHeight] = useState(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    useLayoutEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// DOM 更新完成后打印出 div 的高度</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'useLayoutEffect: '</span>, divRef.current.clientHeight);</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">&#123;</span> <span class="attr">divRef</span> &#125; <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">background:</span> '<span class="attr">red</span>', <span class="attr">height:</span> <span class="attr">height</span> &#125;&#125;&gt;</span>Hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;</span> () =&gt;</span> setHeight(height + 50) &#125;&gt;改变 div 高度<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="五、尝试编写自定义-Hooks"><a href="#五、尝试编写自定义-Hooks" class="headerlink" title="五、尝试编写自定义 Hooks"></a>五、尝试编写自定义 Hooks</h2><p>这里我们就仿照官方的 <code>useReducer</code> 做一个自定义的 <code>Hooks</code>。</p><h3 id="1、编写自定义-useReducer"><a href="#1、编写自定义-useReducer" class="headerlink" title="1、编写自定义 useReducer"></a>1、编写自定义 useReducer</h3><p>在 <code>src</code> 目录下新建一个 <code>useReducer.js</code> 文件：</p><p>useReducer.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; useState &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useReducer</span>(<span class="params">reducer, initialState</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> [state, setState] = useState(initialState);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params">action</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">const</span> nextState = reducer(state, action);</span><br><span class="line">        setState(nextState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [state, dispatch];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>tip: Hooks 不仅可以在函数组件中使用，也可以在别的 Hooks 中进行使用。</p></blockquote><h3 id="2、使用自定义-useReducer"><a href="#2、使用自定义-useReducer" class="headerlink" title="2、使用自定义 useReducer"></a>2、使用自定义 useReducer</h3><p>好了，自定义 <code>useReducer</code> 编写完成了，下面我们看一下能不能正常使用呢？</p><p>改写 Example 组件</p><p>Example.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从自定义 useReducer 中引入</span></span><br><span class="line"><span class="keyword">import</span> useReducer <span class="keyword">from</span> <span class="string">'./useReducer'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialState = &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reducer</span>(<span class="params">state, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'increment'</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.count + <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'decrement'</span>:</span><br><span class="line">            <span class="keyword">return</span> &#123;<span class="attr">count</span>: state.count - <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> () =&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 useReducer 函数创建状态 state 以及更新状态的 dispatch 函数</span></span><br><span class="line">    <span class="keyword">const</span> [state, dispatch] = useReducer(reducer, initialState);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;&gt;</span><br><span class="line">            Count: &#123;state.count&#125;</span><br><span class="line">            &lt;br /&gt;</span><br><span class="line">            &lt;button onClick=&#123;() =&gt; dispatch(&#123;<span class="attr">type</span>: <span class="string">'increment'</span>&#125;)&#125;&gt;+<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">            &lt;button onClick=&#123;() =&gt; dispatch(&#123;<span class="attr">type</span>: <span class="string">'decrement'</span>&#125;)&#125;&gt;-<span class="xml"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="五、Hooks-使用及编写规范"><a href="#五、Hooks-使用及编写规范" class="headerlink" title="五、Hooks 使用及编写规范"></a>五、Hooks 使用及编写规范</h2><ul><li>不要从常规 <code>JavaScript</code> 函数调用 <code>Hooks</code>;</li><li>不要在循环，条件或嵌套函数中调用 <code>Hooks</code>;</li><li>必须在组件的顶层调用 <code>Hooks</code>;</li><li>可以从 <code>React</code> 功能组件调用 <code>Hooks</code>;</li><li>可以从自定义 <code>Hooks</code> 中调用 <code>Hooks</code>;</li><li>自定义 <code>Hooks</code> 必须使用 <code>use</code> 开头，这是一种约定;</li></ul><hr><h2 id="六、使用-React-提供的-ESLint-插件"><a href="#六、使用-React-提供的-ESLint-插件" class="headerlink" title="六、使用 React 提供的 ESLint 插件"></a>六、使用 React 提供的 ESLint 插件</h2><p>根据上一段所写，在 <code>React</code> 中使用 <code>Hooks</code> 需要遵循一些特定规则。但是在代码的编写过程中，可能会忽略掉这些使用规则，从而导致出现一些不可控的错误。这种情况下，我们就可以使用 React 提供的 ESLint 插件：<a href="https://www.npmjs.com/package/eslint-plugin-react-hooks" target="_blank" rel="noopener">eslint-plugin-react-hooks</a>。下面我们就看看如何使用吧。</p><h3 id="安装-ESLint-插件"><a href="#安装-ESLint-插件" class="headerlink" title="安装 ESLint 插件"></a>安装 ESLint 插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install eslint-plugin-react-hooks --save</span><br></pre></td></tr></table></figure><h3 id="在-eslintrc-中使用插件"><a href="#在-eslintrc-中使用插件" class="headerlink" title="在 .eslintrc 中使用插件"></a>在 .eslintrc 中使用插件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// Your ESLint configuration</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"plugins"</span>: [</span><br><span class="line">    // ...</span><br><span class="line">    <span class="string">"react-hooks"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    // ...</span><br><span class="line">    "react-hooks/rules-of-hooks": "error", // Checks rules of Hooks</span><br><span class="line">    "react-hooks/exhaustive-deps": "warn" // Checks effect dependencies</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="七、参考文档"><a href="#七、参考文档" class="headerlink" title="七、参考文档"></a>七、参考文档</h2><p><a href="https://reactjs.org/docs/hooks-intro.html" target="_blank" rel="noopener">React 官网</a></p><p><a href="https://reactjs.org/docs/hooks-faq.html" target="_blank" rel="noopener">React Hooks FAQ</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文对 16.8 版本之后 React 发布的新特性 Hooks 进行了详细讲解，并对一些常用的 Hooks 进行代码演示，希望可以对需要的朋友提供点帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="React" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/React/"/>
    
    
      <category term="React" scheme="https://beichensky.github.io/tags/React/"/>
    
      <category term="Hooks" scheme="https://beichensky.github.io/tags/Hooks/"/>
    
  </entry>
  
  <entry>
    <title>Webpack3 升级到 webpack4 时遇到的问题汇总</title>
    <link href="https://beichensky.github.io/20190404/webpack-update/"/>
    <id>https://beichensky.github.io/20190404/webpack-update/</id>
    <published>2019-04-04T02:55:21.000Z</published>
    <updated>2019-08-03T09:27:33.912Z</updated>
    
    <content type="html"><![CDATA[<p>项目在对 webpack 的版本升级的过程中，出现了各种各样的问题，今天就把其中比较典型的问题总结一下，作为记录。</p><a id="more"></a><h2 id="一、MissingDeps-some-is-not-a-function"><a href="#一、MissingDeps-some-is-not-a-function" class="headerlink" title="一、MissingDeps.some is not a function"></a>一、MissingDeps.some is not a function</h2><p>错误提示中，提示 <code>react-dev-utils</code> 包有问题，<code>TypeError: MissingDeps.some is not a function</code>。</p><ul><li>解决方案：升级 <code>react-utils-dev</code> 包到 6.0.0 版本之后即可。将 package.json 中的 <code>react-utils-dev</code> 依赖删除掉，重新安装匹配版本插件。<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install react-utils-dev --save-dev</span><br></pre></td></tr></table></figure></li></ul><h2 id="二、this-htmlWebpackPlugin-getHooks-is-not-a-function"><a href="#二、this-htmlWebpackPlugin-getHooks-is-not-a-function" class="headerlink" title="二、this.htmlWebpackPlugin.getHooks is not a function"></a>二、this.htmlWebpackPlugin.getHooks is not a function</h2><p>运行项目时，提示错误：<code>this.htmlWebpackPlugin.getHooks is not a function</code></p><ul><li>解决方案：<ul><li><ol><li>安装与 webpack4 匹配的 <code>html-webpack-plugin</code> 插件：<code>npm install html-webpack-plugin@next --save-dev</code></li></ol></li><li><ol start="2"><li>修改 webpack 配置文件：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="keyword">new</span> InterpolateHtmlPlugin(env.raw),</span><br><span class="line">+ <span class="keyword">new</span> InterpolateHtmlPlugin(HtmlWebpackPlugin, env.raw),</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><h2 id="三、When-specified-“proxy”-in-package-json-must-be-a-string"><a href="#三、When-specified-“proxy”-in-package-json-must-be-a-string" class="headerlink" title="三、When specified, “proxy” in package.json must be a string"></a>三、When specified, “proxy” in package.json must be a string</h2><p>运行报错提示为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">When specified, <span class="string">"proxy"</span> <span class="keyword">in</span> package.json must be a string.</span><br><span class="line">Instead, the <span class="built_in">type</span> of <span class="string">"proxy"</span> was <span class="string">"object"</span>.</span><br><span class="line">Either remove <span class="string">"proxy"</span> from package.json, or make it a string.</span><br></pre></td></tr></table></figure></p><ul><li><p>错误出现原因：使用 <code>create-react-app</code> 搭建脚手架，在 CRA2.X 升级之后，对 proxy 的设置作了修改。</p><ul><li>当使用 <code>proxy</code> 为字符串时不需要修改，可以直接在 <code>package.json</code>中添加 <code>proxy</code> 字段，例如：<code>&quot;proxy&quot;: &quot;http://localhost:4000&quot;,</code></li><li>当使用多个 <code>proxy</code> 时，就需要结合 <code>http-proxy-middleware</code> 进行使用。</li><li><a href="https://facebook.github.io/create-react-app/docs/proxying-api-requests-in-development" target="_blank" rel="noopener">create-react-app 官网说明地址</a></li></ul></li><li><p>解决方案：</p><ul><li><ol><li>安装 <code>http-proxy-middleware</code> 插件：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ npm install http-proxy-middleware --save</span><br><span class="line">$ <span class="comment"># 或</span></span><br><span class="line">$ yarn add http-proxy-middleware</span><br></pre></td></tr></table></figure></li></ol></li><li><ol start="2"><li>创建 src/setupProxy.js 并将以下内容放入该文件中(将路由和 target 值修改为自己需要的即可):<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> proxy = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">app</span>) </span>&#123;</span><br><span class="line">    app.use(proxy(<span class="string">'/api'</span>, &#123; <span class="attr">target</span>: <span class="string">'http://localhost:5000/api'</span> &#125;));</span><br><span class="line">    app.use(proxy(<span class="string">'/test'</span>, &#123; <span class="attr">target</span>: <span class="string">'http://localhost:4000/test'</span> &#125;));</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li></ul><blockquote><p>注意： 无需在任何位置导入此文件。 它在启动开发服务器时会自动注册。</p></blockquote><blockquote><p>注意： 此文件仅支持 Node 的 JavaScript 语法。 请务必仅使用支持的语言特性（即不支持 Flow ，ES Modules 等）。</p></blockquote><blockquote><p>注意： 将路径传递给代理函数允许你在路径上使用 globbing 和/或 模式匹配，这比 express 路由匹配更灵活。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目在对 webpack 的版本升级的过程中，出现了各种各样的问题，今天就把其中比较典型的问题总结一下，作为记录。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Webpack" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Webpack/"/>
    
    
      <category term="Webpack" scheme="https://beichensky.github.io/tags/Webpack/"/>
    
      <category term="前端开发" scheme="https://beichensky.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>react-dnd 用法详解</title>
    <link href="https://beichensky.github.io/20190321/react-dnd/"/>
    <id>https://beichensky.github.io/20190321/react-dnd/</id>
    <published>2019-03-21T01:46:43.000Z</published>
    <updated>2019-08-03T09:27:33.903Z</updated>
    
    <content type="html"><![CDATA[<p>本文详细讲解了 react-dnd 的 API 以及用法，并且附上了可供参考的 Demo，希望能够给需要的朋友提供一下帮助。</p><a id="more"></a><hr><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>React DnD 是一组 React 高阶组件，使用的时候只需要使用对应的 API 将目标组件进行包裹，即可实现拖动或接受拖动元素的功能。将拖动的事件转换成对象中对应状态的形式，不需要开发者自己判断拖动状态，只需要在传入的 spec 对象中各个状态属性中做对应处理即可。刚刚接触可能难以理解，真正熟悉用法之后会感觉很方便。</p><hr><h2 id="二、DragSource：使组件能够被拖拽"><a href="#二、DragSource：使组件能够被拖拽" class="headerlink" title="二、DragSource：使组件能够被拖拽"></a>二、DragSource：使组件能够被拖拽</h2><p>使用 <code>DragSource</code> 包裹住组件，使其可以进行拖动。</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DragSource &#125; <span class="keyword">from</span> <span class="string">'react-dnd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spec = &#123;</span><br><span class="line">beginDrag(props, monitor, component) &#123;</span><br><span class="line"><span class="comment">// 这里 return 出去的对象属性自行选择，这里只是用 id 作为演示</span></span><br><span class="line"><span class="keyword">return</span> &#123; <span class="attr">id</span>: props.id &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">endDrag(props, monitor, component) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">canDrag(props, monitor) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">isDragging(props, monitor) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> collect = <span class="function">(<span class="params">connect, monitor</span>) =&gt;</span> (&#123;</span><br><span class="line"><span class="comment">// 这里返回一个对象，会将对象的属性都赋到组件的 props 中去。这些属性需要自己定义。</span></span><br><span class="line">connectDropTarget: connect.dropTarget(),</span><br><span class="line">id: monitor.getItem().id</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">@DragSource(type, spec, collect)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyComponent;</span><br></pre></td></tr></table></figure><p>参数讲解：</p><ul><li>type: 必填。字符串，ES6符号或返回给定组件的函数props。只有为相同类型注册的 <code>drop targets</code> 才会对此拖动源生成的项目做出反应</li><li>spec：必填。一个普通的JavaScript对象，上面有一些允许的方法。它描述了拖动源如何对拖放事件做出反应。</li><li>collect：必填。收集功能。它应该返回一个普通的对象注入你的组件。它接收两个参数：connect和monitor。</li><li>options：可选的。一个普通的对象。</li></ul><h3 id="spec-对象中的方法"><a href="#spec-对象中的方法" class="headerlink" title="spec 对象中的方法"></a>spec 对象中的方法</h3><ul><li><p><code>beginDrag(props, monitor, component)</code>：必填。当拖动开始时，<code>beginDrag</code> 被调用。您必须返回描述被拖动数据的纯 <code>JavaScript</code> 对象。您返回的内容会被放置到 <code>monitor.getItem()</code> 获取到的对象中。</p></li><li><p><code>endDrag(props, monitor, component)</code>：可选的。当拖动停止时，<code>endDrag</code> 被调用。对于每个 <code>beginDrag</code>，<code>endDrag</code> 都会对应。</p></li><li><p><code>canDrag(props, monitor)</code>： 可选的。用它来指定当前是否允许拖动。如果您想要始终允许它，只需省略此方法即可。注意：您可能无法调用<code>monitor.canDrag()</code> 此方法。</p></li><li><p><code>isDragging(props, monitor)</code>： 可选的。默认情况下，仅启动拖动操作的拖动源被视为拖动。注意：您可能无法调用 <code>monitor.isDragging()</code> 此方法。</p></li></ul><h3 id="方法中的参数-props-monitor-component"><a href="#方法中的参数-props-monitor-component" class="headerlink" title="方法中的参数 props, monitor, component"></a>方法中的参数 props, monitor, component</h3><ul><li><code>props</code>：当前组件的 <code>props</code></li><li><code>monitor</code>：一个 <code>DragSourceMonitor</code> 实例。使用它来查询有关当前拖动状态的信息，例如当前拖动的项目及其类型，当前和初始坐标和偏移，以及它是否已被删除。</li><li><code>component</code>：指定时，它是组件的实例。使用它来访问底层DOM节点以进行位置或大小测量，或调用 <code>setState</code> 以及其他组件方法。<code>isDragging</code>、 <code>canDrag</code> 方法里获取不到 <code>component</code> 这个参数，因为它们被调用时实例可能不可用</li></ul><h3 id="collect-中的-connect-和-monitor-参数"><a href="#collect-中的-connect-和-monitor-参数" class="headerlink" title="collect 中的 connect 和 monitor 参数"></a>collect 中的 connect 和 monitor 参数</h3><ul><li><p><code>connect</code>: 一个 <code>DragSourceConnector</code> 实例。它有两种方法：dragPreview()和dragSource()。</p><ul><li>dragSource() =&gt; (elementOrNode, options?)：常用方法，返回一个函数，传递给组件用来将 source DOM 和 React DnD Backend 连接起来<ul><li>dragPreview()：返回一个函数，传递给组件用来将拖动时预览的 DOM 节点 和 React DnD Backend 连接起来</li></ul></li></ul></li><li><p>monitor：一个 <code>DragSourceMonitor</code> 实例。包含下面各种方法：</p></li></ul><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td><code>canDrag()</code></td><td>是否可以被拖拽。如果没有正在进行拖动操作，则返回 true</td></tr><tr><td><code>isDragging()</code></td><td>是否正在被拖动。如果正在进行拖动操作，则返回 true</td></tr><tr><td><code>getItemType()</code></td><td>返回标识当前拖动项的类型的字符串或ES6符号。 如果没有拖动项目，则返回 <code>null</code></td></tr><tr><td><code>getItem()</code></td><td>返回表示当前拖动项的普通对象。 每个拖动源都必须通过从其beginDrag（）方法返回一个对象来指定它。 如果没有拖动项目，则返回 <code>null</code></td></tr><tr><td><code>getDropResult()</code></td><td>返回表示最后记录的放置 <code>drop result</code> 对象</td></tr><tr><td><code>didDrop()</code></td><td>如果某个 <code>drop target</code> 处理了 <code>drop</code> 事件，则返回 true，否则返回 false。即使 <code>target</code> 没有返回 <code>drop</code> 结果，<code>didDrop()</code> 也会返回true。 在 <code>endDrag()</code> 中使用它来测试任何放置目标是否已处理掉落。 如果在 <code>endDrag()</code> 之外调用，则返回 false</td></tr><tr><td><code>getInitialClientOffset()</code></td><td>返回当前拖动操作开始时指针的{x，y} <code>client</code> 偏移量。 如果没有拖动项目，则返回 <code>null</code></td></tr><tr><td><code>getInitialSourceClientOffset()</code></td><td>返回当前拖动操作开始时 <code>drag source</code> 组件的根DOM节点的{x，y}<code>client</code> 偏移量。 如果没有拖动项目，则返回 <code>null</code></td></tr><tr><td><code>getClientOffset()</code></td><td>拖动操作正在进行时，返回指针的最后记录的{x，y}<code>client</code> 偏移量。 如果没有拖动项目，则返回 <code>null</code></td></tr><tr><td><code>getDifferenceFromInitialOffset()</code></td><td>返回当前拖动操作开始时鼠标的最后记录 <code>client</code> 偏移量与 <code>client</code> 偏移量之间的{x，y}差异。 如果没有拖动项目，则返回 <code>null</code></td></tr><tr><td><code>getSourceClientOffset()</code></td><td>返回 <code>drag source</code> 组件的根DOM节点的预计{x，y} <code>client</code> 偏移量，基于其在当前拖动操作开始时的位置以及移动差异。 如果没有拖动项目，则返回 <code>null</code></td></tr></tbody></table><hr><h2 id="三、DropTarget：使组件能够放置拖拽组件"><a href="#三、DropTarget：使组件能够放置拖拽组件" class="headerlink" title="三、DropTarget：使组件能够放置拖拽组件"></a>三、DropTarget：使组件能够放置拖拽组件</h2><p>使用 <code>DropTarget</code> 包裹住组件，使其对拖动，悬停或 dropped 的兼容项目做出反应。</p><h3 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DropTarget &#125; <span class="keyword">from</span> <span class="string">'react-dnd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> spec = &#123;</span><br><span class="line">drop(props, monitor, component) &#123;</span><br><span class="line"><span class="comment">// 这里 return 出去的对象属性自行选择，这里只是用 id 作为演示</span></span><br><span class="line"><span class="keyword">return</span> &#123; <span class="attr">id</span>: props.id &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hover(props, monitor, component) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">canDrop(props, monitor) &#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> collect = <span class="function">(<span class="params">connect, monitor</span>) =&gt;</span> (&#123;</span><br><span class="line"><span class="comment">// 这里返回一个对象，会将对象的属性都赋到组件的 props 中去。这些属性需要自己定义。</span></span><br><span class="line">connectDropTarget: connect.dropTarget()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">@DropTarget(type, spec, collect)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> MyComponent;</span><br></pre></td></tr></table></figure><p>参数讲解：</p><ul><li>type: 必填。字符串，ES6符号或返回给定组件的函数props。此放置目标仅对指定类型的 <code>drag sources</code> 项目做出反应</li><li>spec：必填。一个普通的JavaScript对象，上面有一些允许的方法。它描述了放置目标如何对拖放事件做出反应。</li><li>collect：必填。收集功能。它应该返回一个普通的道具对象注入你的组件。它接收两个参数：connect 和 monitor。</li><li>options：可选的。一个普通的对象。</li></ul><h3 id="spec-对象中的方法-1"><a href="#spec-对象中的方法-1" class="headerlink" title="spec 对象中的方法"></a>spec 对象中的方法</h3><ul><li><p><code>drop(props, monitor, component)</code>： 可选的。在目标上放置兼容项目时调用。可以返回 <code>undefined</code> 或普通对象。如果返回一个对象，它将成为放置结果，可以使用 <code>monitor.getDropResult()</code> 获取到。</p></li><li><p><code>hover(props, monitor, component)</code>： 可选的。当项目悬停在组件上时调用。您可以检查 <code>monitor.isOver({ shallow: true })</code> 以测试悬停是仅发生在当前目标上还是嵌套上。</p></li><li><p><code>canDrop(props, monitor)</code>： 可选的。使用它来指定放置目标是否能够接受该项目。如果想要始终允许它，只需省略此方法即可。</p></li></ul><blockquote><p>文档没有提供按目的处理进入或离开事件的方法。而是 <code>monitor.isOver()</code> 从收集函数返回调用结果，以便我们可以使用 <code>componentDidUpdateReact</code> 钩子函数来处理组件中的进入和离开事件。</p></blockquote><h3 id="方法中的参数-props-monitor-component-1"><a href="#方法中的参数-props-monitor-component-1" class="headerlink" title="方法中的参数 props, monitor, component"></a>方法中的参数 props, monitor, component</h3><ul><li><code>props</code>：当前组件的 <code>props</code></li><li><code>monitor</code>：一个 <code>DropTargetMonitor</code> 实例。使用它来查询有关当前拖动状态的信息，例如当前拖动的项目及其类型，当前和初始坐标和偏移，是否超过当前目标，以及是否可以删除它。</li><li><code>component</code>：指定时，它是组件的实例。使用它来访问底层DOM节点以进行位置或大小测量，或调用 <code>setState</code> 以及其他组件方法。<code>canDrag</code> 方法里获取不到 <code>component</code> 这个参数，因为它们被调用时实例可能不可用。</li></ul><h3 id="collect-中的-connect-和-monitor-参数-1"><a href="#collect-中的-connect-和-monitor-参数-1" class="headerlink" title="collect 中的 connect 和 monitor 参数"></a>collect 中的 connect 和 monitor 参数</h3><ul><li><p><code>connect</code>: 一个 <code>DropTargetConnector</code> 实例。它只有一种 <code>dropTarget()</code> 方法。</p><ul><li><code>dropTarget() =&gt; (elementOrNode)</code>：常用方法，返回一个函数，传递给组件用来将 target DOM 和 React DnD Backend 连接起来。通过{ connectDropTarget: connect.dropTarget() }从收集函数返回，可以将任何React元素标记为可放置节点。</li></ul></li><li><p>monitor：一个 <code>DropTargetMonitor</code> 实例。包含下面各种方法：</p></li></ul><table><thead><tr><th>方法</th><th>含义</th></tr></thead><tbody><tr><td><code>canDrop()</code></td><td>是否可以被放置。如果正在进行拖动操作，则返回true</td></tr><tr><td><code>isOver(options)</code></td><td><code>drag source</code> 是否悬停在 <code>drop target</code> 区域。可以选择传递<code>{ shallow: true }</code>以严格检查是否只有 <code>drag source</code> 悬停，而不是嵌套目标</td></tr><tr><td><code>getItemType()</code></td><td>返回标识当前拖动项的类型的字符串或ES6符号。如果没有拖动项目则返回 <code>null</code></td></tr><tr><td><code>getItem()</code></td><td>返回表示当前拖动项的普通对象，每个拖动源都必须通过从其beginDrag()方法返回一个对象来指定它。如果没有拖动项目则返回 <code>null</code></td></tr><tr><td><code>getDropResult()</code></td><td>返回表示最后记录的放置 <code>drop result</code> 对象</td></tr><tr><td><code>didDrop()</code></td><td>如果某个 <code>drop target</code> 处理了 <code>drop</code> 事件，则返回 true，否则返回 false。即使 <code>target</code> 没有返回 <code>drop</code> 结果，<code>didDrop()</code> 也会返回true。 在 <code>endDrag()</code> 中使用它来测试任何放置目标是否已处理掉落。 如果在 <code>endDrag()</code> 之外调用，则返回 false</td></tr><tr><td><code>getInitialClientOffset()</code></td><td>返回当前拖动操作开始时指针的{x，y} <code>client</code> 偏移量。 如果没有拖动项目，则返回 <code>null</code></td></tr><tr><td><code>getInitialSourceClientOffset()</code></td><td>返回当前拖动操作开始时 <code>drag source</code> 组件的根DOM节点的{x，y}<code>client</code> 偏移量。 如果没有拖动项目，则返回 <code>null</code></td></tr><tr><td><code>getClientOffset()</code></td><td>拖动操作正在进行时，返回指针的最后记录的{x，y}<code>client</code> 偏移量。 如果没有拖动项目，则返回 <code>null</code></td></tr><tr><td><code>getDifferenceFromInitialOffset()</code></td><td>返回当前拖动操作开始时鼠标的最后记录 <code>client</code> 偏移量与 <code>client</code> 偏移量之间的{x，y}差异。 如果没有拖动项目，则返回 <code>null</code></td></tr><tr><td><code>getSourceClientOffset()</code></td><td>返回 <code>drag source</code> 组件的根DOM节点的预计{x，y} <code>client</code> 偏移量，基于其在当前拖动操作开始时的位置以及移动差异。 如果没有拖动项目，则返回 <code>null</code></td></tr></tbody></table><hr><h2 id="四、DragDropContext-amp-DragDropContextProvider"><a href="#四、DragDropContext-amp-DragDropContextProvider" class="headerlink" title="四、DragDropContext &amp; DragDropContextProvider"></a>四、DragDropContext &amp; DragDropContextProvider</h2><blockquote><p><strong>注意：</strong> 使用 DragSource 和 DropTarget 包裹的组件，必须放在： DragDropContext 包裹的根组件内部，或者 DragDropContextProvider 根标签的内部。</p></blockquote><h3 id="DragDropContext"><a href="#DragDropContext" class="headerlink" title="DragDropContext"></a>DragDropContext</h3><p>使用 <code>DragDropContext</code> 包装应用程序的根组件以启用 React DnD。</p><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> HTML5Backend <span class="keyword">from</span> <span class="string">'react-dnd-html5-backend'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DragDropContext &#125; <span class="keyword">from</span> <span class="string">'react-dnd'</span>;</span><br><span class="line"></span><br><span class="line">@DragDropContext(HTML5Backend)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">YourApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> YourApp;</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul><li><p>backend：必填。一个 React DnD 后端。除非您正在编写自定义的，否则建议使用 React DnD 附带的 HTML5Backend。</p></li><li><p>context：backend 依赖。用于自定义后端的上下文对象。例如，HTML5Backend可以为iframe场景注入自定义窗口对象。</p></li></ul><h3 id="DragDropContextProvider"><a href="#DragDropContextProvider" class="headerlink" title="DragDropContextProvider"></a>DragDropContextProvider</h3><p>作为 <code>DragDropContext</code> 的替代方法，您可以使用 <code>DragDropContextProvider</code> 元素为应用程序启用React DnD。与 <code>DragDropContext</code> 类似，这可以通过 <code>backendprop</code> 注入后端，但也可以注入一个 <code>window</code> 对象。</p><h4 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> HTML5Backend <span class="keyword">from</span> <span class="string">'react-dnd-html5-backend'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DragDropContextProvider &#125; <span class="keyword">from</span> <span class="string">'react-dnd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">YourApp</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;DragDropContextProvider backend=&#123;HTML5Backend&#125;&gt;</span><br><span class="line"><span class="comment">/* ... */</span></span><br><span class="line">&lt;<span class="regexp">/DragDropContextProvider&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><ul><li><p>backend：必填。一个 React DnD 后端。除非您正在编写自定义的，否则建议使用 React DnD 附带的 HTML5Backend。</p></li><li><p>context：backend 依赖。用于自定义后端的上下文对象。例如，HTML5Backend可以为iframe场景注入自定义窗口对象。</p></li></ul><hr><h2 id="五、react-dnd-的简单示例"><a href="#五、react-dnd-的简单示例" class="headerlink" title="五、react-dnd 的简单示例"></a>五、react-dnd 的简单示例</h2><p>本示例参照官方的 Dustbin 示例进行讲解。</p><h3 id="项目准备"><a href="#项目准备" class="headerlink" title="项目准备"></a>项目准备</h3><p>当前项目使用 <code>create-react-app</code> 脚手架进行搭建，而且使用 <code>react-dnd</code> 时都是使用装饰器语法进行编写。所以需要先在项目里添加一些配置。</p><p>启用装饰器的配置方式可以参考我的上一篇文章：<strong><a href="https://lufanfan.github.io/20190320/cra-decorators/" target="_blank" rel="noopener">在 create-react-app 中启用装饰器语法</a></strong>。</p><p>新建 <code>components</code> 文件夹，用来存放编写的组件。新建 <code>types</code> 文件夹，用来存放 <code>type</code> 字符串常量，在 <code>types</code> 目录下创建 <code>index.js</code> 文件声明对应的 <code>type</code> 值。</p><p><code>types/index.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">BOX: <span class="string">'box'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以当前项目 <code>src</code> 目录下文件结构如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">src</span><br><span class="line">├── components/</span><br><span class="line">├── types/</span><br><span class="line">      └── index.js</span><br><span class="line">├── App.js</span><br><span class="line">├── index.css</span><br><span class="line">└── index.js</span><br></pre></td></tr></table></figure></p><h3 id="创建-Box-组件，作为-DragSource"><a href="#创建-Box-组件，作为-DragSource" class="headerlink" title="创建 Box 组件，作为 DragSource"></a>创建 Box 组件，作为 DragSource</h3><p>在 <code>components</code> 目录下，创建 <code>Box.js</code> 文件，编写 <code>Box</code> 组件，使其可以进行拖动</p><p><code>components/Box.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DragSource &#125; <span class="keyword">from</span> <span class="string">'react-dnd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> ItemTypes <span class="keyword">from</span> <span class="string">'../types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = &#123;</span><br><span class="line">border: <span class="string">'1px dashed gray'</span>,</span><br><span class="line">backgroundColor: <span class="string">'white'</span>,</span><br><span class="line">padding: <span class="string">'0.5rem 1rem'</span>,</span><br><span class="line">marginRight: <span class="string">'1.5rem'</span>,</span><br><span class="line">marginBottom: <span class="string">'1.5rem'</span>,</span><br><span class="line">cursor: <span class="string">'move'</span>,</span><br><span class="line">float: <span class="string">'left'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boxSource = &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开始拖拽时触发当前函数</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; props 组件的 props</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">beginDrag(props) &#123;</span><br><span class="line"><span class="comment">// 返回的对象可以在 monitor.getItem() 中获取到</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">name: props.name,</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拖拽结束时触发当前函数</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; props 当前组件的 props</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; monitor DragSourceMonitor 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">endDrag(props, monitor) &#123;</span><br><span class="line"><span class="comment">// 当前拖拽的 item 组件</span></span><br><span class="line"><span class="keyword">const</span> item = monitor.getItem()</span><br><span class="line"><span class="comment">// 拖拽元素放下时，drop 结果</span></span><br><span class="line"><span class="keyword">const</span> dropResult = monitor.getDropResult()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 drop 结果存在，就弹出 alert 提示</span></span><br><span class="line"><span class="keyword">if</span> (dropResult) &#123;</span><br><span class="line">alert(<span class="string">`You dropped <span class="subst">$&#123;item.name&#125;</span> into <span class="subst">$&#123;dropResult.name&#125;</span>!`</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@DragSource(</span><br><span class="line"><span class="comment">// type 标识，这里是字符串 'box'</span></span><br><span class="line">ItemTypes.BOX,</span><br><span class="line"><span class="comment">// 拖拽事件对象</span></span><br><span class="line">boxSource,</span><br><span class="line"><span class="comment">// 收集功能函数，包含 connect 和 monitor 参数</span></span><br><span class="line"><span class="comment">// connect 里面的函数用来将 DOM 节点与 react-dnd 的 backend 建立联系</span></span><br><span class="line">(connect, monitor) =&gt; (&#123;</span><br><span class="line"><span class="comment">// 包裹住 DOM 节点，使其可以进行拖拽操作</span></span><br><span class="line">connectDragSource: connect.dragSource(),</span><br><span class="line"><span class="comment">// 是否处于拖拽状态</span></span><br><span class="line">isDragging: monitor.isDragging(),</span><br><span class="line">&#125;),</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">name: PropTypes.string.isRequired,</span><br><span class="line">isDragging: PropTypes.bool.isRequired,</span><br><span class="line">connectDragSource: PropTypes.func.isRequired</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; isDragging, connectDragSource &#125; = <span class="keyword">this</span>.props</span><br><span class="line"><span class="keyword">const</span> &#123; name &#125; = <span class="keyword">this</span>.props</span><br><span class="line"><span class="keyword">const</span> opacity = isDragging ? <span class="number">0.4</span> : <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 connectDragSource 包裹住 DOM 节点，使其可以接受各种拖动 API</span></span><br><span class="line"><span class="comment">// connectDragSource 包裹住的 DOM 节点才可以被拖动</span></span><br><span class="line"><span class="keyword">return</span> connectDragSource &amp;&amp; connectDragSource(</span><br><span class="line">&lt;div style=&#123;&#123; ...style, opacity &#125;&#125;&gt;</span><br><span class="line">&#123;name&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Box;</span></span><br></pre></td></tr></table></figure></p><h3 id="创建-Dustbin-组件，作为-DropTarget"><a href="#创建-Dustbin-组件，作为-DropTarget" class="headerlink" title="创建 Dustbin 组件，作为 DropTarget"></a>创建 Dustbin 组件，作为 DropTarget</h3><p>在 <code>components</code> 目录下，创建 <code>Dustbin.js</code> 文件，编写 <code>Dustbin</code> 组件，使其可以接受对应的拖拽组件。</p><p><code>components/Dustbin.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">'prop-types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; DropTarget &#125; <span class="keyword">from</span> <span class="string">'react-dnd'</span>;</span><br><span class="line"><span class="keyword">import</span> ItemTypes <span class="keyword">from</span> <span class="string">'../types'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> style = &#123;</span><br><span class="line">height: <span class="string">'12rem'</span>,</span><br><span class="line">width: <span class="string">'12rem'</span>,</span><br><span class="line">marginRight: <span class="string">'1.5rem'</span>,</span><br><span class="line">marginBottom: <span class="string">'1.5rem'</span>,</span><br><span class="line">color: <span class="string">'white'</span>,</span><br><span class="line">padding: <span class="string">'1rem'</span>,</span><br><span class="line">textAlign: <span class="string">'center'</span>,</span><br><span class="line">fontSize: <span class="string">'1rem'</span>,</span><br><span class="line">lineHeight: <span class="string">'normal'</span>,</span><br><span class="line">float: <span class="string">'left'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> boxTarget = &#123;</span><br><span class="line"><span class="comment">// 当有对应的 drag source 放在当前组件区域时，会返回一个对象，可以在 monitor.getDropResult() 中获取到</span></span><br><span class="line">drop: <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">name</span>: <span class="string">'Dustbin'</span> &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@DropTarget(</span><br><span class="line"><span class="comment">// type 标识，这里是字符串 'box'</span></span><br><span class="line">ItemTypes.BOX,</span><br><span class="line"><span class="comment">// 接收拖拽的事件对象</span></span><br><span class="line">boxTarget,</span><br><span class="line"><span class="comment">// 收集功能函数，包含 connect 和 monitor 参数</span></span><br><span class="line"><span class="comment">// connect 里面的函数用来将 DOM 节点与 react-dnd 的 backend 建立联系</span></span><br><span class="line">(connect, monitor) =&gt; (&#123;</span><br><span class="line"><span class="comment">// 包裹住 DOM 节点，使其可以接收对应的拖拽组件</span></span><br><span class="line">connectDropTarget: connect.dropTarget(),</span><br><span class="line"><span class="comment">// drag source是否在 drop target 区域</span></span><br><span class="line">isOver: monitor.isOver(),</span><br><span class="line"><span class="comment">// 是否可以被放置</span></span><br><span class="line">canDrop: monitor.canDrop(),</span><br><span class="line">&#125;)</span><br><span class="line">)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dustbin</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> propTypes = &#123;</span><br><span class="line">        canDrop: PropTypes.bool.isRequired,</span><br><span class="line">        isOver: PropTypes.bool.isRequired,</span><br><span class="line">        connectDropTarget: PropTypes.func.isRequired</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">const</span> &#123; canDrop, isOver, connectDropTarget &#125; = <span class="keyword">this</span>.props;</span><br><span class="line"><span class="keyword">const</span> isActive = canDrop &amp;&amp; isOver;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> backgroundColor = <span class="string">'#222'</span>;</span><br><span class="line"><span class="comment">// 拖拽组件此时正处于 drag target 区域时，当前组件背景色变为 darkgreen</span></span><br><span class="line"><span class="keyword">if</span> (isActive) &#123;</span><br><span class="line">backgroundColor = <span class="string">'darkgreen'</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">// 当前组件可以放置 drag source 时，背景色变为 pink</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (canDrop) &#123;</span><br><span class="line">backgroundColor = <span class="string">'darkkhaki'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 connectDropTarget 包裹住 DOM 节点，使其可以接收对应的 drag source 组件</span></span><br><span class="line"><span class="comment">// connectDropTarget 包裹住的 DOM 节点才能接收 drag source 组件</span></span><br><span class="line"><span class="keyword">return</span> connectDropTarget &amp;&amp; connectDropTarget(</span><br><span class="line">&lt;div style=&#123;&#123; ...style, backgroundColor &#125;&#125;&gt;</span><br><span class="line">&#123;isActive ? <span class="string">'Release to drop'</span> : <span class="string">'Drag a box here'</span>&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default Dustbin;</span></span><br></pre></td></tr></table></figure></p><h3 id="在-App-js-文件中使用-DragDropContext"><a href="#在-App-js-文件中使用-DragDropContext" class="headerlink" title="在 App.js 文件中使用 DragDropContext"></a>在 App.js 文件中使用 DragDropContext</h3><p><code>App.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; DragDropContext &#125; <span class="keyword">from</span> <span class="string">'react-dnd'</span>;</span><br><span class="line"><span class="keyword">import</span> HTMLBackend <span class="keyword">from</span> <span class="string">'react-dnd-html5-backend'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Dustbin <span class="keyword">from</span> <span class="string">'./components/Dustbin'</span>;</span><br><span class="line"><span class="keyword">import</span> Box <span class="keyword">from</span> <span class="string">'./components/Box'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 HTMLBackend 作为参数传给 DragDropContext</span></span><br><span class="line">@DragDropContext(HTMLBackend)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div style=&#123;&#123; <span class="attr">paddingLeft</span>: <span class="number">200</span>, <span class="attr">paddingTop</span>: <span class="number">50</span> &#125;&#125;&gt;</span><br><span class="line">            &lt;div style=&#123;&#123; <span class="attr">overflow</span>: <span class="string">'hidden'</span>, <span class="attr">clear</span>: <span class="string">'both'</span> &#125;&#125;&gt;</span><br><span class="line">                &lt;Box name=<span class="string">"Glass"</span> /&gt;</span><br><span class="line">                &lt;Box name=<span class="string">"Banana"</span> /&gt;</span><br><span class="line">                &lt;Box name=<span class="string">"Paper"</span> /&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;div style=&#123;&#123; overflow: 'hidden', clear: 'both' &#125;&#125;&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Dustbin /</span>&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure></p><h3 id="运行项目，查看效果"><a href="#运行项目，查看效果" class="headerlink" title="运行项目，查看效果"></a>运行项目，查看效果</h3><p>运行项目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run start</span><br></pre></td></tr></table></figure></p><p>浏览器会自动打开 <code>http://localhost:3000/</code> 窗口，此时可以操作浏览器上的 Box 组件，结合项目代码，查看效果。<br>预览效果如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-dnd/项目效果.gif" alt="预览效果" title="">                </div>                <div class="image-caption">预览效果</div>            </figure></p><hr><h2 id="六、本文-Demo-地址"><a href="#六、本文-Demo-地址" class="headerlink" title="六、本文 Demo 地址"></a>六、本文 Demo 地址</h2><p><a href="https://github.com/beichensky/ReactUtilsDemo/tree/master/react-dnd-dustbin" target="_blank" rel="noopener">react-dnd-dustbin</a></p><p><strong>欢迎 Star！谢谢！</strong></p><hr><h2 id="七、参考链接"><a href="#七、参考链接" class="headerlink" title="七、参考链接"></a>七、参考链接</h2><p><a href="http://react-dnd.github.io/react-dnd/about" target="_blank" rel="noopener">react-dnd 官方文档</a><br><a href="https://juejin.im/post/5aebbdedf265da0ba469a56f" target="_blank" rel="noopener">拖拽组件：React DnD 的使用</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文详细讲解了 react-dnd 的 API 以及用法，并且附上了可供参考的 Demo，希望能够给需要的朋友提供一下帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="React" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/React/"/>
    
    
      <category term="React" scheme="https://beichensky.github.io/tags/React/"/>
    
      <category term="react-dnd" scheme="https://beichensky.github.io/tags/react-dnd/"/>
    
      <category term="拖拽组件" scheme="https://beichensky.github.io/tags/%E6%8B%96%E6%8B%BD%E7%BB%84%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>在 create-react-app 中启用装饰器语法</title>
    <link href="https://beichensky.github.io/20190320/cra-decorators/"/>
    <id>https://beichensky.github.io/20190320/cra-decorators/</id>
    <published>2019-03-20T10:15:17.000Z</published>
    <updated>2019-08-03T09:27:33.902Z</updated>
    
    <content type="html"><![CDATA[<p>本文简单介绍了一下如何在 create-react-app 中启用装饰器语法的两种方式。</p><h2 id="方式一：暴露-create-react-app-的配置"><a href="#方式一：暴露-create-react-app-的配置" class="headerlink" title="方式一：暴露 create-react-app 的配置"></a>方式一：暴露 <code>create-react-app</code> 的配置</h2><h3 id="暴露出-create-react-app-的所有配置"><a href="#暴露出-create-react-app-的所有配置" class="headerlink" title="暴露出 create-react-app 的所有配置"></a>暴露出 <code>create-react-app</code> 的所有配置</h3><p>运行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run eject</span><br></pre></td></tr></table></figure></p><p>项目中就会展示出各种 config 配置文件。</p><h3 id="在-babel-中添加-plugins-配置"><a href="#在-babel-中添加-plugins-配置" class="headerlink" title="在 babel 中添加 plugins 配置"></a>在 <code>babel</code> 中添加 <code>plugins</code> 配置</h3><p>在 <code>package.json</code> 文件中找到 <code>babel</code> 的配置，添加如下代码即可：</p><p><code>package.json</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">"babel": &#123;</span><br><span class="line">    "presets": [</span><br><span class="line">      <span class="string">"react-app"</span></span><br><span class="line">    ],</span><br><span class="line">+    "plugins": [</span><br><span class="line">+        [</span><br><span class="line">+            "@babel/plugin-proposal-decorators",</span><br><span class="line">+            &#123; "legacy": true &#125;</span><br><span class="line">+        ]</span><br><span class="line">+    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重新运行项目，即可正常使用装饰器语法。</p><blockquote><p>create-react-app 脚手架中已经安装了 <code>@babel/plugin-proposal-decorators</code> 插件，如果是自己配置的脚手架，请先安装插件：<code>npm install @babel/plugin-proposal-decorators --save-dev</code></p></blockquote><hr><h2 id="方式二：直接在项目的-node-modules-中添加配置"><a href="#方式二：直接在项目的-node-modules-中添加配置" class="headerlink" title="方式二：直接在项目的 node-modules 中添加配置"></a>方式二：直接在项目的 <code>node-modules</code> 中添加配置</h2><p>打开项目的 <code>node_modules</code> 文件夹，找到 <code>babel-preset-react-app</code> 目录。打开目录下 <code>create.js</code> 文件。找到 <code>plugins</code> 属性配置的地方，修改如下配置即可：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-isTypeScriptEnabled &amp;&amp; [</span><br><span class="line">-    <span class="built_in">require</span>(<span class="string">'@babel/plugin-proposal-decorators'</span>).default,</span><br><span class="line">-    <span class="literal">false</span>,</span><br><span class="line">-],</span><br><span class="line"></span><br><span class="line">+[</span><br><span class="line">+    <span class="built_in">require</span>(<span class="string">'@babel/plugin-proposal-decorators'</span>).default,</span><br><span class="line">+    &#123; <span class="attr">legacy</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">+],</span><br></pre></td></tr></table></figure></p><blockquote><p>不建议使用方式二，因为一旦需要重新安装 <code>node_modules</code>， 就需要再去 <code>babel-preset-react-app</code> 里面添加一次配置。</p></blockquote><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面两种方式使用了之后，均可在项目中正常使用装饰器语法，但是使用装饰器时。可能还是会出现红线报错提示，此时在 VSCode 的配置文件中（Visual Studio Code左下角的设置按钮(或者文件&gt;首选项&gt;设置)）添加如下配置即可：</p><p><code>setting.json</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"javascript.implicitProjectConfig.experimentalDecorators": true,</span><br></pre></td></tr></table></figure></p><blockquote><p>建议使用第一种方式，虽然可能比较麻烦，需要暴露出所有的配置。<br>但是第二种方式，如果只是自己进行一些小的 Demo 测试还好。不然的话，一旦需要重新安装 <code>node_modules</code>，就需要再重新去 <code>babel-preset-react-app</code> 里面添加一次配置。</p></blockquote><hr><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p><a href="https://blog.csdn.net/ZhangYaBo_Code/article/details/83066844" target="_blank" rel="noopener">redux connect的装饰器问题</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文简单介绍了一下如何在 create-react-app 中启用装饰器语法的两种方式。&lt;/p&gt;
&lt;h2 id=&quot;方式一：暴露-create-react-app-的配置&quot;&gt;&lt;a href=&quot;#方式一：暴露-create-react-app-的配置&quot; class=&quot;heade
      
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="React" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/React/"/>
    
    
      <category term="React" scheme="https://beichensky.github.io/tags/React/"/>
    
      <category term="create-react-app" scheme="https://beichensky.github.io/tags/create-react-app/"/>
    
  </entry>
  
  <entry>
    <title>nvm 和 nrm 的安装与使用</title>
    <link href="https://beichensky.github.io/20190320/nvm-nrm-install/"/>
    <id>https://beichensky.github.io/20190320/nvm-nrm-install/</id>
    <published>2019-03-20T10:14:56.000Z</published>
    <updated>2019-08-03T09:27:33.902Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何使用 nvm 切换 node 和 npm 版本，以及如何使用 nrm 切换 npm 下载源。</p><hr><h2 id="一、NVM"><a href="#一、NVM" class="headerlink" title="一、NVM"></a>一、NVM</h2><p><code>Nvm</code> 可以切换 <code>node</code> 与 <code>npm</code> 版本，在开发不同项目时，可能会用到不同的 <code>node</code> 与 <code>npm</code> 版本，所以使用 <code>nvm</code> 可以方便的在不同 <code>node</code> 与 <code>npm</code> 版本之间进行切换。</p><h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><ul><li>在安装 Nvm 之前，先将之前安装的 node 进行卸载。否则可能会出现无法切换 node 版本的问题</li><li>将之前安装的全局插件删除掉，否则可能会导致 nvm 命令不起作用。文件目录如下<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\AppData\Roaming\npm</span><br><span class="line">C:\Users\Administrator\AppData\Roaming\npm-cache</span><br></pre></td></tr></table></figure></li></ul><h3 id="nvm-的安装"><a href="#nvm-的安装" class="headerlink" title="nvm 的安装"></a>nvm 的安装</h3><p>下载 nvm 插件，安装地址： <a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">Github： Download nvm-windows （nvm-setup.zip）</a>。</p><p>下载完成，解压文件之后，双击进行安装：</p><ul><li><ol><li>设置 <code>nvm</code> 安装目录，这里的路径可以根据自己的需要进行填写，不要包含中文名<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/nvm-nrm/第一步.png" alt="第一步" title="">                </div>                <div class="image-caption">第一步</div>            </figure></li></ol></li><li><ol start="2"><li>设置 <code>nodejs</code> 各版本安装目录。这个目录是 <code>nvm install node版本</code> 时存放 <code>nodejs</code> 的目录<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/nvm-nrm/第二步.png" alt="第二步" title="">                </div>                <div class="image-caption">第二步</div>            </figure></li></ol></li><li><ol start="3"><li>安装完成，在命令行输入：<code>nvm version</code>，查看到对应的版本号，说明 nvm 安装成功了。</li></ol></li></ul><h3 id="nvm-常用命令"><a href="#nvm-常用命令" class="headerlink" title="nvm 常用命令"></a>nvm 常用命令</h3><ul><li><code>nvm install latest</code>：安装最新的 <code>nodejs</code> 版本</li><li><code>nvm install 11.12.0</code>：安装对应的 <code>nodejs</code> 版本</li><li><code>nvm uninstall 11.12.0</code>：卸载对应的 <code>nodejs</code> 版本</li><li><code>nvm list available</code>：列出所有可用的 <code>nodejs</code> 版本</li><li><code>nvm list</code>：查看 <code>nvm</code> 列出已经安装的 <code>nodejs</code> 版本</li><li><code>nvm use 11.12.0</code>：使用对应的 <code>nodejs</code> 版本</li><li>更多命令在命令行输入 <code>nvm</code> 即可查看</li></ul><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ul><li><p>提示 nvm 不是内部或外部命令的问题</p><ul><li>将之前 npm 安装的全局包删除掉。文件目录如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Administrator\AppData\Roaming\npm</span><br><span class="line">C:\Users\Administrator\AppData\Roaming\npm-cache</span><br></pre></td></tr></table></figure></li></ul></li><li><p>nvm 切换 node 版本无效的问题</p><ul><li>卸载原来安装的 node 版本与全局安装的包</li></ul></li><li><p>nvm 下载速度慢的问题</p><ul><li>在 nvm 安装目录下找到 <code>settings.txt</code> 文件，添加下面两行代码：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root: D:\DevTools\NVM\nvm</span><br><span class="line">path: D:\DevTools\NVM\nodejs</span><br><span class="line">+ node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">+ npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h2 id="二、NRM"><a href="#二、NRM" class="headerlink" title="二、NRM"></a>二、NRM</h2><p>在使用 npm 的过程中，可能插件安装速度比较慢，我们可能会使用淘宝源对插件进行下载安装。或者在公司内部，有一些私有的插件，需要使用公司的源才可以下载。这种情况，我们就需要设置不同的源来进行下载。每次手动设置相对比较麻烦。而 nrm 可以很好的解决这个问题。</p><h3 id="nrm-的安装"><a href="#nrm-的安装" class="headerlink" title="nrm 的安装"></a>nrm 的安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 全局安装 nrm</span></span><br><span class="line">$ npm install nrm -g</span><br></pre></td></tr></table></figure><p>安装完成后，输入命令 <code>nrm ls</code>，可以看到默认已经有了 6 个源（带 * 号的为当前使用的源）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">* npm ---- https://registry.npmjs.org/</span><br><span class="line">  cnpm --- http://r.cnpmjs.org/</span><br><span class="line">  taobao - https://registry.npm.taobao.org/</span><br><span class="line">  nj ----- https://registry.nodejitsu.com/</span><br><span class="line">  npmMirror  https://skimdb.npmjs.com/registry/</span><br><span class="line">  edunpm - http://registry.enpmjs.org/</span><br></pre></td></tr></table></figure></p><p>输入 <code>nrm use taobao</code>，即切换 registry 到 taobao，即可使用淘宝的源进行插件的安装下载了。</p><h3 id="nrm-常用命令"><a href="#nrm-常用命令" class="headerlink" title="nrm 常用命令"></a>nrm 常用命令</h3><ul><li><code>nrm ls</code>              ：查看所有配置好的源以及对应名称</li><li><code>nrm add company http://npm.xxx.cn</code>：添加源，<code>company</code> 是名称，可以自行命名，后面是源的 <code>url</code> 地址</li><li><code>nrm del company</code>     ：删除源，根据名称 <code>company</code> 可以删除对应的源</li><li><code>nrm test [registry]</code> ：测试源的速度，不加对应的 <code>registry</code> 名称，测试所有源的速度，添加对应的名称，比如 <code>company</code>，就是测试 <code>company</code> 对应的源的速度</li><li><code>nrm use company</code>     ：切换源，即可使用 <code>company</code> 对应名称的源</li><li>更多命令在命令行输入 <code>nrm</code> 即可查看</li></ul><hr><h2 id="三、额外知识点"><a href="#三、额外知识点" class="headerlink" title="三、额外知识点"></a>三、额外知识点</h2><ul><li><p>安装 cnpm：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p></li><li><p>设置 npm 全局包的安装路径（如果不想自己控制路径就不需要做下面这些操作）：</p><ul><li>执行命令：<code>npm config set prefix &quot;D:\DevTools\Nvm\npm-global&quot;</code></li><li>设置环境变量：将 Path 中： <code>C:\\Users\\Administrator\\AppData\\Roaming\\npm</code> 修改为 <code>D:\\DevTools\\Nvm\\npm-global</code></li></ul></li><li><p>查看已经安装的全局包：<code>npm ls -g --depth=0</code></p></li><li><p>手动设置 npm 源</p><ul><li><code>npm config get registry</code>                                 ： 查看 npm 当前源</li><li><code>npm config set registry https://registry.npm.taobao.org/</code>：设置 npm 源为淘宝</li><li><code>npm install --registry=https://registry.npm.taobao.org</code>  ：使用特定源安装所有依赖的包</li><li><code>npm install express --registry=https://registry.npm.taobao.org</code>：使用特定源安装 express 包</li></ul></li></ul><hr><h2 id="四、参考链接"><a href="#四、参考链接" class="headerlink" title="四、参考链接"></a>四、参考链接</h2><ul><li><a href="https://segmentfault.com/a/1190000007612011" target="_blank" rel="noopener">Windows 下安装 nvm 管理 nodejs 版本</a></li><li><a href="https://segmentfault.com/a/1190000017419993" target="_blank" rel="noopener">npm源管理器nrm使用教程</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍了如何使用 nvm 切换 node 和 npm 版本，以及如何使用 nrm 切换 npm 下载源。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;一、NVM&quot;&gt;&lt;a href=&quot;#一、NVM&quot; class=&quot;headerlink&quot; title=&quot;一、NVM&quot;&gt;&lt;/a&gt;一、NVM
      
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="nvm" scheme="https://beichensky.github.io/tags/nvm/"/>
    
      <category term="nrm" scheme="https://beichensky.github.io/tags/nrm/"/>
    
      <category term="node" scheme="https://beichensky.github.io/tags/node/"/>
    
      <category term="npm" scheme="https://beichensky.github.io/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 项目迁移到 TypeScript 步骤以及遇到的问题</title>
    <link href="https://beichensky.github.io/20190315/js-project-ts/"/>
    <id>https://beichensky.github.io/20190315/js-project-ts/</id>
    <published>2019-03-15T03:13:35.000Z</published>
    <updated>2019-08-03T09:27:33.901Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲述了如何将 JavaScript 项目迁移到 TypeScript 上，以及如何在项目中添加 TypeScript 配置，编写 TypeScript 代码。</p><a id="more"></a><h2 id="一、插件安装"><a href="#一、插件安装" class="headerlink" title="一、插件安装"></a>一、插件安装</h2><p>安装项目所需插件，一般对应的模块都会有对应的 @types 插件可以使用。不知道的是否需要安装对应的 @types 插件的话，可以到 <strong><a href="https://microsoft.github.io/TypeSearch/" target="_blank" rel="noopener">TypeSearch</a></strong> 进行查找。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装项目中使用的插件</span></span><br><span class="line">$ npm install typescript ts-jest ts-loader @types/enzyme @types/jest @types/node @types/react @types/react-dom --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 tslint 相关插件</span></span><br><span class="line">$ npm install tslint tslint-config-prettier tslint-react --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 webpack 中对 typescript 支持的插件</span></span><br><span class="line">$ npm install fork-ts-checker-webpack-plugin tsconfig-paths-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure><hr><h2 id="二、添加-tsconfig-json-配置文件"><a href="#二、添加-tsconfig-json-配置文件" class="headerlink" title="二、添加 tsconfig.json 配置文件"></a>二、添加 tsconfig.json 配置文件</h2><p>在项目根目录下添加 tsconfig.json 配置文件。tsconfig.json文件中指定了用来编译这个项目的根文件和编译选项。</p><p><code>tsconfig.json</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"build/dist"</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"es5"</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [<span class="string">"es6"</span>, <span class="string">"dom"</span>],</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"allowJs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">    <span class="attr">"moduleResolution"</span>: <span class="string">"node"</span>,</span><br><span class="line">    <span class="attr">"rootDir"</span>: <span class="string">"src"</span>,</span><br><span class="line">    <span class="attr">"noImplicitReturns"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noImplicitThis"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"noImplicitAny"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"strictNullChecks"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">    <span class="string">"config"</span>,</span><br><span class="line">    <span class="string">"public"</span>,</span><br><span class="line">    <span class="string">"node_modules"</span>,</span><br><span class="line">    <span class="string">"build"</span>,</span><br><span class="line">    <span class="string">"dist"</span>,</span><br><span class="line">    <span class="string">"scripts"</span>,</span><br><span class="line">    <span class="string">"acceptance-tests"</span>,</span><br><span class="line">    <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="string">"jest"</span>,</span><br><span class="line">    <span class="string">"src/setupTests.ts"</span>,</span><br><span class="line">    <span class="string">"jest.config.js"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"types"</span>: [</span><br><span class="line">    <span class="string">"typePatches"</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再添加一个 tsconfig.prod.json 文件，用来在项目生产环境配置中使用。</p><p><code>tsconfig.prod.json</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: <span class="string">"./tsconfig.json"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>这里直接继承类 <code>tsconfig.json</code> 文件中的内容。也可以添加一些不同的配置。</p></blockquote><hr><h2 id="三、为项目添加-TsLint-配置文件"><a href="#三、为项目添加-TsLint-配置文件" class="headerlink" title="三、为项目添加 TsLint 配置文件"></a>三、为项目添加 TsLint 配置文件</h2><p>在项目根目录下添加 tslint.json 文件。tslint.json 中配置了开发过程中的规则。</p><p><code>tslint.json</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"extends"</span>: [<span class="string">"tslint:recommended"</span>, <span class="string">"tslint-react"</span>, <span class="string">"tslint-config-prettier"</span>],</span><br><span class="line">  <span class="attr">"defaultSeverity"</span>: <span class="string">"warning"</span>,</span><br><span class="line">  <span class="attr">"rules"</span>: &#123;</span><br><span class="line">    // 对象属性是否按照顺序进行编写</span><br><span class="line">    "object-literal-sort-keys": false,</span><br><span class="line">    // jsx 中是否允许使用 lambda 语法</span><br><span class="line">    "jsx-no-lambda": false,</span><br><span class="line">    // 引入模块是否需要按照字母顺序</span><br><span class="line">    "ordered-imports": false,</span><br><span class="line">    // 不允许打印 console </span><br><span class="line">    "no-console": false,</span><br><span class="line">    // 不允许隐式的依赖模块，比如引用别名中的模块</span><br><span class="line">    "no-implicit-dependencies": false,</span><br><span class="line">    // 是否必须使用 === 取代 ==</span><br><span class="line">    "triple-equals": false,</span><br><span class="line">    // 对象成员是否需要按照顺序进行编写</span><br><span class="line">    "member-ordering": false</span><br><span class="line">  &#125;,</span><br><span class="line">  "linterOptions": &#123;</span><br><span class="line">    "exclude": [</span><br><span class="line">      "config/**/*.js",</span><br><span class="line">      "webpack/**/*.js",</span><br><span class="line">      "node_modules/**/*.ts",</span><br><span class="line">      "coverage/lcov-report/*.js",</span><br><span class="line">      "src/**/*.js",</span><br><span class="line">      <span class="string">"src/**/*.jsx"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li><code>extends</code>：继承了哪些规则</li><li><code>defaultSeverity</code>：<code>TsLint</code> 严重性等级，可以是 <code>warning</code> 或是 <code>error</code></li><li><code>rules</code>：配置规则，可以修改一些默认的 <code>TsLint</code> 规则</li><li><code>linterOptions.exclude</code>：排除掉不需要进行 <code>TsLint</code> 检查的文件</li><li>更多 <code>TsLint</code> 的规则配置可以参考 <strong><a href="https://palantir.github.io/tslint/usage/configuration/" target="_blank" rel="noopener">TsLint</a></strong></li></ul><hr><h2 id="四、在-webpack-配置文件中添加-TypeScript-配置"><a href="#四、在-webpack-配置文件中添加-TypeScript-配置" class="headerlink" title="四、在 webpack 配置文件中添加 TypeScript 配置"></a>四、在 webpack 配置文件中添加 TypeScript 配置</h2><h3 id="在-webpack-开发环境中添加配置"><a href="#在-webpack-开发环境中添加配置" class="headerlink" title="在 webpack 开发环境中添加配置"></a>在 webpack 开发环境中添加配置</h3><h4 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h4><p>在 webpack 配置文件中使用插件：</p><ul><li>在 plugins 中使用 ForkTsCheckerWebpackPlugin 插件</li><li><strong>注意：</strong> 在 resolve.plugin 中使用 TsconfigPathsPlugin 插件</li></ul><p><code>webpack.config.dev.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> ForkTsCheckerWebpackPlugin = <span class="built_in">require</span>(<span class="string">'fork-ts-checker-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> TsconfigPathsPlugin = <span class="built_in">require</span>(<span class="string">'tsconfig-paths-webpack-plugin'</span>);</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ForkTsCheckerWebpackPlugin(&#123;</span><br><span class="line">            <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">            watch: path.resolve(__dirname, <span class="string">'../src'</span>),</span><br><span class="line">            tsconfig: path.resolve(__dirname, <span class="string">'../tsconfig.json'</span>),</span><br><span class="line">            tslint: path.resolve(__dirname, <span class="string">'../tslint.json'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        plugins: [</span><br><span class="line">            <span class="keyword">new</span> TsconfigPathsPlugin(&#123; <span class="attr">configFile</span>: path.resolve(__dirname, <span class="string">'../tsconfig.json'</span>) &#125;)</span><br><span class="line">        ],</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="在-webpack-中添加-TypeScript-的-rules-配置"><a href="#在-webpack-中添加-TypeScript-的-rules-配置" class="headerlink" title="在 webpack 中添加 TypeScript 的 rules 配置"></a>在 webpack 中添加 TypeScript 的 rules 配置</h4><p>使用 <code>ts-loader</code></p><p><code>webpack.config.dev.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.(ts|tsx)$/</span>,</span><br><span class="line">            include: path.resolve(__dirname, <span class="string">'../src'</span>),</span><br><span class="line">            use: [</span><br><span class="line">                &#123;</span><br><span class="line">                    loader: <span class="built_in">require</span>.resolve(<span class="string">'ts-loader'</span>),</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        <span class="comment">// disable type checker - we will use it in fork plugin</span></span><br><span class="line">                        transpileOnly: <span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        ...</span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="在-webpack-生产环境中添加配置"><a href="#在-webpack-生产环境中添加配置" class="headerlink" title="在 webpack 生产环境中添加配置"></a>在 webpack 生产环境中添加配置</h3><p>使用方式和上面 <code>在 webpack 开发环境中添加配置</code> 的方式一致。唯一不同的就是在使用插件的时候，将 <code>tsconfig.json</code> 修改为 <code>tsconfig.prod.json</code></p><p>webpack.prod.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> ForkTsCheckerWebpackPlugin(&#123;</span><br><span class="line">            <span class="keyword">async</span>: <span class="literal">false</span>,</span><br><span class="line">            watch: path.resolve(__dirname, <span class="string">'../src'</span>),</span><br><span class="line">            tsconfig: path.resolve(__dirname, <span class="string">'../tsconfig.prod.json'</span>),</span><br><span class="line">            tslint: path.resolve(__dirname, <span class="string">'../tslint.json'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        plugins: [</span><br><span class="line">            <span class="keyword">new</span> TsconfigPathsPlugin(&#123; <span class="attr">configFile</span>: path.resolve(__dirname, <span class="string">'../tsconfig.prod.json'</span>) &#125;)</span><br><span class="line">        ],</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="五、遇到的问题"><a href="#五、遇到的问题" class="headerlink" title="五、遇到的问题"></a>五、遇到的问题</h2><h3 id="装饰器使用问题"><a href="#装饰器使用问题" class="headerlink" title="装饰器使用问题"></a>装饰器使用问题</h3><p>本来配置好的装饰器，使用的好好的，配置完 <code>TypeScript</code> 之后，却发现编辑器对应文件里面报红线错误提示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Experimental support <span class="keyword">for</span> decorators is a feature that is subject to change <span class="keyword">in</span> a future release. Set the <span class="string">'experimentalDecorators'</span> option to remove this warning.</span><br></pre></td></tr></table></figure></p><p>解决办法：在根目录下的 <code>tsconfig.json</code> 文件里面添加对应配置即可</p><p><code>tsconfig.json</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="生命周期提示红线报错问题"><a href="#生命周期提示红线报错问题" class="headerlink" title="生命周期提示红线报错问题"></a>生命周期提示红线报错问题</h3><p>使用函数方式创建组件没有问题，使用类的方式创建时，生命周期函数下面都会报红线提示错误：<code>Parsing error: Unexpected token</code>。</p><p>解决办法：将 VSCode 设置中的配置项进行修改即可<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"eslint.validate": [</span><br><span class="line">    "javascript",</span><br><span class="line">    "javascriptreact",</span><br><span class="line">    "typescript",</span><br><span class="line">    // 下面这个对使用 ts 编写的 React 组件进行 ESLint 的文件检查暂时先去掉  </span><br><span class="line">    // "typescriptreact"</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p><h3 id="tsconfig-json-文件内部报错问题"><a href="#tsconfig-json-文件内部报错问题" class="headerlink" title="tsconfig.json 文件内部报错问题"></a>tsconfig.json 文件内部报错问题</h3><p>tsconfig.json 文件内部报错，第一行大括号那里就出现错误，错误提示类似下面这种：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'c:/xxx/config/dev.js'</span> is not under <span class="string">'rootDir'</span> <span class="string">'c:/xxx/src'</span>. <span class="string">'rootDir'</span> is expected to contain all <span class="built_in">source</span> files.<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">JSON schema for the TypeScript compiler's configuration file</span></span><br></pre></td></tr></table></figure></p><p>这里我 <code>tsconfig.json</code> 文件中我配置的 <code>rootDir</code> 是 <code>src</code> 目录，但是在 <code>exclude</code> 属性里，我没有将 <code>src</code> 的同级目录 <code>config</code> 给排除，所以就会提示这个错误，在 <code>tsconfig.json</code> 中添加配置即可：</p><p><code>tsconfig.json</code><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"exclude"</span>: [</span><br><span class="line">    ...</span><br><span class="line">    <span class="string">"config"</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>出现类似的问题，<strong>提示哪个目录不在 rootDir 目录下，就将哪个目录添加到 exclude 属性里。</strong></p></blockquote><h3 id="webpack-中配置的别名，在-ts-文件中不识别的问题"><a href="#webpack-中配置的别名，在-ts-文件中不识别的问题" class="headerlink" title="webpack 中配置的别名，在 ts 文件中不识别的问题"></a>webpack 中配置的别名，在 ts 文件中不识别的问题</h3><p>在 webpack 中为部分目录配置了别名，可以直接目录，会自动到对应目录下寻找模块，在 js 文件中可以正常使用，但是在 ts 文件中却会报错：<code>Cannot find module &#39;utils/xxx&#39;</code>。</p><p>解决办法：这时需要在 <code>tsconfig.json</code>文件中单独配置 <code>paths</code> 列表，对对应的路径进行映射：</p><p><code>tsconfig.json</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="attr">"baseUrl"</span>: <span class="string">"."</span>,</span><br><span class="line">        <span class="attr">"paths"</span>: &#123;</span><br><span class="line">          <span class="attr">"src/*"</span>: [</span><br><span class="line">            <span class="string">"src/*"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="attr">"utils/*"</span>: [</span><br><span class="line">            <span class="string">"src/utils/*"</span></span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样启动项目就不会再报错，但是在 ts 文件里还是会有红线报错提醒，此时还需要在 <code>tslint.json</code> 文件中添加 rules 配置：</p><p><code>tslint.json</code><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    "rules": &#123;</span><br><span class="line">        "no-implicit-dependencies": false</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="TsconfigPathsPlugin-插件位置配置错误问题"><a href="#TsconfigPathsPlugin-插件位置配置错误问题" class="headerlink" title="TsconfigPathsPlugin 插件位置配置错误问题"></a><code>TsconfigPathsPlugin</code> 插件位置配置错误问题</h3><p>TsconfigPathsPlugin 插件要配置在webpack 配置文件中 resolve 属性下的 plugins 里，否则的话会有问题。比如，直接放在了 webpack 配置文件中的 plugins 中就可能会出现两个问题：</p><ul><li><ol><li>如果 <code>tsconfig.json</code> 文件中 <code>compilerOptions</code> 属性下没有配置 <code>baseUrl</code> 属性，就会提示 <code>Found no baseUrl in tsconfig.json, not applying tsconfig-paths-webpack-plugin</code></li></ol></li><li><ol start="2"><li>然后配置 baseUrl 属性 ，配置好之后还可能会报错：`tsconfig-paths-webpack-plugin: No file system found on resolver. Please make sure you’ve placed the plugin in the correct part of the configuration. This plugin is a resolver plugin and should be placed in the resolve part of the Webpack configuration.</li></ol></li></ul><blockquote><p><strong>注意：所以 tsconfig-paths-webpack-plugin 插件的位置一定要放在 webpack 配置文件中 resolve 属性下的 plugins 里。</strong></p></blockquote><h2 id="写在后面"><a href="#写在后面" class="headerlink" title="写在后面"></a>写在后面</h2><p>这就是目前在项目中添加的部分 <code>TypeScript</code> 以及 <code>TsLint</code> 配置。此时已经可以在项目中正常编写 <code>TypeScript</code> 代码了。</p><p>如果大家在项目迁移的过程中如果遇到了别的问题，也可以拿出来交流探讨一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲述了如何将 JavaScript 项目迁移到 TypeScript 上，以及如何在项目中添加 TypeScript 配置，编写 TypeScript 代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="TypeScript" scheme="https://beichensky.github.io/tags/TypeScript/"/>
    
      <category term="前端开发" scheme="https://beichensky.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用 TypeScript + React + Redux 进行项目开发（入门篇，附源码）</title>
    <link href="https://beichensky.github.io/20190308/cra-ts-react/"/>
    <id>https://beichensky.github.io/20190308/cra-ts-react/</id>
    <published>2019-03-08T02:48:10.000Z</published>
    <updated>2019-08-03T09:27:33.900Z</updated>
    
    <content type="html"><![CDATA[<p>本文详细介绍了如何使用 Create-React-App 编写 TypeScript + React 项目</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于 TypeScript + React 开发，MicroSoft 编写了一个 TypeScript-React-Starter 的例子：<a href="https://github.com/Microsoft/TypeScript-Node-Starter" target="_blank" rel="noopener">Github 地址</a>。有需要的朋友可以去看一下。</p><p>我自己也看了一下，文档说明讲解的很好，但是 Demo 拉下来却无法正常运行，一直报错。所以我自己使用 TypeScript + React + Redux 写了 Demo，作为范例来用一下。</p><h3 id="本文-Demo-地址"><a href="#本文-Demo-地址" class="headerlink" title="本文 Demo 地址"></a>本文 Demo 地址</h3><ul><li><p>本文 Counter Demo 是一个简易的例子，可以用来作为入门参考：<strong><a href="https://github.com/beichensky/typescript-react-example/tree/master/typescript-react-app" target="_blank" rel="noopener">Counter Demo</a></strong></p></li><li><p>另外还写了一个 TodoList 的例子，稍微更有难度一些，代码量和组件更多更详细。有需要的朋友也可以参考一下：<strong><a href="https://github.com/beichensky/typescript-react-example/tree/master/typescript-react-todos" target="_blank" rel="noopener">TodoList Demo</a></strong></p></li></ul><p><strong>建议：</strong> 可以先下载 Counter Demo 后，运行项目，查看运行效果，然后对照本文进行阅读，效果更佳！</p><p><strong>使用 <code>TypeScript</code> 编写 <code>React</code> 需要注意的规范</strong><br>必须遵守的要求：</p><ul><li>所有用到 <code>jsx</code> 语法的文件都需要以 <code>tsx</code> 后缀命名</li><li>使用组件声明时的 <code>Component&lt;P, S&gt;</code> 泛型参数声明，来代替 <code>PropTypes</code>进行类型校验</li></ul><p>额外的代码规范：</p><ul><li>全局变量或者自定义的 <code>window</code> 对象属性，统一在项目根下的 <code>global.d.ts</code> 中进行声明定义</li><li>对于项目中常用到的接口数据对象，最好在 <code>types/</code> 目录下定义好其结构化类型声明</li></ul><h2 id="安装-Create-React-App"><a href="#安装-Create-React-App" class="headerlink" title="安装 Create-React-App"></a>安装 Create-React-App</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install create-react-app -g</span><br></pre></td></tr></table></figure><hr><h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><h3 id="先创建一个新的项目，这里我们命名为-typescript-react-app"><a href="#先创建一个新的项目，这里我们命名为-typescript-react-app" class="headerlink" title="先创建一个新的项目，这里我们命名为 typescript-react-app"></a>先创建一个新的项目，这里我们命名为 typescript-react-app</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ create-react-app typescript-react-app --scripts-version=react-scripts-ts</span><br></pre></td></tr></table></figure><p><a href="https://www.npmjs.com/package/react-scripts-ts" target="_blank" rel="noopener">react-scripts-ts</a>是一系列适配器，它利用标准的create-react-app工程管道并把TypeScript混入进来。</p><p>项目创建成功后，此时项目结构如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">my-app/</span><br><span class="line">├─ node_modules/</span><br><span class="line">├─ public/</span><br><span class="line">├─ src/</span><br><span class="line">│  └─ ...</span><br><span class="line">├─ .gitignore</span><br><span class="line">├─ images.d.ts</span><br><span class="line">├─ package.json</span><br><span class="line">├─ README.md</span><br><span class="line">├─ tsconfig.json</span><br><span class="line">├─ tsconfig.prod.json</span><br><span class="line">├─ tsconfig.test.json</span><br><span class="line">├─ tslint.json</span><br><span class="line">└─ yarn.lock</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 注意：</span></span><br><span class="line"></span><br><span class="line">  - tsconfig.json包含了工程里TypeScript特定的选项。</span><br><span class="line">  - tslint.json保存了要使用的代码检查器的设置，TSLint。</span><br><span class="line">  - package.json包含了依赖，还有一些命令的快捷方式，如测试命令，预览命令和发布应用的命令。</span><br><span class="line">  - public包含了静态资源如HTML页面或图片。除了index.html文件外，其它的文件都可以删除。</span><br><span class="line">  - src包含了TypeScript和CSS源码。index.tsx是强制使用的入口文件。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 运行项目</span></span><br><span class="line">先运行项目，看看是否能够正常启动，如果可以，说明项目创建没有问题。</span><br><span class="line">运行命令：</span><br><span class="line">``` bash</span><br><span class="line">$ npm run start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者运行 yarn run start</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="React-配合-TypeScript-的基本使用"><a href="#React-配合-TypeScript-的基本使用" class="headerlink" title="React 配合 TypeScript 的基本使用"></a>React 配合 TypeScript 的基本使用</h2><p>在当前项目中，可以看到 index.tsx 和 App.jsx 文件中已经使用了 TypeScript，我们现在自己来用 TypeScript 编写一个 React 组件吧。</p><h3 id="定义一个-Counter-组件"><a href="#定义一个-Counter-组件" class="headerlink" title="定义一个 Counter 组件"></a>定义一个 Counter 组件</h3><p>我们在 src 下创建一个 components 目录，新增 Counter 组件：</p><p>Counter.tsx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建类型接口</span><br><span class="line">export interface Iprops &#123;</span><br><span class="line">    value: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用接口代替 PropTypes 进行类型校验</span><br><span class="line">const Counter = (&#123; value &#125;: Iprops) =&gt; &#123;</span><br><span class="line">    return &lt;p&gt;Clicked: &#123; value &#125; times&lt;/p&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Counter;</span><br></pre></td></tr></table></figure></p><h3 id="在-App-tsx-中引用-Counter-组件并展示"><a href="#在-App-tsx-中引用-Counter-组件并展示" class="headerlink" title="在 App.tsx 中引用 Counter 组件并展示"></a>在 App.tsx 中引用 Counter 组件并展示</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line">import &apos;./App.css&apos;;</span><br><span class="line"></span><br><span class="line">import Counter from &apos;./components/Counter.jsx&apos;;</span><br><span class="line">// import logo from &apos;./logo.svg&apos;;</span><br><span class="line"></span><br><span class="line">class App extends React.Component &#123;</span><br><span class="line">  public render() &#123;</span><br><span class="line">    return (</span><br><span class="line">      &lt;div className=&quot;App&quot;&gt;</span><br><span class="line">        &lt;Counter value=&#123; 0 &#125; /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default App;</span><br></pre></td></tr></table></figure><p>运行项目：<code>npm run start</code>，可以看到浏览器中展示出了 <code>Clicked: 0 times</code>，说明我们第一个 Counter 组件已经编写并使用成功了。</p><h3 id="使用类的方式定义-Counter-组件"><a href="#使用类的方式定义-Counter-组件" class="headerlink" title="使用类的方式定义 Counter 组件"></a>使用类的方式定义 Counter 组件</h3><p>刚才是使用函数组件的方式定义的 Counter 组件，现在我们使用类的方式来改写一下。两种方式都试一试：</p><p>Counter.tsx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建类型接口</span><br><span class="line">export interface IProps &#123;</span><br><span class="line">    value: number</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用接口代替 PropTypes 进行类型校验</span><br><span class="line">export default class Counter extends React.PureComponent&lt;IProps&gt; &#123;</span><br><span class="line">    public render() &#123;</span><br><span class="line">        return &lt;p&gt;Clicked: &#123; this.props.value &#125; times&lt;/p&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="进阶：在项目中配合-Redux-进行使用"><a href="#进阶：在项目中配合-Redux-进行使用" class="headerlink" title="进阶：在项目中配合 Redux 进行使用"></a>进阶：在项目中配合 Redux 进行使用</h2><h3 id="安装项目需要的插件"><a href="#安装项目需要的插件" class="headerlink" title="安装项目需要的插件"></a>安装项目需要的插件</h3><p>安装redux和react-redux以及它们的类型文件做为依赖。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -S redux react-redux @types/react-redux</span><br></pre></td></tr></table></figure></p><p>这里我们不需要安装@types/redux，因为Redux已经自带了声明文件（.d.ts文件）。</p><h3 id="定义应用的状态-State"><a href="#定义应用的状态-State" class="headerlink" title="定义应用的状态 State"></a>定义应用的状态 State</h3><p>一般会将常用的结构类型存放到 /types 目录下。所以我们在 src 目录下新建 types 目录。<br>此时项目中只有一个 state，就是 Counter 中的点击次数，所以就没有使用借口来作为约束，而是直接使用了 type。</p><p>type/index.tsx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 定义 State 结构类型</span><br><span class="line">export type StoreState = number;</span><br></pre></td></tr></table></figure></p><h3 id="添加-actions"><a href="#添加-actions" class="headerlink" title="添加 actions"></a>添加 actions</h3><p>在 src 下创建 constants 目录，在 index.tsx 文件中添加需要响应的消息类型</p><p>constants/index.tsx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 定义增加 state 类型常量</span><br><span class="line">export const INCREMENT = &quot;INCREMENT&quot;;</span><br><span class="line">export type INCREMENT = typeof INCREMENT;</span><br><span class="line"></span><br><span class="line">// 定义减少 state 类型常量</span><br><span class="line">export const DECREMENT = &quot;DECREMENT&quot;;</span><br><span class="line">export type DECREMENT = typeof DECREMENT;</span><br></pre></td></tr></table></figure></p><p>这里的const/type模式允许我们以容易访问和重构的方式使用TypeScript的字符串字面量类型。<br>接下来，我们创建一些 actions 以及创建这些 actions 的函数，src/actions/index.tsx。</p><p>actions/index.tsx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">export interface IINCREMENTAction &#123;</span><br><span class="line">    type: INCREMENT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export interface IDECREMENTAction &#123;</span><br><span class="line">    type: DECREMENT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义 modifyAction 类型，包含 IINCREMENTAction 和 IDECREMENTAction 接口类型</span><br><span class="line">export type ModifyAction = IINCREMENTAction | IDECREMENTAction;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 增加 state 次数的方法</span><br><span class="line">export const increment = (): IINCREMENTAction =&gt; (&#123;</span><br><span class="line">    type: INCREMENT,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 减少 state 次数的方法</span><br><span class="line">export const decrement = (): IDECREMENTAction =&gt; (&#123;</span><br><span class="line">    type: DECREMENT</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><code>actions/index.tsx</code> 中定义了两个类型，分别负责添加和减少操作的行为。我们还定义了一个类型（<code>ModifyAction</code>），它描述了哪些 <code>action</code> 是可以增加或减少的。 最后，我们定义了两个函数用来创建实际的 <code>actions</code>。</p><h3 id="添加-reducer"><a href="#添加-reducer" class="headerlink" title="添加 reducer"></a>添加 reducer</h3><p>我们的reducer将放在src/reducers/index.tsx文件里。 它的功能是保证增加操作会让 <code>times</code> 加1，减少操作则要将 <code>times</code> 减1。</p><p>reducers/index.tsx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; ModifyAction &#125; from &apos;../actions&apos;;</span><br><span class="line">import &#123; DECREMENT, INCREMENT &#125; from &apos;../constants&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 处理并返回 state </span><br><span class="line">export default (state = 0, action: ModifyAction): number =&gt; &#123;</span><br><span class="line">    switch (action.type) &#123;</span><br><span class="line">      case INCREMENT:</span><br><span class="line">        return state + 1</span><br><span class="line">      case DECREMENT:</span><br><span class="line">        return state - 1</span><br><span class="line">      default:</span><br><span class="line">        return state</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="创建容器组件"><a href="#创建容器组件" class="headerlink" title="创建容器组件"></a>创建容器组件</h3><p>之前我们已经使用了 Counter 组件，但是这个组件是一个纯组件，此时我们需要一个组件将 Counter 和 数据连接起来。我们先修改一下原先的 Counter 组件，在其中添加一些操作按钮</p><p>components/Counter.tsx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 创建类型接口</span><br><span class="line">export interface IProps &#123;</span><br><span class="line">    value: number,</span><br><span class="line">    onIncrement: () =&gt; void,</span><br><span class="line">    onDecrement: () =&gt; void</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用接口代替 PropTypes 进行类型校验</span><br><span class="line">export default class Counter extends React.PureComponent&lt;IProps&gt; &#123;</span><br><span class="line">    public render() &#123;</span><br><span class="line">        const &#123; value, onIncrement, onDecrement &#125; = this.props;</span><br><span class="line">        return (</span><br><span class="line">            &lt;p&gt;</span><br><span class="line">                Clicked: &#123; value &#125; times</span><br><span class="line">                &lt;br /&gt;</span><br><span class="line">                &lt;br /&gt;</span><br><span class="line">                &lt;button onClick=&#123; onIncrement &#125; style=&#123;&#123; marginRight: 20 &#125;&#125;&gt; +  &lt;/button&gt;</span><br><span class="line">                &lt;button onClick=&#123; onDecrement &#125;&gt; - &lt;/button&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后我们再创建一个 <code>container</code> 目录，用来存放需要与数据交互的组件，新建 <code>CounterCon.tsx</code> 文件.</p><p>两个关键点是初始的 <code>Counter</code> 组件和 <code>react-redux</code> 的 <code>connect</code> 函数。 <code>connect</code> 可以将我们的 <code>Counter</code> 组件转换成一个容器，通过以下两个函数：</p><ul><li>mapStateToProps将当前store里的数据以我们的组件需要的形式传递到组件。</li><li>mapDispatchToProps利用dispatch函数，创建回调props将actions送到store。</li></ul><p>container/CounterCon.tsx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import &#123; connect &#125; from &apos;react-redux&apos;;</span><br><span class="line">import &#123; Dispatch &#125; from &apos;redux&apos;;</span><br><span class="line"></span><br><span class="line">import &#123; decrement, increment &#125; from &apos;../actions&apos;;</span><br><span class="line">import Counter from &apos;../components/Counter&apos;;</span><br><span class="line">import &#123; StoreState &#125; from &apos;../types&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 将 reducer 中的状态插入到组件的 props 中</span><br><span class="line">const mapStateToProps = (state: StoreState): &#123; value: number &#125; =&gt; (&#123;</span><br><span class="line">    value: state</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 将 对应action 插入到组件的 props 中</span><br><span class="line">const mapDispatchToProps = (dispatch: Dispatch) =&gt; (&#123;</span><br><span class="line">    onDecrement: () =&gt; dispatch(decrement()),</span><br><span class="line">    onIncrement: () =&gt; dispatch(increment())</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 使用 connect 高阶组件对 Counter 进行包裹</span><br><span class="line">export default connect(mapStateToProps, mapDispatchToProps)(Counter);</span><br></pre></td></tr></table></figure></p><h3 id="创建-store"><a href="#创建-store" class="headerlink" title="创建 store"></a>创建 store</h3><p>让我们回到src/index.tsx。 要把所有的东西合到一起，我们需要创建一个带初始状态的store，并用我们所有的reducers来设置它。<br>并且使用 react-redux 的 Provider 将 props 和 容器连接起来</p><p>index.tsx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import * as React from &apos;react&apos;;</span><br><span class="line">import * as ReactDOM from &apos;react-dom&apos;;</span><br><span class="line">import &#123; Provider &#125; from &apos;react-redux&apos;;</span><br><span class="line">import &#123; createStore &#125; from &apos;redux&apos;;</span><br><span class="line"></span><br><span class="line">import App from &apos;./App&apos;;</span><br><span class="line">import &apos;./index.css&apos;;</span><br><span class="line">import reducer from &apos;./reducer&apos;; </span><br><span class="line">import registerServiceWorker from &apos;./registerServiceWorker&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 1、创建 store</span><br><span class="line">const store = createStore(reducer);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    // 2、然后使用react-redux的Provider将props与容器连通起来</span><br><span class="line">    &lt;Provider store=&#123; store &#125;&gt;</span><br><span class="line">        &lt;App /&gt;</span><br><span class="line">    &lt;/Provider&gt; ,</span><br><span class="line">    document.getElementById(&apos;root&apos;) as HTMLElement</span><br><span class="line">);</span><br><span class="line">registerServiceWorker();</span><br></pre></td></tr></table></figure></p><p>回到我们的 App.jsx 文件中，之前我们引用的是 components 中的 Counter 组件，但是此时我们需要使用的是与数据有交互的 CounterCon 组件。改写如下：</p><p>App.jsx<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入 container 组件 CountCon</span></span><br><span class="line"><span class="keyword">import</span> CountCon <span class="keyword">from</span> <span class="string">'./container/CountCon'</span>;</span><br><span class="line"><span class="comment">// import logo from './logo.svg';</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  public render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;CountCon /&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default App;</span></span><br></pre></td></tr></table></figure></p><p>注意，此时 <code>CountCon</code> 不再需要 <code>props</code> 了，因为我们使用了 <code>connect</code> 函数为包裹起来的 <code>Hello</code> 组件的 <code>props</code> 适配了应用的状态。</p><p>此时，运行项目，点击 + 或者 - 按钮，即可看到 <code>times</code> 的次数会发生变化。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，对于使用 <code>TypeScript</code> 编写 <code>React</code> 应用应该有了一定的了解。其实写法也比较固定，刚接触的话可能有些地方容易出现问题，多写几个组件之后，应该就没什么问题了。<br>在编写项目的过程中，<code>create-react-app</code> 自带的 <code>tslint</code> 可能要求比较严严格，比如：</p><ul><li>在标签里不允许使用 lambda 表达式，在 <code>tslint.json</code> 文件 <code>rules</code> 属性中添加：<code>&quot;jsx-no-lambda&quot;: false</code> 即可</li><li>在导入模块时，必须按照字母顺序导入，在 <code>tslint.json</code> 文件 <code>rules</code> 属性中添加：”<code>ordered-imports&quot;: false</code> 即可</li></ul><p>还有很多别的配置，有需要的话，可以查看文档：<a href="https://palantir.github.io/tslint/rules/" target="_blank" rel="noopener">TSLint core rules</a>。</p><hr><h2 id="本文-Demo-地址-1"><a href="#本文-Demo-地址-1" class="headerlink" title="本文 Demo 地址"></a>本文 Demo 地址</h2><ul><li><p>本文 <code>Counter Demo</code> 是一个简易的例子，可以用来作为入门参考：<strong><a href="https://github.com/beichensky/typescript-react-example/tree/master/typescript-react-app" target="_blank" rel="noopener">Counter Demo</a></strong></p></li><li><p>另外还写了一个 <code>TodoList</code> 的例子，稍微更有难度一些，代码量和组件更多更详细。有需要的朋友也可以参考一下：<strong><a href="https://github.com/beichensky/typescript-react-example/tree/master/typescript-react-todos" target="_blank" rel="noopener">TodoList Demo</a></strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文详细介绍了如何使用 Create-React-App 编写 TypeScript + React 项目&lt;/p&gt;
    
    </summary>
    
    
      <category term="TypeScript" scheme="https://beichensky.github.io/tags/TypeScript/"/>
    
      <category term="Redux" scheme="https://beichensky.github.io/tags/Redux/"/>
    
      <category term="React" scheme="https://beichensky.github.io/tags/React/"/>
    
      <category term="前端开发" scheme="https://beichensky.github.io/tags/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>使用 happypack 提升 Webpack 项目构建速度</title>
    <link href="https://beichensky.github.io/20190221/webpack-happypack/"/>
    <id>https://beichensky.github.io/20190221/webpack-happypack/</id>
    <published>2019-02-21T02:58:55.000Z</published>
    <updated>2019-08-03T09:27:33.899Z</updated>
    
    <content type="html"><![CDATA[<p>本文简单介绍了 Happypack 的简单使用，不了解的同学可以进来看一看。也许会有所帮助。</p><hr><h2 id="Happypack-作用"><a href="#Happypack-作用" class="headerlink" title="Happypack 作用"></a>Happypack 作用</h2><p>在使用 Webpack 对项目进行构建时，会对大量文件进行解析和处理。当文件数量变多之后，Webpack 构件速度就会变慢。由于运行在 Node.js 之上的 Webpack 是单线程模型的，所以 Webpack 需要处理的任务要一个一个进行操作。</p><p>而 Happypack 的作用就是将文件解析任务分解成多个子进程并发执行。子进程处理完任务后再将结果发送给主进程。所以可以大大提升 Webpack 的项目构件速度</p><blockquote><p>由于 JavaScript 是单线程模型，要想发挥多核 CPU 的能力，只能通过多进程去实现，而无法通过多线程实现。</p></blockquote><p>本文项目代码地址：<strong><a href="https://github.com/beichensky/webpack-demo/tree/master/webpack-happypack-demo" target="_blank" rel="noopener">webpack-happypack-demo</a></strong></p><p>欢迎 Star！</p><hr><h2 id="Happypack-的使用"><a href="#Happypack-的使用" class="headerlink" title="Happypack 的使用"></a>Happypack 的使用</h2><p>Happypack 只是作用在 loader 上，使用多个进程同时对文件进行编译。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install happypack --save-dev</span><br></pre></td></tr></table></figure><h3 id="使用（三步操作即可完成）"><a href="#使用（三步操作即可完成）" class="headerlink" title="使用（三步操作即可完成）"></a>使用（三步操作即可完成）</h3><h4 id="一、安装完成之后引入-HappyPack"><a href="#一、安装完成之后引入-HappyPack" class="headerlink" title="一、安装完成之后引入 HappyPack"></a>一、安装完成之后引入 HappyPack</h4><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="二、将常用的-loader-替换为-happypack-loader"><a href="#二、将常用的-loader-替换为-happypack-loader" class="headerlink" title="二、将常用的 loader 替换为 happypack/loader"></a>二、将常用的 <code>loader</code> 替换为 <code>happypack/loader</code></h4><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="comment">// use: ['babel-loader?cacheDirectory'] 之前是使用这种方式直接使用 loader</span></span><br><span class="line">            <span class="comment">// 现在用下面的方式替换成 happypack/loader，并使用 id 指定创建的 HappyPack 插件</span></span><br><span class="line">            use: [<span class="string">'happypack/loader?id=babel'</span>],</span><br><span class="line">            <span class="comment">// 排除 node_modules 目录下的文件</span></span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="三、创建-HappyPack-插件"><a href="#三、创建-HappyPack-插件" class="headerlink" title="三、创建 HappyPack 插件"></a>三、创建 HappyPack 插件</h4><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HappyPack = <span class="built_in">require</span>(<span class="string">'happypack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">            <span class="comment">// use: ['babel-loader?cacheDirectory'] 之前是使用这种方式直接使用 loader</span></span><br><span class="line">            <span class="comment">// 现在用下面的方式替换成 happypack/loader，并使用 id 指定创建的 HappyPack 插件</span></span><br><span class="line">            use: [<span class="string">'happypack/loader?id=babel'</span>],</span><br><span class="line">            <span class="comment">// 排除 node_modules 目录下的文件</span></span><br><span class="line">            exclude: <span class="regexp">/node_modules/</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        ...,</span><br><span class="line">        <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 必须配置</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="comment">// id 标识符，要和 rules 中指定的 id 对应起来</span></span><br><span class="line">            id: <span class="string">'babel'</span>,</span><br><span class="line">            <span class="comment">// 需要使用的 loader，用法和 rules 中 Loader 配置一样</span></span><br><span class="line">            <span class="comment">// 可以直接是字符串，也可以是对象形式</span></span><br><span class="line">            loaders: [<span class="string">'babel-loader?cacheDirectory'</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样 Happypack 的使用就配置完了，运行项目，可以看到控制台打印如下提示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Happy[babel]: Version: 5.0.1. Threads: 3</span><br><span class="line">Happy[babel]: All <span class="built_in">set</span>; signaling webpack to proceed.</span><br></pre></td></tr></table></figure></p><p>说明配置生效了。</p><h3 id="Happypack-示例"><a href="#Happypack-示例" class="headerlink" title="Happypack 示例"></a><code>Happypack</code> 示例</h3><h4 id="使用单个-loader-时"><a href="#使用单个-loader-时" class="headerlink" title="使用单个 loader 时"></a>使用单个 <code>loader</code> 时</h4><p>上面的使用中就是单个 loader 时的配置，这里再写一次</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">exports.module = &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/.js$/</span>,</span><br><span class="line">            use: <span class="string">'happypack/loader?id=babel'</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.plugins = [</span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">        id: <span class="string">'babel'</span>,</span><br><span class="line">        loaders: [ <span class="string">'babel-loader?cacheDirectory'</span> ]</span><br><span class="line">    &#125;);</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="使用多个-loader-时"><a href="#使用多个-loader-时" class="headerlink" title="使用多个 loader 时"></a>使用多个 <code>loader</code> 时</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">exports.module = &#123;</span><br><span class="line">    rules: [</span><br><span class="line">        &#123;</span><br><span class="line">            test: <span class="regexp">/\.(css|less)$/</span>,</span><br><span class="line">            use: <span class="string">'happypack/loader?id=styles'</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">exports.plugins = [</span><br><span class="line">    <span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">        id: <span class="string">'styles'</span>,</span><br><span class="line">        loaders: [ <span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'less-loader'</span> ]</span><br><span class="line">    &#125;);</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="Happypack-配置项"><a href="#Happypack-配置项" class="headerlink" title="Happypack 配置项"></a><code>Happypack</code> 配置项</h3><ul><li><p><code>id</code>: <code>String</code>类型，对于 <code>happypack</code> 来说唯一的 id 标识，用来关联 <code>module.rules</code> 中的 <code>happypack/loader</code></p></li><li><p><code>loaders</code>: <code>Array</code>类型，设置各种 <code>loader</code> 配置，与  <code>module.rules</code> 中 <code>loader</code> 的配置用法一样</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无配置时，可直接使用字符串形式</span></span><br><span class="line"><span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    id: <span class="string">'babel'</span>,</span><br><span class="line">    loaders: [<span class="string">'babel-loader?cacheDirectory'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 有配置项时，可以使用对象形式</span></span><br><span class="line"><span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    id: <span class="string">'babel'</span>,</span><br><span class="line">    loaders: [</span><br><span class="line">        &#123;</span><br><span class="line">            loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">                cacheDirectory: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>threads</code>: <code>Number</code>类型，指示对应 loader 编译源文件时同时使用的进程数，默认是 3</p></li><li><p><code>threadPool</code>: <code>HappyThreadPool</code>对象，代表共享进程池，即多个 HappyPack 实例都使用同一个共享进程池中的子进程去处理任务，以防止资源占用过多</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个 HappyThreadPool，作为所有 loader 共用的线程池</span></span><br><span class="line"><span class="keyword">const</span> happyThreadPool = HappyPack.ThreadPool(&#123; <span class="attr">size</span>: <span class="number">5</span> &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="keyword">new</span> HappyPack(&#123;</span><br><span class="line">    id: <span class="string">'babel'</span>,</span><br><span class="line">    loaders: [</span><br><span class="line">        &#123;</span><br><span class="line">            loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">                cacheDirectory: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    threadPool: happyThreadPool</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>verbose</code>: 是否允许 <code>happypack</code> 输出日志，默认是 <code>true</code></p></li><li><p><code>verboseWhenProfiling</code>: 是否允许 <code>happypack</code> 在运行 <code>webpack --profile</code> 时输出日志，默认是 <code>false</code></p></li><li><p><code>debug</code>: 是否允许 <code>happypack</code> 打印 log 分析信息，默认是 <code>false</code></p></li></ul><hr><h2 id="个人总结"><a href="#个人总结" class="headerlink" title="个人总结"></a>个人总结</h2><blockquote><p>个人的一点小总结，不足以作为参考依据</p></blockquote><ul><li><p>在测试 Demo 或者小型项目中，使用 <code>happypack</code> 对项目构建速度的提升不明显，甚至会增加项目的构建速度</p></li><li><p>在比较复杂的大中型项目中，使用 <code>happypack</code> 才能看到比较明显的构建速度提升</p></li><li><p>因此，在使用 <code>happypack</code> 时请根据具体情况进行选择，如果反而延长了项目的构建速度，就没有必要使用 <code>happypack</code></p></li></ul><hr><h2 id="本文-Demo-地址"><a href="#本文-Demo-地址" class="headerlink" title="本文 Demo 地址"></a>本文 Demo 地址</h2><p>本文项目代码地址：<strong><a href="https://github.com/beichensky/webpack-demo/tree/master/webpack-happypack-demo" target="_blank" rel="noopener">webpack-happypack-demo</a></strong></p><p>欢迎 Star！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文简单介绍了 Happypack 的简单使用，不了解的同学可以进来看一看。也许会有所帮助。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;Happypack-作用&quot;&gt;&lt;a href=&quot;#Happypack-作用&quot; class=&quot;headerlink&quot; title=&quot;Happypack
      
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Webpack" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Webpack/"/>
    
    
      <category term="Webpack" scheme="https://beichensky.github.io/tags/Webpack/"/>
    
      <category term="Externals" scheme="https://beichensky.github.io/tags/Externals/"/>
    
  </entry>
  
  <entry>
    <title>使用 Webpack 的 DllPlugin 提升项目构建速度</title>
    <link href="https://beichensky.github.io/20190215/dllplugin/"/>
    <id>https://beichensky.github.io/20190215/dllplugin/</id>
    <published>2019-02-15T08:07:40.000Z</published>
    <updated>2019-02-17T03:48:50.877Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了 Webpack 中 DllPlugin 插件的使用，以及配合使用 AddAssetHtmlPlugin 将构建好的 JS 文件插入到 html 页面中。</p><a id="more"></a><h2 id="本文-Demo-地址"><a href="#本文-Demo-地址" class="headerlink" title="本文 Demo 地址"></a>本文 Demo 地址</h2><p>本文项目代码位置：<strong><a href="https://github.com/beichensky/webpack-demo/tree/master/webpack-dll-demo" target="_blank" rel="noopener">源码地址</a></strong><br>欢迎 Star！</p><hr><h2 id="DLLPlugin-和-DllReferencePlugin-简介"><a href="#DLLPlugin-和-DllReferencePlugin-简介" class="headerlink" title="DLLPlugin 和 DllReferencePlugin 简介"></a>DLLPlugin 和 DllReferencePlugin 简介</h2><p>DLLPlugin 就是将包含大量复用模块且不会频繁更新的库进行编译，只需要编译一次，编译完成后存在指定的文件（这里可以称为动态链接库）中。在之后的构建过程中不会再对这些模块进行编译，而是直接使用 DllReferencePlugin 来引用动态链接库的代码。因此可以大大提高构建速度。一般会对常用的第三方模块使用这种方式，例如 react、react-dom、lodash 等等。只要这些模块不升级更新，这些动态链接库就不需要重新编译。</p><hr><h2 id="在-Webpack-中进行使用"><a href="#在-Webpack-中进行使用" class="headerlink" title="在 Webpack 中进行使用"></a>在 Webpack 中进行使用</h2><h3 id="需要插件"><a href="#需要插件" class="headerlink" title="需要插件"></a>需要插件</h3><p>Webpack 已经内置了对动态链接库的支持，需要通过两个内置插件的配合使用。它们分别是：</p><ul><li>DllPlugin 插件：用于打包出一个个单独的动态链接库文件</li><li>DllReferencePlugin 插件：用于在主配置文件中去引入 DllPlugin 插件打包好的动态链接库文件</li></ul><h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><h4 id="找一个空文件夹，打开命令行，执行命令"><a href="#找一个空文件夹，打开命令行，执行命令" class="headerlink" title="找一个空文件夹，打开命令行，执行命令"></a>找一个空文件夹，打开命令行，执行命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建项目目录</span></span><br><span class="line">$ mkdir webpack-dll-demo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化 package.json 文件</span></span><br><span class="line">$ npm init -y </span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 src 文件夹</span></span><br><span class="line">$ mkdir src</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 public 文件夹</span></span><br><span class="line">$ mkdir public</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装需要用到的插件</span></span><br><span class="line">$ npm install webpack webpack-cli html-webpacl-plugin clean-webpacl-plugin friendly-errors-webpack-plugin -D</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 lodash 插件，用于演示 DllPlugin 用法</span></span><br><span class="line">$ npm install lodash</span><br></pre></td></tr></table></figure><h4 id="在-public-目录下创建-index-html-文件"><a href="#在-public-目录下创建-index-html-文件" class="headerlink" title="在 public 目录下创建 index.html 文件"></a>在 public 目录下创建 index.html 文件</h4><p>index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpak DllPlugin 的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="在-src-目录下创建-index-js-文件"><a href="#在-src-目录下创建-index-js-文件" class="headerlink" title="在 src 目录下创建 index.js 文件"></a>在 src 目录下创建 index.js 文件</h4><p>index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; join &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createSpan</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> element = <span class="built_in">document</span>.createElement(<span class="string">'span'</span>);</span><br><span class="line">    element.innerHTML = join([<span class="string">'Hello'</span>, <span class="string">'DllPlugin'</span>], <span class="string">' , '</span>);</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#root'</span>).appendChild(createSpan());</span><br></pre></td></tr></table></figure></p><h4 id="当前项目目录结构"><a href="#当前项目目录结构" class="headerlink" title="当前项目目录结构"></a>当前项目目录结构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">webpack-prod-demo</span><br><span class="line">|- /public</span><br><span class="line">  |- index.html</span><br><span class="line">|- /src</span><br><span class="line">  |- index.js</span><br><span class="line">|- package.json</span><br></pre></td></tr></table></figure><h3 id="使用-DllPlugin-和-DllReferencePlugin（分为三步）"><a href="#使用-DllPlugin-和-DllReferencePlugin（分为三步）" class="headerlink" title="使用 DllPlugin 和 DllReferencePlugin（分为三步）"></a>使用 DllPlugin 和 DllReferencePlugin（分为三步）</h3><h4 id="一、先编写一个配置文件专门用来编译生成动态链接库（使用-DllPlugin）"><a href="#一、先编写一个配置文件专门用来编译生成动态链接库（使用-DllPlugin）" class="headerlink" title="一、先编写一个配置文件专门用来编译生成动态链接库（使用 DllPlugin）"></a>一、先编写一个配置文件专门用来编译生成动态链接库（使用 DllPlugin）</h4><p>webpack_dll.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> CleanWebpaclPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> FirendlyErrorePlugin = <span class="built_in">require</span>(<span class="string">'friendly-errors-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    entry: &#123;</span><br><span class="line">        <span class="comment">// 将 lodash 模块作为入口编译成动态链接库</span></span><br><span class="line">        lodash: [<span class="string">'lodash'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">// 指定生成文件所在目录</span></span><br><span class="line">        <span class="comment">// 由于每次打包生产环境时会清空 dist 文件夹，因此这里我将它们存放在了 public 文件夹下</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'public/vendor'</span>),</span><br><span class="line">        <span class="comment">// 指定文件名</span></span><br><span class="line">        filename: <span class="string">'[name].dll.js'</span>,</span><br><span class="line">        <span class="comment">// 存放动态链接库的全局变量名称，例如对应 lodash 来说就是 lodash_dll_lib</span></span><br><span class="line">        <span class="comment">// 这个名称需要与 DllPlugin 插件中的 name 属性值对应起来</span></span><br><span class="line">        <span class="comment">// 之所以在前面 _dll_lib 是为了防止全局变量冲突</span></span><br><span class="line">        library: <span class="string">'[name]_dll_lib'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpaclPlugin([<span class="string">'vendor'</span>], &#123;</span><br><span class="line">            root: path.resolve(__dirname, <span class="string">'public'</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> FirendlyErrorePlugin(),</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 接入 DllPlugin</span></span><br><span class="line">        <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">            <span class="comment">// 描述动态链接库的 manifest.json 文件输出时的文件名称</span></span><br><span class="line">            <span class="comment">// 由于每次打包生产环境时会清空 dist 文件夹，因此这里我将它们存放在了 public 文件夹下</span></span><br><span class="line">            path: path.join(__dirname, <span class="string">'public'</span>, <span class="string">'vendor'</span>, <span class="string">'[name].manifest.json'</span>),</span><br><span class="line">            <span class="comment">// 动态链接库的全局变量名称，需要和 output.library 中保持一致</span></span><br><span class="line">            <span class="comment">// 该字段的值也就是输出的 manifest.json 文件 中 name 字段的值</span></span><br><span class="line">            <span class="comment">// 例如 lodash.manifest.json 中就有 "name": "lodash_dll_lib"</span></span><br><span class="line">            name: <span class="string">'[name]_dll_lib'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="二、编写配置文件用来打包项目（使用-DllReferencePlugin）"><a href="#二、编写配置文件用来打包项目（使用-DllReferencePlugin）" class="headerlink" title="二、编写配置文件用来打包项目（使用 DllReferencePlugin）"></a>二、编写配置文件用来打包项目（使用 DllReferencePlugin）</h4><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> CleanWebpaclPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> FirendlyErrorePlugin = <span class="built_in">require</span>(<span class="string">'friendly-errors-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    devtool: <span class="string">'source-map'</span>,</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>),</span><br><span class="line">        filename: <span class="string">'build-[hash:5].js'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">            title: <span class="string">'Webpak DllPlugin 的使用'</span>,</span><br><span class="line">            template: <span class="string">'./public/index.html'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> CleanWebpaclPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">        <span class="keyword">new</span> FirendlyErrorePlugin(),</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="string">'process.env.NODE_ENV'</span>: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 告诉 Webpack 使用了哪些动态链接库</span></span><br><span class="line">        <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">            <span class="comment">// 描述 lodash 动态链接库的文件内容</span></span><br><span class="line">            manifest: <span class="built_in">require</span>(<span class="string">'./public/vendor/lodash.manifest.json'</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="三、在-index-html-文件中引入动态链接库"><a href="#三、在-index-html-文件中引入动态链接库" class="headerlink" title="三、在 index.html 文件中引入动态链接库"></a>三、在 index.html 文件中引入动态链接库</h4><p>由于动态链接库我们一般只编译一次，之后就不用编译，复用模块都被打包到了动态链接库中，因此入口的 index.js 文件中已经不包含这些模块了，所以要在 index.html 中单独引入。</p><p>index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpak DllPlugin 的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../public/vendor/lodash.dll.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意</strong>：由于在打包项目的时候会清理掉 dist 文件，所以我将生成的动态链接库放到了 public 目录下，所以这里是引入 public 下的动态链接库。</p></blockquote><p>我们在 package.json 中添加两条指令：</p><ul><li>build：打包项目</li><li>build:dll：编译生成动态链接库</li></ul><p>package.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "build": "webpack --config webpack.config.js",</span><br><span class="line">    "build:dll": "webpack --config webpack_dll.config.js"</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><p>根据上面所说的三个步骤，Dll 的用法已经结束了。现在我们运行一下看看结果。</p><p>打开命令行，执行命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成动态链接库，只需要运行一次这个指令，以后打包项目不需要再执行这个指令</span></span><br><span class="line">$ npm run build:dll</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打包项目</span></span><br><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p>在浏览器中打开 dist 文件夹下的 index.html 文件，可以看到浏览器上出现：Hello , DllPlugin。说明项目配置成功。</p><h3 id="DllPlugin-和-DllReferencePlugin-分别做了什么"><a href="#DllPlugin-和-DllReferencePlugin-分别做了什么" class="headerlink" title="DllPlugin 和 DllReferencePlugin 分别做了什么"></a>DllPlugin 和 DllReferencePlugin 分别做了什么</h3><p>运行 <code>npm run build:dll</code> 指令之后，可以看到项目中 public 目录下多出了一个 vendor 的文件夹，可以看到其中包含两个文件：</p><ul><li><code>lodash.dll.js</code>    里面包含 <code>lodash</code> 的基础运行环境，也就是 lodash 模块</li><li><code>lodash.manifest.json</code>    也是由 DllPlugin 生成出，用于描述动态链接库文件中包含哪些模块</li></ul><h4 id="lodash-dll-js"><a href="#lodash-dll-js" class="headerlink" title="lodash.dll.js"></a>lodash.dll.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> lodash_dll_lib=...  <span class="comment">// 此处代码过多，进行省略</span></span><br></pre></td></tr></table></figure><h4 id="lodash-manifest-json"><a href="#lodash-manifest-json" class="headerlink" title="lodash.manifest.json"></a>lodash.manifest.json</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"lodash_dll_lib"</span>,<span class="attr">"content"</span>:&#123;<span class="attr">"./node_modules/lodash/lodash.js"</span>:&#123;<span class="attr">"id"</span>:<span class="number">1</span>,<span class="attr">"buildMeta"</span>:&#123;<span class="attr">"providedExports"</span>:<span class="literal">true</span>&#125;&#125;,<span class="attr">"./node_modules/webpack/buildin/global.js"</span>:&#123;<span class="attr">"id"</span>:<span class="number">2</span>,<span class="attr">"buildMeta"</span>:&#123;<span class="attr">"providedExports"</span>:<span class="literal">true</span>&#125;&#125;,<span class="attr">"./node_modules/webpack/buildin/module.js"</span>:&#123;<span class="attr">"id"</span>:<span class="number">3</span>,<span class="attr">"buildMeta"</span>:&#123;<span class="attr">"providedExports"</span>:<span class="literal">true</span>&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><strong>对比之后可以明白</strong>：</p><ul><li><p>一个动态链接库文件中包含了大量模块的代码，这些模块存放在一个数组里，用数组的索引号作为 ID。 并且还通过 lodash_dll_lib 变量把自己暴露在了全局中，也就是可以通过 window.lodash_dll_lib 可以访问到它里面包含的模块</p></li><li><p>manifest.json 文件清楚地描述了与其对应的 dll.js 文件中包含了哪些模块，以及每个模块的路径和 ID</p></li></ul><blockquote><p>至此，Dll 的使用以及配置完成了。但是这里还有值得思考的地方：目前看来，项目可以正常运行，但是现在动态链接库是存放到 public 目录下的，如果我们需要将项目打包上线的话，如何能够让动态链接库自动也存放到 dist 目录下呢？如何在我们不手动添加脚本的情况下，自动将动态链接库引入到 index.html 文件中呢？如果有兴趣的话，可以继续往下来看一看配合 add-asset-html-webpack-plugin 的使用。</p></blockquote><hr><h2 id="add-asset-html-webpack-plugin-的使用"><a href="#add-asset-html-webpack-plugin-的使用" class="headerlink" title="add-asset-html-webpack-plugin 的使用"></a>add-asset-html-webpack-plugin 的使用</h2><p>上面也已经说了，虽然 Dll 的使用和配置没有问题了，但是还不是很满意，打包的时候不能将动态链接库自动的存放到 dist 文件夹，也不能自动在 html 文件中引入动态链接库脚本。所以这时候 add-asset-html-webpack-plugin 就派上用场了。</p><h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install add-asset-html-webpack-plugin -D</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>在 webpack.config.js 文件中进行使用</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">...;</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlPlugin = <span class="built_in">require</span>(<span class="string">'add-asset-html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...,</span><br><span class="line">    plugins: [</span><br><span class="line">        ...,</span><br><span class="line">        <span class="comment">// 该插件将把给定的 JS 或 CSS 文件添加到 webpack 配置的文件中，并将其放入资源列表 html webpack插件注入到生成的 html 中。</span></span><br><span class="line">        <span class="keyword">new</span> AddAssetHtmlPlugin([</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 要添加到编译中的文件的绝对路径，以及生成的HTML文件。支持globby字符串</span></span><br><span class="line">                filepath: <span class="built_in">require</span>.resolve(path.resolve(__dirname, <span class="string">'public/vendor/lodash.dll.js'</span>)),</span><br><span class="line">                <span class="comment">// 文件输出目录</span></span><br><span class="line">                outputPath: <span class="string">'vendor'</span>,</span><br><span class="line">                <span class="comment">// 脚本或链接标记的公共路径</span></span><br><span class="line">                publicPath: <span class="string">'vendor'</span></span><br><span class="line">            &#125;</span><br><span class="line">        ])</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>此时可以删除 index.html 文件中手动引入的脚本了<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpak DllPlugin 的使用<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 删除下面这行引入脚本 --&gt;</span></span><br><span class="line">-    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../public/vendor/lodash.dll.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><p>打开命令行，执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打包项目</span></span><br><span class="line">$ npm run build</span><br></pre></td></tr></table></figure></p><ul><li><p>现在查看项目中 dist 文件夹，可以看到 public 目录下 vendor 文件夹中的 js 文件已经全部自动拷贝到 dist 目录中的 vendor 文件夹下了</p></li><li><p>打开 dist 文件夹中的 index.html 文件，可以看到已经自动将生成的脚本文件引入了</p></li><li><p>在浏览器中打开 index.html，可以看到 ‘Hello , DllPlugin’ 也能够正常显示</p></li></ul><p>add-asset-html-webpack-plugin 更多配置请参考 github 地址：<strong><a href="https://github.com/SimenB/add-asset-html-webpack-plugin" target="_blank" rel="noopener">AddAssetHtmlPlugin 配置</a></strong></p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>Dll 动态链接库的使用可以提高项目构建速度，因为对于大量复用的模块可以提前进行编译，且只需要编译一次，之后的开发中，使用这些模块的地方都不会再重新进行编译</p></li><li><p>DllPlugin 和 DllReferencePlugin 需要配合使用</p><ul><li>DllPlugin 用于打包出一个个单独的动态链接库文件并生成对应的主清单文件用于描述动态链接库中包含哪些模块</li><li>DllReferencePlugin 用于在主清单文件中去引入 DllPlugin 插件打包好的动态链接库文件</li></ul></li><li><p>可以使用 AddAssetHtmlPlugin 将生成的动态链接库文件拷贝到出口文件夹下，然后 HTMLWebpackPlugin 就会自动的将脚本文件注入到生成的 html 文件中去</p></li><li><p><strong>注意：</strong>如想测试一下构建速度是否有提升，可以将 <code>webpack.config.js</code> 中的 DllReferencePlugin 和 AddAssetHtmlPlugin 使用注释起来，运行 <code>npm run build</code>，观察打包时间；再将注释打开，运行 <code>npm run build</code>，观察打包时间，进行对比，即可发现区别</p><blockquote><p>如是第一次打包，请先运行 <code>npm run build:dll</code> 生成动态链接库。</p></blockquote></li></ul><blockquote><p>本文 Demo 地址：<strong><a href="https://github.com/beichensky/webpack-demo/tree/master/webpack-dll-demo" target="_blank" rel="noopener">源码地址</a></strong><br>欢迎 Star！</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了 Webpack 中 DllPlugin 插件的使用，以及配合使用 AddAssetHtmlPlugin 将构建好的 JS 文件插入到 html 页面中。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="Webpack" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/Webpack/"/>
    
    
      <category term="Webpack" scheme="https://beichensky.github.io/tags/Webpack/"/>
    
      <category term="DllPlugin" scheme="https://beichensky.github.io/tags/DllPlugin/"/>
    
  </entry>
  
  <entry>
    <title>使用 Webpack 进行生产环境配置（附 Demo）</title>
    <link href="https://beichensky.github.io/20190201/webpack-prod/"/>
    <id>https://beichensky.github.io/20190201/webpack-prod/</id>
    <published>2019-02-01T09:15:24.000Z</published>
    <updated>2019-02-17T03:48:50.877Z</updated>
    
    <content type="html"><![CDATA[<p>本文从代码压缩、代码拆分、样式分离等三个方面对生产环境的代码打包进行了优化配置。只是最简单的一些配置，如果真正运用到项目中，还需要根据项目添加更多配置。</p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文讲述的是如何对生产环境下的代码进行压缩，如果还不是太了解 Webpack 的朋友，可以先看一下我的上一篇文章：<strong><a href="https://lufanfan.github.io/20190130/webpack-dev/" target="_blank" rel="noopener">从零开始搭建一个 Webpack 开发环境配置（附 Demo）</a></strong></p><p>本文项目代码位置：<strong><a href="https://github.com/beichensky/webpack-demo/tree/master/webpack-prod-demo" target="_blank" rel="noopener">源码地址</a></strong></p><hr><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>首先编写一个项目，初始化 npm，然后 在本地安装 webpack，接着安装 webpack-cli（此工具用于在命令行中运行 webpack）：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir webpack-prod-demo</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> webpack-prod-demo</span><br><span class="line"></span><br><span class="line">$ npm init -y</span><br><span class="line"></span><br><span class="line">$ npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure></p><p>project<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webpack-prod-demo</span><br><span class="line">|- package.json</span><br><span class="line">|- /public</span><br><span class="line">  |- index.html</span><br><span class="line">|- /src</span><br><span class="line">  |- index.js</span><br><span class="line">  |- index.css</span><br></pre></td></tr></table></figure></p><p>pubic/index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack 生产环境配置<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line">    element.innerHTML = <span class="string">'Hello World'</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="built_in">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure></p><p>index.css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>package.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"webpack-prod-demo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack --config webpack.config.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="配置-webpack-config-js-文件"><a href="#配置-webpack-config-js-文件" class="headerlink" title="配置 webpack.config.js 文件"></a>配置 webpack.config.js 文件</h3><p>在根目录下新建 webpack.config.js 文件，并进行基本配置</p><p>安装插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 babel-loader</span></span><br><span class="line">$ npm install babel-core babel-loader@7 --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 babel presets</span></span><br><span class="line">$ npm install babel-preset-env babel-preset-stage-0 --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 babel plugins </span></span><br><span class="line">$ npm install babel-plugin-transform-class-properties babel-plugin-transform-runtime babel-runtime --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装其余所需 loader</span></span><br><span class="line">$ npm install css-loader style-loader file-loader csv-loader xml-loader html-loader markdown-loader --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 webpack 插件</span></span><br><span class="line">$ npm install clean-webpack-plugin html-webpack-plugin friendly-errors-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></p><p>配置 webpack.config.js：</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> FriendlyErrorsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'friendly-errors-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    devtool: <span class="string">'hidden-source-map'</span>,</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name]-[hash:8].js'</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// 用于生成的HTML文档的标题</span></span><br><span class="line">            title: <span class="string">'Webpack 生产环境配置'</span>,</span><br><span class="line">            <span class="comment">// webpack 生成模板的路径</span></span><br><span class="line">            template: <span class="string">'./public/index.html'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 用法：new CleanWebpackPlugin(paths [, &#123;options&#125;])</span></span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">        <span class="comment">// 在命令行进行友好提示</span></span><br><span class="line">        <span class="keyword">new</span> FriendlyErrorsWebpackPlugin()</span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">                loader: <span class="string">'babel-loader?cacheDirectory'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析 css</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'style-loader'</span>,</span><br><span class="line">                    <span class="comment">// 还可以给 loader 添加一些配置</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            <span class="comment">// 开启 sourceMop</span></span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'file-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析 字体</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'file-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析数据资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(csv|tsv)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'csv-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析数据资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.xml$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'xml-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析 MakeDown 文件</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.md$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">"html-loader"</span>, </span><br><span class="line">                    <span class="string">"markdown-loader"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在项目根目录下创建 .babelrc 文件</p><p>.babelrc<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [<span class="string">"env"</span>, <span class="string">"stage-0"</span>],</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">        <span class="string">"transform-runtime"</span>,</span><br><span class="line">        <span class="string">"transform-class-properties"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="基本配置完成后运行项目"><a href="#基本配置完成后运行项目" class="headerlink" title="基本配置完成后运行项目"></a>基本配置完成后运行项目</h3><p>在命令行运行指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure></p><p>此时在浏览器打开 dist 文件夹下的 html 文件，页面上正常显示 蓝色居中的 <code>Hello World</code> </p><p>查看此时 dist 文件大小：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/webpack/prod_normal.png" alt="普通打包" title="">                </div>                <div class="image-caption">普通打包</div>            </figure></p><h3 id="设置-mode-为-production"><a href="#设置-mode-为-production" class="headerlink" title="设置 mode 为 production"></a>设置 mode 为 <code>production</code></h3><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'production'</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="设置为生产环境后运行项目"><a href="#设置为生产环境后运行项目" class="headerlink" title="设置为生产环境后运行项目"></a>设置为生产环境后运行项目</h3><p>在命令行运行指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure></p><p>此时在浏览器打开 dist 文件夹下的 html 文件，页面上还是能够正常显示 蓝色居中的 <code>Hello World</code> </p><p>查看此时 dist 文件大小：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/webpack/prod_env.png" alt="生产环境打包" title="">                </div>                <div class="image-caption">生产环境打包</div>            </figure></p><h3 id="本文的重点：优化打包"><a href="#本文的重点：优化打包" class="headerlink" title="本文的重点：优化打包"></a>本文的重点：优化打包</h3><p>安装需要用到的插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装压缩 js、 css 代码的插件</span></span><br><span class="line">$ npm install uglifyjs-webpack-plugin optimize-css-assets-webpack-plugin --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装提取 css 的插件</span></span><br><span class="line">$ npm install mini-css-extract-plugin --save-dev</span><br></pre></td></tr></table></figure></p><h4 id="uglifyjs-webpack-plugin-和-optimize-css-assets-webpack-plugin-的使用"><a href="#uglifyjs-webpack-plugin-和-optimize-css-assets-webpack-plugin-的使用" class="headerlink" title="uglifyjs-webpack-plugin 和 optimize-css-assets-webpack-plugin 的使用"></a>uglifyjs-webpack-plugin 和 optimize-css-assets-webpack-plugin 的使用</h4><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">...;</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">"optimize-css-assets-webpack-plugin"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        <span class="comment">// 打包压缩js/css文件</span></span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">                uglifyOptions: &#123;</span><br><span class="line">                    compress: &#123;</span><br><span class="line">                        <span class="comment">// 在UglifyJs删除没有用到的代码时不输出警告</span></span><br><span class="line">                        warnings: <span class="literal">false</span>,</span><br><span class="line">                        <span class="comment">// 删除所有的 `console` 语句，可以兼容ie浏览器</span></span><br><span class="line">                        drop_console: <span class="literal">true</span>,</span><br><span class="line">                        <span class="comment">// 内嵌定义了但是只用到一次的变量</span></span><br><span class="line">                        collapse_vars: <span class="literal">true</span>,</span><br><span class="line">                        <span class="comment">// 提取出出现多次但是没有定义成变量去引用的静态值</span></span><br><span class="line">                        reduce_vars: <span class="literal">true</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    output: &#123;</span><br><span class="line">                        <span class="comment">// 最紧凑的输出</span></span><br><span class="line">                        beautify: <span class="literal">false</span>,</span><br><span class="line">                        <span class="comment">// 删除所有的注释</span></span><br><span class="line">                        comments: <span class="literal">false</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;</span><br><span class="line">                cssProcessorOptions: &#123;</span><br><span class="line">                    safe: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>uglifyjs-webpack-plugin 更多配置请参考：<a href="https://github.com/mishoo/UglifyJS2/tree/harmony" target="_blank" rel="noopener">插件文档</a>。</p><p>optimize-css-assets-webpack-plugin 更多配置请参考：<a href="https://github.com/NMFR/optimize-css-assets-webpack-plugin" target="_blank" rel="noopener">插件文档</a>。</p><h4 id="mini-css-extract-plugin-的使用"><a href="#mini-css-extract-plugin-的使用" class="headerlink" title="mini-css-extract-plugin 的使用"></a>mini-css-extract-plugin 的使用</h4><blockquote><p><strong>注意：</strong> MiniCssExtractPlugin.loader 和 style-loader 一起使用可能出现问题。所以下面我将 style-loader 去掉了。 </p></blockquote><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">...;</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins: [</span><br><span class="line">        ...,</span><br><span class="line">        <span class="comment">// 打包后提取出css文件</span></span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name].[contenthash:8].css'</span>,</span><br><span class="line">            chunkFilename: <span class="string">'[name].[contenthash:8].chunk.css'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>: [</span><br><span class="line">        rules: [</span><br><span class="line">            ...,</span><br><span class="line">            <span class="comment">// 解析 css</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: MiniCssExtractPlugin.loader</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 还可以给 loader 添加一些配置</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            <span class="comment">// 开启 sourceMop</span></span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            ...</span><br><span class="line">        ]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>mini-css-extract-plugin 更多配置请参考：<a href="https://github.com/webpack-contrib/mini-css-extract-plugin" target="_blank" rel="noopener">插件文档</a>。</p><h4 id="chunk-拆分"><a href="#chunk-拆分" class="headerlink" title="chunk 拆分"></a>chunk 拆分</h4><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        <span class="comment">// 打包压缩js/css文件</span></span><br><span class="line">        minimizer: [</span><br><span class="line">            ...</span><br><span class="line">        ],</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: <span class="string">'all'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>splitChunks 更多配置请参考：<a href="https://webpack.docschina.org/plugins/split-chunks-plugin/" target="_blank" rel="noopener">官方文档</a>。</p><h3 id="区分环境"><a href="#区分环境" class="headerlink" title="区分环境"></a>区分环境</h3><p>在开发网页的时候，一般都会有多套运行环境，例如：</p><ul><li>在开发过程中方便开发调试的环境</li><li>发布到线上给用户使用的运行环境</li></ul><p>为了尽可能的复用代码，在构建的过程中需要根据目标代码要运行的环境而输出不同的代码，我们需要一套机制在源码中去区分环境。可以通过 Webpack 内置的 DefinePlugin 插件进行环境的区分。</p><p>区分环境的原因：<br>很多第三方库中也做了环境区分的优化</p><ul><li>开发环境：包含类型检查、HTML 元素检查等等针对开发者的警告日志代码</li><li>线上环境：去掉了所有针对开发者的代码，只保留让 React 能正常运行的部分，以优化大小和性能</li></ul><blockquote><p><strong>注意：</strong> NODE_ENV 和 ‘production’ 两个值是社区的约定，通常使用这条判断语句在区分开发环境和线上环境。</p></blockquote><p>配置：</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...,</span><br><span class="line">    plugins: [</span><br><span class="line">        ...,</span><br><span class="line">        <span class="comment">// 区分环境</span></span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="comment">// 定义 NODE_ENV 环境变量为 production</span></span><br><span class="line">            <span class="string">'process.env'</span>: &#123;</span><br><span class="line">                NODE_ENV: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="进行配置优化后运行项目"><a href="#进行配置优化后运行项目" class="headerlink" title="进行配置优化后运行项目"></a>进行配置优化后运行项目</h3><p>在命令行运行指令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure></p><p>此时在浏览器打开 dist 文件夹下的 html 文件，页面上仍能正常显示 蓝色居中的 <code>Hello World</code> </p><p>查看此时 dist 文件大小：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/webpack/prod_optimization.png" alt="优化配置后打包" title="">                </div>                <div class="image-caption">优化配置后打包</div>            </figure></p><h3 id="webpack-config-js-文件最终代码"><a href="#webpack-config-js-文件最终代码" class="headerlink" title="webpack.config.js 文件最终代码"></a>webpack.config.js 文件最终代码</h3><p>其余文件基本未进行修改。在此将 webpack.config.js 代码贴出来</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> FriendlyErrorsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'friendly-errors-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">'uglifyjs-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> OptimizeCSSAssetsPlugin = <span class="built_in">require</span>(<span class="string">"optimize-css-assets-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">'mini-css-extract-plugin'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'production'</span>,</span><br><span class="line">    devtool: <span class="string">'hidden-source-map'</span>,</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name]-[hash:8].js'</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// 用于生成的HTML文档的标题</span></span><br><span class="line">            title: <span class="string">'Webpack 开发环境配置'</span>,</span><br><span class="line">            <span class="comment">// webpack 生成模板的路径</span></span><br><span class="line">            template: <span class="string">'./public/index.html'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 用法：new CleanWebpackPlugin(paths [, &#123;options&#125;])</span></span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">        <span class="comment">// 在命令行进行友好提示</span></span><br><span class="line">        <span class="keyword">new</span> FriendlyErrorsWebpackPlugin(),</span><br><span class="line">        <span class="comment">// 打包后提取出css文件</span></span><br><span class="line">        <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'[name].[contenthash:8].css'</span>,</span><br><span class="line">            chunkFilename: <span class="string">'[name].[contenthash:8].chunk.css'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 区分环境</span></span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="comment">// 定义 NODE_ENV 环境变量为 production</span></span><br><span class="line">            <span class="string">'process.env'</span>: &#123;</span><br><span class="line">                NODE_ENV: <span class="built_in">JSON</span>.stringify(<span class="string">'production'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">                loader: <span class="string">'babel-loader?cacheDirectory'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析 css</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: MiniCssExtractPlugin.loader</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="comment">// 还可以给 loader 添加一些配置</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            <span class="comment">// 开启 sourceMop</span></span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'file-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析 字体</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'file-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析数据资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(csv|tsv)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'csv-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析数据资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.xml$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'xml-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析 MakeDown 文件</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.md$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">"html-loader"</span>, </span><br><span class="line">                    <span class="string">"markdown-loader"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    optimization: &#123;</span><br><span class="line">        <span class="comment">// 打包压缩js/css文件</span></span><br><span class="line">        minimizer: [</span><br><span class="line">            <span class="keyword">new</span> UglifyJsPlugin(&#123;</span><br><span class="line">                uglifyOptions: &#123;</span><br><span class="line">                    compress: &#123;</span><br><span class="line">                        <span class="comment">// 在UglifyJs删除没有用到的代码时不输出警告</span></span><br><span class="line">                        warnings: <span class="literal">false</span>,</span><br><span class="line">                        <span class="comment">// 删除所有的 `console` 语句，可以兼容ie浏览器</span></span><br><span class="line">                        drop_console: <span class="literal">true</span>,</span><br><span class="line">                        <span class="comment">// 内嵌定义了但是只用到一次的变量</span></span><br><span class="line">                        collapse_vars: <span class="literal">true</span>,</span><br><span class="line">                        <span class="comment">// 提取出出现多次但是没有定义成变量去引用的静态值</span></span><br><span class="line">                        reduce_vars: <span class="literal">true</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    output: &#123;</span><br><span class="line">                        <span class="comment">// 最紧凑的输出</span></span><br><span class="line">                        beautify: <span class="literal">false</span>,</span><br><span class="line">                        <span class="comment">// 删除所有的注释</span></span><br><span class="line">                        comments: <span class="literal">false</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;),</span><br><span class="line">            <span class="keyword">new</span> OptimizeCSSAssetsPlugin(&#123;</span><br><span class="line">                cssProcessorOptions: &#123;</span><br><span class="line">                    safe: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        ],</span><br><span class="line">        splitChunks: &#123;</span><br><span class="line">            chunks: <span class="string">'all'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><p>通过三次打包的对比，可以看到：</p><ul><li>第一次普通配置打包后，包大小为 48.1 K</li><li>第二次设置为生产环境后打包，包大小为 39.0 K</li><li>第三次进行优化配置后打包，包大小为 1.46 K</li></ul><p>目前这个项目一个 js 文件，代码量很少，但是还是可以看到优化的效果的。如果项目更大的话，优化的效果也会更明显。当然，需要的配置可能更多了。</p><hr><h2 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h2><p><strong><a href="https://github.com/beichensky/webpack-demo/tree/master/webpack-prod-demo" target="_blank" rel="noopener">源码地址</a></strong></p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文只是对于生产环境下代码打包的简单优化，在项目实战的过程中，可能会需要更多的配置。其实无论看多少教程，其实里面的配置都不一定能够满足自身的要求。在开发的过程中，还是需要自己根据需求进行配置。</p><p>其实 Webpack 的学习并不难，根据官网的说明和指南，其实基本都会使用。难的是各种 loader、plugin 自身的配置。这些都需要去到 loader 和 plugin 的网站上深入研究才可以。所以想要更好的进行 webpack 配置，还是需要多多留意最新技术的出现，多搜集有用的插件和配置。积少成多，慢慢的就能配置出更好的项目脚手架（目前这也是我的目标）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文从代码压缩、代码拆分、样式分离等三个方面对生产环境的代码打包进行了优化配置。只是最简单的一些配置，如果真正运用到项目中，还需要根据项目添加更多配置。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
      <category term="Webpack" scheme="https://beichensky.github.io/categories/Webpack/"/>
    
    
      <category term="Webapck" scheme="https://beichensky.github.io/tags/Webapck/"/>
    
      <category term="Production" scheme="https://beichensky.github.io/tags/Production/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建一个 Webpack 开发环境配置（附 Demo）</title>
    <link href="https://beichensky.github.io/20190130/webpack-dev/"/>
    <id>https://beichensky.github.io/20190130/webpack-dev/</id>
    <published>2019-01-30T07:40:30.000Z</published>
    <updated>2019-02-17T03:48:50.877Z</updated>
    
    <content type="html"><![CDATA[<p>本文使用 Webpack 从零开始搭建一个开发环境的脚手架配置，在此做个记录，也方便以后使用。</p><hr><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我的上一篇文章简单介绍了一下 Webpack 的一些核心概念和基本配置，需要了解的朋友可以先参考一下<a href="https://lufanfan.github.io/20190130/webpack-basic/" target="_blank" rel="noopener">Webpack 的简单介绍</a></p><blockquote><p>从 webpack v4.0.0 开始，可以不用引入一个配置文件。直接使用 webpack 命令就可进行打包。但是，一般我们需要进行更灵活的配置功能，所以本文我也创建一个 webpack 的配置文件，对webpack 的一些属性进行配置。</p></blockquote><p><strong><a href="https://github.com/beichensky/webpack-demo/tree/master/webpack-dev-demo" target="_blank" rel="noopener">本文 Demo 地址</a></strong></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>首先我们创建一个目录，初始化 npm，然后 在本地安装 webpack，接着安装 webpack-cli（此工具用于在命令行中运行 webpack）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir webpack-dev-demo &amp;&amp; <span class="built_in">cd</span> webpack-dev-demo</span><br><span class="line"></span><br><span class="line">$ npm init -y</span><br><span class="line"></span><br><span class="line">$ npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure><p>project</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">webpack-dev-demo</span><br><span class="line">|- package.json</span><br><span class="line">|- /public</span><br><span class="line">  |- index.html</span><br><span class="line">|- /src</span><br><span class="line">  |- index.js</span><br></pre></td></tr></table></figure><p>src/index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line">    element.innerHTML = <span class="string">'Hello World'</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="built_in">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure></p><p>public/index.js<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack 开发环境配置<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>package.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"webpack-dev-demo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack --config webpack.config.js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.29.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.2.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><p>在项目根目录下创建 webpack.config.js 配置文件</p><p>project</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  webpack-dev-demo</span><br><span class="line">  |- package.json</span><br><span class="line">  |- /public</span><br><span class="line">    |- index.html</span><br><span class="line">  |- /src</span><br><span class="line">    |- index.js</span><br><span class="line">+ |- webpack.config.js</span><br></pre></td></tr></table></figure><h3 id="配置入口和输出"><a href="#配置入口和输出" class="headerlink" title="配置入口和输出"></a>配置入口和输出</h3><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name]-[hash:8].js'</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="运行-webpack"><a href="#运行-webpack" class="headerlink" title="运行 webpack"></a>运行 webpack</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p>控制台的打印结果<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/webpack/first-build.png" alt="第一次打印结果" title="">                </div>                <div class="image-caption">第一次打印结果</div>            </figure></p><p>可以看到打印日志，打包成功了，但是此时在浏览器打开我们的 index.html 文件，却发现界面上什么都不显示，这个也好理解，因为 index.html 此时还没有引入任何的 js 文件。所以这个时候就要将打包后的文件引入到 index.html 文件中，但是可以看到 dist 文件夹下的 js 文件名有很多的 hash 值，而且每次编译都可能不同，怎么办呢？这时候就要引入 html-webpack-plugin 插件了</p><h3 id="html-webpack-plugin-插件的使用"><a href="#html-webpack-plugin-插件的使用" class="headerlink" title="html-webpack-plugin 插件的使用"></a>html-webpack-plugin 插件的使用</h3><p>安装插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install html-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></p><p>使用插件：</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HTMLWebpack(&#123;</span><br><span class="line">            <span class="comment">// 用于生成的HTML文档的标题</span></span><br><span class="line">            title: <span class="string">'Webpack 开发环境配置'</span>,</span><br><span class="line">            <span class="comment">// webpack 生成模板的路径</span></span><br><span class="line">            template: <span class="string">'./public/index.html'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于 html-webpack-plugin 插件更多配置请参考：<a href="https://github.com/jantimon/html-webpack-plugin#options" target="_blank" rel="noopener">插件文档</a>。</p><p>再次运行 webpack<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure></p><p>可以看到 dist 文件夹下生成了一个 index.html 文件，在浏览器中打开这个 index.html 文件，可以看到，’Hello World’ 已经能够正常显示了</p><p>至此，项目能够正常打包了，但是还不够，此时可以看到 dist 文件夹下有两个 js 文件，但是明明只打了一个包啊。是因为另一个包使我们上一次操作打出来的，并没有删除掉。所以，为了避免 dist 文件夹中的文件变得杂乱，我们还需要引入 clean-webpack-plugin 插件帮助我们清理 dist 文件夹</p><h3 id="clean-webpack-plugin-插件的使用"><a href="#clean-webpack-plugin-插件的使用" class="headerlink" title="clean-webpack-plugin 插件的使用"></a>clean-webpack-plugin 插件的使用</h3><p>安装插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install clean-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></p><p>用法：new CleanWebpackPlugin(paths [, {options}])</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins: [</span><br><span class="line">        ...,</span><br><span class="line">        <span class="comment">// 用法：new CleanWebpackPlugin(paths [, &#123;options&#125;])</span></span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>])</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再次运行 webpack<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure></p><p>此时 dist 文件夹下只有一个 js 和 html 文件了。说明插件配置成功了，关于 clean-webpack-plugin 更多配置请参考：<a href="https://github.com/johnagan/clean-webpack-plugin" target="_blank" rel="noopener">插件文档</a>。</p><h3 id="配置-Http-服务并进行实时预览"><a href="#配置-Http-服务并进行实时预览" class="headerlink" title="配置 Http 服务并进行实时预览"></a>配置 Http 服务并进行实时预览</h3><p>安装 webpack-dev-server 包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save-dev webpack-dev-server</span><br></pre></td></tr></table></figure></p><p>使用：</p><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// 必须配置的选项，服务启动的目录，默认为跟目录</span></span><br><span class="line">        contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">        <span class="comment">// 使用热加载时需要设置为 true</span></span><br><span class="line">        hot: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下面为可选配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 指定使用一个 host。默认是 localhost</span></span><br><span class="line">        host: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="comment">// 端口号</span></span><br><span class="line">        port: <span class="number">8000</span>,</span><br><span class="line">        <span class="comment">// 当使用 HTML5 History API 时，任意的 404 响应都可能需要被替代为 index.html。通过设置为 true 进行启用</span></span><br><span class="line">        historyApiFallback: &#123;</span><br><span class="line">            disableDotRule: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 出现错误时是否在浏览器上出现遮罩层提示</span></span><br><span class="line">        overlay: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 在 dev-server 的两种不同模式之间切换</span></span><br><span class="line"><span class="comment">         *   默认情况下，应用程序启用内联模式 inline</span></span><br><span class="line"><span class="comment">         *   设置为 false，使用 iframe 模式，它在通知栏下面使用 &lt;iframe&gt; 标签，包含了关于构建的消息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        inline: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 统计信息，枚举类型，可供选项：</span></span><br><span class="line"><span class="comment">         *      "errors-only": 只在发生错误时输出</span></span><br><span class="line"><span class="comment">         *      "minimal": 只在发生错误或有新的编译时输出</span></span><br><span class="line"><span class="comment">         *      "none": 没有输出</span></span><br><span class="line"><span class="comment">         *      "normal": 标准输出</span></span><br><span class="line"><span class="comment">         *      "verbose": 全部输出</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        stats: <span class="string">"errors-only"</span>,</span><br><span class="line">        <span class="comment">// 设置接口请求代理，更多 proxy 配置请参考 https://github.com/chimurai/http-proxy-middleware#options</span></span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api/'</span>: &#123;</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 目标地址</span></span><br><span class="line">                target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">                <span class="comment">// 重写路径</span></span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/api/'</span>: <span class="string">'/'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        ...,</span><br><span class="line">        <span class="comment">// 添加 NamedModulesPlugin，以便更容易查看要修补(patch)的依赖，由于设置了 mode: 'development'，所以这个插件可以省略</span></span><br><span class="line">        <span class="comment">// new webpack.NamedModulesPlugin(),</span></span><br><span class="line">        <span class="comment">// 进行模块热替换</span></span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>启用热加载功能：(上面已经添加了)<br>    1、在 devServer 配置中添加 <code>hot: true</code> 属性<br>    2、在 plugins 中添加 <code>new webpack.NamedModulesPlugin()</code> 和 <code>new webpack.HotModuleReplacementPlugin()</code></p></blockquote><p>在 package.json 中添加一个执行命令</p><p>package.json<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">"scripts": &#123;</span><br><span class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</span><br><span class="line">    "build": "webpack --config webpack.config.js",</span><br><span class="line">+   "start": "webpack-dev-server"</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>启动 Http 服务</p><p>执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run start</span><br></pre></td></tr></table></figure></p><p>可以看到控制台打印输出：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/webpack/first-server.png" alt="打印日志" title="">                </div>                <div class="image-caption">打印日志</div>            </figure></p><p>打开浏览器，输入：<code>http://localhost:8000/</code>，可以看到浏览器中可以正常显示 Hello World。</p><h3 id="模式配置"><a href="#模式配置" class="headerlink" title="模式配置"></a>模式配置</h3><p>webpack 配置中有一个 mode 属性的配置，三个可选属性：</p><ul><li><p>production  会将 process.env.NODE_ENV 的值设为 production。启用 FlagDependencyUsagePlugin, FlagIncludedChunksPlugin, ModuleConcatenationPlugin, NoEmitOnErrorsPlugin, OccurrenceOrderPlugin, SideEffectsFlagPlugin 和 UglifyJsPlugin。</p></li><li><p>development 会将 process.env.NODE_ENV 的值设为 development。启用 NamedChunksPlugin 和 NamedModulesPlugin。</p></li><li><p>none 不选用任何默认优化选项</p></li></ul><p>这里我们配置的是开发环境，所以需要将 mode 设置为 development</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">+   mode: <span class="string">'development'</span>,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="启用调试工具-Source-Map"><a href="#启用调试工具-Source-Map" class="headerlink" title="启用调试工具 Source Map"></a>启用调试工具 Source Map</h3><p>此时项目能够正常运行，所以没有什么问题，但是现在我们修改一下，将 index.js 中的 <code>return element</code> 改成错误的 <code>return ele</code>。我们 F12 打开开发工具，可以看到控制台的错误提示，点进去却发现跟我们写的代码不一致，难以对错误的代码进行调试，此时 Source Map 就派上用场了。</p><p>在 webpack.config.js 中添加 devtool 属性</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">+   devtool: inline-source-map</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>devtool 的多个属性之间的差异</p><table><thead><tr><th>devtool</th><th>构建速度</th><th>重新构建速度</th><th>生产环境</th><th>品质(quality)</th></tr></thead><tbody><tr><td>(none)</td><td>+++</td><td>+++</td><td>yes</td><td>打包后的代码</td></tr><tr><td>eval</td><td>+++</td><td>+++</td><td>no</td><td>生成后的代码</td></tr><tr><td>cheap-eval-source-map</td><td>+</td><td>++</td><td>no</td><td>转换过的代码（仅限行）</td></tr><tr><td>cheap-module-eval-source-map</td><td>o</td><td>++</td><td>no</td><td>原始源代码（仅限行）</td></tr><tr><td>eval-source-map</td><td>–</td><td>+</td><td>no</td><td>原始源代码</td></tr><tr><td>cheap-source-map</td><td>+</td><td>o</td><td>yes</td><td>转换过的代码（仅限行） </td></tr><tr><td>cheap-module-source-map</td><td>o</td><td>-</td><td>yes</td><td>原始源代码（仅限行）</td></tr><tr><td>inline-cheap-source-map</td><td>+</td><td>o</td><td>no</td><td>转换过的代码（仅限行）</td></tr><tr><td>inline-cheap-module-source-map</td><td>o</td><td>-</td><td>no</td><td>原始源代码（仅限行）</td></tr><tr><td>source-map</td><td>–</td><td>–</td><td>yes</td><td>原始源代码</td></tr><tr><td>inline-source-map</td><td>–</td><td>–</td><td>no</td><td>原始源代码</td></tr><tr><td>hidden-source-map</td><td>–</td><td>–</td><td>yes</td><td>原始源代码</td></tr><tr><td>nosources-source-map</td><td>–</td><td>–</td><td>yes</td><td>无源代码内容</td></tr></tbody></table><p>再次运行项目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run start</span><br></pre></td></tr></table></figure></p><blockquote><p>可以看到报错依旧，但是在开发工具的控制台上，查看错误提示，可以根据提示清楚的找到我们写的代码所在位置.</p></blockquote><blockquote><p>测试之后请将错误的 <code>return ele</code> 改为正确的 <code>return element</code></p></blockquote><h3 id="为项目添加模块解析规则"><a href="#为项目添加模块解析规则" class="headerlink" title="为项目添加模块解析规则"></a>为项目添加模块解析规则</h3><p>此时，开发环境已经配置的差不多了，但是我现在想给 div 加一个样式，想让文字编程蓝色，居中显示，那么此时就需要用的 loader 了，因为 webpack 默认无法解析 css，所以就需要我们自己配置了</p><h4 id="配置-css-模块解析"><a href="#配置-css-模块解析" class="headerlink" title="配置 css 模块解析"></a>配置 css 模块解析</h4><p>安装所需插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure></p><blockquote><p>css-loader 用来解析 css 文件，而 style-loader 则用来将解析好的 css 内容注入到 JavaScript 里。由于 loader 执行顺序是从下到上，所以要将 css-loader 写在下面。</p></blockquote><p>使用：</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins: [...],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'style-loader'</span>,</span><br><span class="line">                    <span class="comment">// 还可以给 loader 添加一些配置</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            <span class="comment">// 开启 sourceMop</span></span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 src 目录下新建一个 css 文件</p><p>src/index.css：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>src/index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">'./index.css'</span>);</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>重新运行项目：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run start</span><br></pre></td></tr></table></figure></p><p>可以看到浏览器上此时文字颜色已经变蓝，并且居中显示。</p><h4 id="配置其他模块解析"><a href="#配置其他模块解析" class="headerlink" title="配置其他模块解析"></a>配置其他模块解析</h4><p>除了 css 之外，其他文件在 webpack 也都被认为是一个模块，也都需要对应的 loader 进行解析。<br>下面就不一一演示了，先把代码贴出来看一看。</p><p>下载所有需要的插件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install file-loader csv-loader xml-loader html-loader markdown-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins: [...],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">// 解析图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'file-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析 字体</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'file-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析数据资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(csv|tsv)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'csv-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析数据资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.xml$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'xml-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析 MakeDown 文件</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.md$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">"html-loader"</span>, </span><br><span class="line">                    <span class="string">"markdown-loader"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这些配置基本上可以满足常规开发中使用到的各种模块资源，不过在开发过程中可能还会需要用到 less、scss 等 css 预编译语言，还需要使用 less-loader，sass-loader 进行配置。更多配置用法这里也无法一一详述，等大家用到的时候再去查阅对应文档即可。</p><h4 id="使用-babel-进行配置"><a href="#使用-babel-进行配置" class="headerlink" title="使用 babel 进行配置"></a>使用 babel 进行配置</h4><p>目前项目可以正常运行，但是现在 ES6、7 语法已经出来了，但是浏览器中还不能完全识别，所以我们需要 babel 讲 js 文件转换成浏览器可以识别的 ES5 语法。</p><p>安装 bable-loader 插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install babel-core babel-loader --save-dev</span><br></pre></td></tr></table></figure></p><p>babel 还能进行配置，可以像上面那样直接在 loader 中进行配置，也可以在根目录下创建 .babelrc 文件配置，项目运行会自动从此文件中读取</p><p>使用 babel-loader：</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins: [...],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">                loader: <span class="string">'babel-loader?cacheDirectory'</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="babel-的-cacheDirectory-属性"><a href="#babel-的-cacheDirectory-属性" class="headerlink" title="babel 的 cacheDirectory 属性"></a>babel 的 cacheDirectory 属性</h5><p>默认值为 false。当有设置时，指定的目录将用来缓存 loader 的执行结果。之后的 webpack 构建，将会尝试读取缓存，来避免在每次执行时，可能产生的、高性能消耗的 Babel 重新编译过程。如果设置了一个空值 (<code>loader: &#39;babel-loader?cacheDirectory&#39;</code>) 或者 <code>true (loader: babel-loader?cacheDirectory=true)</code>，loader 将使用默认的缓存目录 <code>node_modules/.cache/babel-loader</code>，如果在任何根目录下都没有找到 <code>node_modules</code> 目录，将会降级回退到操作系统默认的临时文件目录。</p><blockquote><p>使用 cacheDirectory 选项，将 babel-loader 提速至少两倍。</p></blockquote><h5 id="babel-的-Presets-配置"><a href="#babel-的-Presets-配置" class="headerlink" title="babel 的 Presets 配置"></a>babel 的 Presets 配置</h5><p>presets 属性告诉 Babel 要转换的源码使用了哪些新的语法特性，一个 Presets 对一组新语法特性提供支持，多个 Presets 可以叠加。 Presets 其实是一组 Plugins 的集合，每一个 Plugin 完成一个新语法的转换工作。Presets 是按照 ECMAScript 草案来组织的，通常可以分为以下三大类：</p><ol><li><p>已经被写入 ECMAScript 标准里的特性，由于之前每年都有新特性被加入到标准里，所以又可细分为：</p><ul><li>es2015 包含在2015里加入的新特性；</li><li>es2016 包含在2016里加入的新特性；</li><li>es2017 包含在2017里加入的新特性；</li><li>env 包含当前所有 ECMAScript 标准里的最新特性。</li></ul></li><li><p>被社区提出来的但还未被写入 ECMAScript 标准里特性，这其中又分为以下四种：</p><ul><li>stage0 只是一个美好激进的想法，有 Babel 插件实现了对这些特性的支持，但是不确定是否会被定为标准；</li><li>stage1 值得被纳入标准的特性；</li><li>stage2 该特性规范已经被起草，将会被纳入标准里；</li><li>stage3 该特性规范已经定稿，各大浏览器厂商和 Node.js 社区开始着手实现；</li><li>stage4 在接下来的一年将会加入到标准里去。</li></ul></li><li><p>为了支持一些特定应用场景下的语法，和 ECMAScript 标准没有关系，例如 babel-preset-react 是为了支持 React 开发中的 JSX 语法。</p></li></ol><h5 id="babel-的-Plugins-配置"><a href="#babel-的-Plugins-配置" class="headerlink" title="babel 的 Plugins 配置"></a>babel 的 Plugins 配置</h5><p>plugins 属性告诉 Babel 要使用哪些插件，插件可以控制如何转换代码。</p><p>安装项目中需要使用的 Presets 插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install babel-preset-env babel-preset-stage-0 --save-dev</span><br></pre></td></tr></table></figure></p><p>安装项目中需要的 babel Plugin<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install babel-plugin-transform-class-properties babel-plugin-transform-runtime babel-runtime --save-dev</span><br></pre></td></tr></table></figure></p><ul><li><p>babel-plugin-transform-class-properties 可以在项目中使用新增的 class 属性用法</p></li><li><p>babel-plugin-transform-runtime 由于 babel 转换文件时会在每个文件中都写入辅助代码，使用此插件可以直接使用 babel-runtime 中的代码进行转换，避免代码冗余。所以 babel-plugin-transform-runtime 和 babel-runtime 成对使用</p></li></ul><p>.babelrc<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [<span class="string">"env"</span>, <span class="string">"stage-0"</span>],</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">        <span class="string">"transform-runtime"</span>,</span><br><span class="line">        <span class="string">"transform-class-properties"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>配置完成，此时就可以在项目中自由的使用 ES6 等新增 js 语法了。</p></blockquote><h3 id="使用-friendly-errors-webpack-plugin"><a href="#使用-friendly-errors-webpack-plugin" class="headerlink" title="使用 friendly-errors-webpack-plugin"></a>使用 friendly-errors-webpack-plugin</h3><p>有时候项目提示错误，可能是编译错误，可能是 ESLint 提示错误等等，我们希望错误提示能够友好一些，就可以使用这个插件</p><p>插件安装：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install friendly-errors-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></p><p>使用：</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">const</span> FriendlyErrorsWebpackPlugin = <span class="built_in">require</span>(<span class="string">'friendly-errors-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...,</span><br><span class="line">    plugins: [</span><br><span class="line">        ...</span><br><span class="line">        <span class="keyword">new</span> FriendlyErrorsWebpackPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>更多配置请参考<a href="https://github.com/geowarin/friendly-errors-webpack-plugin" target="_blank" rel="noopener">插件文档</a></p><h3 id="配置模块如何解析-resolve"><a href="#配置模块如何解析-resolve" class="headerlink" title="配置模块如何解析 resolve"></a>配置模块如何解析 resolve</h3><p>开发的时候我们经常会需要引入自己写的文件模块，可能会需要按照路径一级一级的找，这个时候我们就可以配置 resolve，为一些常用的路径设置别名</p><p>配置：</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ...</span><br><span class="line">    plugins: [...],</span><br><span class="line">    modules: &#123;...&#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            src: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用：<br>无论在任何文件里，引入 src 目录下的 index.css 文件时，路径都可以按照下面的这个引入路径来写</p><p>index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- <span class="built_in">require</span>(<span class="string">'./index.css'</span>);</span><br><span class="line">+ <span class="keyword">import</span> <span class="string">'src/index.css'</span>;</span><br></pre></td></tr></table></figure></p><p>重新运行项目，发现项目正常启动，index.css 中的样式也正常生效</p><p><strong>至此，一个简单的开发环境的 Webpack 脚手架搭建完成了。</strong> </p><h3 id="最终的项目结构以及文件代码"><a href="#最终的项目结构以及文件代码" class="headerlink" title="最终的项目结构以及文件代码"></a>最终的项目结构以及文件代码</h3><p>project<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">webpack-dev-demo</span><br><span class="line">|- package.json</span><br><span class="line">|- /public</span><br><span class="line">  |- index.html</span><br><span class="line">|- /src</span><br><span class="line">  |- index.js</span><br><span class="line">  |- index.css</span><br></pre></td></tr></table></figure></p><p>public/index.html<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack 开发环境配置<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>src/index.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'src/index.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">component</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line"></span><br><span class="line">    element.innerHTML = <span class="string">'Hello World'</span>;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line"><span class="built_in">document</span>.body.appendChild(component());</span><br></pre></td></tr></table></figure></p><p>src/index.css<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>.babelrc<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"presets"</span>: [<span class="string">"env"</span>, <span class="string">"stage-0"</span>],</span><br><span class="line">    <span class="attr">"plugins"</span>: [</span><br><span class="line">        <span class="string">"transform-runtime"</span>,</span><br><span class="line">        <span class="string">"transform-class-properties"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HTMLWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    mode: <span class="string">'development'</span>,</span><br><span class="line">    devtool: <span class="string">'inline-source-map'</span>,</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        filename: <span class="string">'[name]-[hash:8].js'</span>,</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        <span class="comment">// 必须配置的选项，服务启动的目录，默认为跟目录</span></span><br><span class="line">        contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">        <span class="comment">// 使用热加载时需要设置为 true</span></span><br><span class="line">        hot: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 下面为可选配置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">// 指定使用一个 host。默认是 localhost</span></span><br><span class="line">        host: <span class="string">'localhost'</span>,</span><br><span class="line">        <span class="comment">// 端口号</span></span><br><span class="line">        port: <span class="number">8000</span>,</span><br><span class="line">        <span class="comment">// 当使用 HTML5 History API 时，任意的 404 响应都可能需要被替代为 index.html。通过设置为 true 进行启用</span></span><br><span class="line">        historyApiFallback: &#123;</span><br><span class="line">            disableDotRule: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 出现错误时是否在浏览器上出现遮罩层提示</span></span><br><span class="line">        overlay: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 在 dev-server 的两种不同模式之间切换</span></span><br><span class="line"><span class="comment">         *   默认情况下，应用程序启用内联模式 inline</span></span><br><span class="line"><span class="comment">         *   设置为 false，使用 iframe 模式，它在通知栏下面使用 &lt;iframe&gt; 标签，包含了关于构建的消息</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        inline: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 统计信息，枚举类型，可供选项：</span></span><br><span class="line"><span class="comment">         *      "errors-only": 只在发生错误时输出</span></span><br><span class="line"><span class="comment">         *      "minimal": 只在发生错误或有新的编译时输出</span></span><br><span class="line"><span class="comment">         *      "none": 没有输出</span></span><br><span class="line"><span class="comment">         *      "normal": 标准输出</span></span><br><span class="line"><span class="comment">         *      "verbose": 全部输出</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        stats: <span class="string">"errors-only"</span>,</span><br><span class="line">        <span class="comment">// 设置接口请求代理，更多 proxy 配置请参考 https://github.com/chimurai/http-proxy-middleware#options</span></span><br><span class="line">        proxy: &#123;</span><br><span class="line">            <span class="string">'/api/'</span>: &#123;</span><br><span class="line">                changeOrigin: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 目标地址</span></span><br><span class="line">                target: <span class="string">'http://localhost:3000'</span>,</span><br><span class="line">                <span class="comment">// 重写路径</span></span><br><span class="line">                pathRewrite: &#123;</span><br><span class="line">                    <span class="string">'^/api/'</span>: <span class="string">'/'</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HTMLWebpackPlugin(&#123;</span><br><span class="line">            <span class="comment">// 用于生成的HTML文档的标题</span></span><br><span class="line">            title: <span class="string">'Webpack 开发环境配置'</span>,</span><br><span class="line">            <span class="comment">// webpack 生成模板的路径</span></span><br><span class="line">            template: <span class="string">'./public/index.html'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// 用法：new CleanWebpackPlugin(paths [, &#123;options&#125;])</span></span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>]),</span><br><span class="line">        <span class="comment">// 添加 NamedModulesPlugin，以便更容易查看要修补(patch)的依赖，由于设置了 mode: 'development'，所以这个插件可以省略</span></span><br><span class="line">        <span class="comment">// new webpack.NamedModulesPlugin(),</span></span><br><span class="line">        <span class="comment">// 进行模块热替换</span></span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">    ],</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.js/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">                loader: <span class="string">'babel-loader?cacheDirectory'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析 css</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>),</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'style-loader'</span>,</span><br><span class="line">                    <span class="comment">// 还可以给 loader 添加一些配置</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">                        options: &#123;</span><br><span class="line">                            <span class="comment">// 开启 sourceMop</span></span><br><span class="line">                            sourceMap: <span class="literal">true</span></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析图片资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|svg|jpg|gif)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'file-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析 字体</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(woff|woff2|eot|ttf|otf)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'file-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析数据资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(csv|tsv)$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'csv-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析数据资源</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.xml$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">'xml-loader'</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解析 MakeDown 文件</span></span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.md$/</span>,</span><br><span class="line">                use: [</span><br><span class="line">                    <span class="string">"html-loader"</span>, </span><br><span class="line">                    <span class="string">"markdown-loader"</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    resolve: &#123;</span><br><span class="line">        alias: &#123;</span><br><span class="line">            src: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>package.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"webpack-dev-demo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack --config webpack.config.js"</span>,</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"webpack-dev-server"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"babel-core"</span>: <span class="string">"^6.26.3"</span>,</span><br><span class="line">    <span class="attr">"babel-loader"</span>: <span class="string">"^7.1.5"</span>,</span><br><span class="line">    <span class="attr">"babel-plugin-transform-class-properties"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line">    <span class="attr">"babel-plugin-transform-runtime"</span>: <span class="string">"^6.23.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-env"</span>: <span class="string">"^1.7.0"</span>,</span><br><span class="line">    <span class="attr">"babel-preset-stage-0"</span>: <span class="string">"^6.24.1"</span>,</span><br><span class="line">    <span class="attr">"babel-runtime"</span>: <span class="string">"^6.26.0"</span>,</span><br><span class="line">    <span class="attr">"clean-webpack-plugin"</span>: <span class="string">"^1.0.1"</span>,</span><br><span class="line">    <span class="attr">"css-loader"</span>: <span class="string">"^2.1.0"</span>,</span><br><span class="line">    <span class="attr">"html-webpack-plugin"</span>: <span class="string">"^3.2.0"</span>,</span><br><span class="line">    <span class="attr">"style-loader"</span>: <span class="string">"^0.23.1"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.29.0"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.2.1"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^3.1.14"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h2 id="源码地址"><a href="#源码地址" class="headerlink" title="源码地址"></a>源码地址</h2><p><strong><a href="https://github.com/beichensky/webpack-demo/tree/master/webpack-dev-demo" target="_blank" rel="noopener">本文 Demo 地址</a></strong></p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文篇幅较长，感谢各位的耐心阅读。本文主要从 入口、输出、插件（Plugins）、模块处理（Module）、loader、解析（resolve）等 6 个配置项着手配置了一个基本的 webpack 开发环境脚手架。本文主要讲解的内容为：</p><ul><li><p>loader 的作用以及如何配置使用</p></li><li><p>babel 的作用以及配置项</p></li><li><p>各个插件的功能以及适用场景</p></li><li><p>解析能够为开发带来的效率</p></li></ul><p>本文内容对于已经熟练掌握 Webpack 的朋友来说，可能有些浅薄，但是着重讲解了各个配置项的功能以及配置后对项目产生的效果。对于准备入门 webpack 的朋友应该会有一定的帮助。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文使用 Webpack 从零开始搭建一个开发环境的脚手架配置，在此做个记录，也方便以后使用。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我的上一篇文章简单介
      
    
    </summary>
    
      <category term="Webpack" scheme="https://beichensky.github.io/categories/Webpack/"/>
    
    
      <category term="Webpack" scheme="https://beichensky.github.io/tags/Webpack/"/>
    
      <category term="Development" scheme="https://beichensky.github.io/tags/Development/"/>
    
  </entry>
  
  <entry>
    <title>Webpack 的简单介绍</title>
    <link href="https://beichensky.github.io/20190130/webpack-basic/"/>
    <id>https://beichensky.github.io/20190130/webpack-basic/</id>
    <published>2019-01-30T07:40:29.000Z</published>
    <updated>2019-02-17T03:48:50.877Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了一些 webpack 的核心概念以及一些概念术语，并对核心配置做了一些简单的用法讲解。建议刚刚接触 Webpack 的朋友可以先了解一下。想了解更多 Webpack 使用以及配置的话可以参考我的下一篇文章： <strong><a href="https://lufanfan.github.io/20190130/webpack-dev/" target="_blank" rel="noopener">从零开始搭建一个 Webpack 开发环境配置（附 Demo）</a></strong></p><hr><h2 id="为什么需要使用-webpack"><a href="#为什么需要使用-webpack" class="headerlink" title="为什么需要使用 webpack"></a>为什么需要使用 webpack</h2><ul><li><p>模块化开发的趋势<br>我们在开发的过程中，之前都是使用引入 script 的方式进行各种工具和插件的引入，但是这样会造成很大程度上的全局污染，所以引入了 <strong>模块化</strong> 的概念，但是不管是 commomJs 还是 CMD，AMD 的方式，浏览器无法识别，而使用 webpack 就可以自动的将文件编译成浏览器可以识别的代码</p></li><li><p>less、sass 以及 ES6 语法的使用<br>同样的，直接使用 less、sass 和 ES6 语法，直接使用，浏览器甚至 node 环境也无法正常识别，所以这时候 loader 就派上用场了，可以使用 less-loader、sass-loader 以及 babel-lodaer 对对应的文件进行转换之后，就可以正常的编译了</p></li><li><p>监听文件的变化并自动刷新网页，做到实时预览</p></li><li><p>提供 HTTP 服务而不是使用本地文件预览</p></li><li><p>对于打包后的文件进行压缩，模块拆分，减小打包后的文件体积</p></li><li><p>等等还有很多别的优势，这里我就不一一列举了</p></li></ul><hr><h2 id="webpack-安装"><a href="#webpack-安装" class="headerlink" title="webpack 安装"></a>webpack 安装</h2><ul><li><p>全局安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global webpack</span><br></pre></td></tr></table></figure></li><li><p>本地安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack</span><br><span class="line">npm install --save-dev webpack-cli</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Webpack-概念"><a href="#Webpack-概念" class="headerlink" title="Webpack 概念"></a>Webpack 概念</h2><p>webpack 是一个可高度配置的现代 JavaScript 应用程序模块打包器。当 webpack 处理应用程序时，它会递归地构建一个依赖关系图，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 bundle。</p><h2 id="Webpack-核心概念"><a href="#Webpack-核心概念" class="headerlink" title="Webpack 核心概念"></a>Webpack 核心概念</h2><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a>入口</h3><p>入口点可以告诉 webpack 从哪里启动以及遵循依赖关系图，以此知道要打包什么东西。你可以考虑将待打包文件的根目录作为你应用程序的入口点。</p><blockquote><p>个人理解：入口就是 webpack 在处理应用程序时，需要知道从哪个文件开始执行，这个文件就是整个程序的入口文件。</p></blockquote><p>用法：entry: string|Array<string>|Object</string></p><h4 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h4><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: <span class="string">'./src/index.js'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></p><h4 id="数组语法"><a href="#数组语法" class="headerlink" title="数组语法"></a>数组语法</h4><p>一般适用于多页面应用，多个入口的场景。</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: [<span class="string">'./src/entry1'</span>, <span class="string">'./src/entry2'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></p><h4 id="对象语法"><a href="#对象语法" class="headerlink" title="对象语法"></a>对象语法</h4><p>一般适用于分离 应用程序(app) 和 第三方库(vendor) 入口。</p><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: <span class="string">'./src/app.js'</span>,</span><br><span class="line">    vendors: <span class="string">'./src/vendors.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><h4 id="配置动态入口"><a href="#配置动态入口" class="headerlink" title="配置动态入口"></a>配置动态入口</h4><p>假如项目里有多个页面需要为每个页面的入口配置一个 Entry ，但这些页面的数量可能会不断增长，则这时 Entry 的配置会受到到其他因素的影响导致不能写成静态的值。</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 同步函数</span></span><br><span class="line">entry: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    a:<span class="string">'./pages/a'</span>,</span><br><span class="line">    b:<span class="string">'./pages/b'</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 异步函数</span></span><br><span class="line">entry: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>)=&gt;</span>&#123;</span><br><span class="line">    resolve(&#123;</span><br><span class="line">       a:<span class="string">'./pages/a'</span>,</span><br><span class="line">       b:<span class="string">'./pages/b'</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>上面既然已经有入口文件了，那么 webpack 执行了一系列操作之后，生成的新的打包后的文件应该放到哪儿呢，所以我们需要指定一下。</p><p>在 webpack 中配置 output 属性的最低要求是，将它的值设置为一个对象，包括以下两点：</p><ul><li>filename 用于输出文件的文件名</li><li>目标输出目录 path 的绝对路径</li></ul><h4 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h4><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    entry: <span class="string">'./src/index.js'</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">// 最基本的两个配置要求</span></span><br><span class="line">        filename: <span class="string">'bundle.js'</span>,  <span class="comment">// 输出文件的文件名</span></span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'dist'</span>)   <span class="comment">// 目标输出目录 path 的绝对路径，这里必须是绝对路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></p><h4 id="多个入口起点"><a href="#多个入口起点" class="headerlink" title="多个入口起点"></a>多个入口起点</h4><p>如果配置创建了多个单独的 “chunk”，则应该使用占位符（参考<em><a href="#内置的占位符变量">内置的占位符变量</a></em>）来确保每个文件具有唯一的名称。</p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 最基本的两个配置要求</span></span><br><span class="line">    filename: <span class="string">'[name]-bundle.js'</span>,  <span class="comment">// 输出文件的文件名</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'dist'</span>)   <span class="comment">// 目标输出目录 path 的绝对路径</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></p><h4 id="内置的占位符变量"><a href="#内置的占位符变量" class="headerlink" title="内置的占位符变量"></a>内置的占位符变量</h4><table><thead><tr><th>变量名</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>Chunk 的唯一标识，从0开始</td></tr><tr><td>name</td><td>Chunk 的名称</td></tr><tr><td>hash</td><td>Chunk 的唯一标识的 Hash 值</td></tr><tr><td>chunkhash</td><td>Chunk 内容的 Hash 值</td></tr></tbody></table><h3 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h3><p>loader 用于对模块的源代码进行转换。loader 可以使你在 <code>import</code>、<code>require()</code> 或”加载”模块时预处理文件。<br>loader 可以将文件从不同的语言（如 TypeScript）转换为 JavaScript，或将内联图像转换为 data URL。loader 甚至允许你直接在 JavaScript 模块中 import CSS文件！</p><h4 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h4><p>例如：加载 css 模块：</p><ul><li><p>安装对应的 loader</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev style-loader css-loader</span><br></pre></td></tr></table></figure></li><li><p>然后指示 webpack 对每个 .css 使用 css-loader 和 style-loader</p><p>webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h4 id="配置-loader"><a href="#配置-loader" class="headerlink" title="配置 loader"></a>配置 loader</h4><p>rules 配置模块的读取和解析规则，通常用来配置 Loader。其类型是一个数组，数组里每一项都描述了如何去处理部分文件。 配置一项 rules 时大致通过以下方式：</p><ul><li><p>条件匹配：通过 test 、 include 、 exclude 三个配置项来命中 Loader 要应用规则的文件</p></li><li><p>应用规则：对选中后的文件通过 use 配置项来应用 Loader，可以只应用一个 Loader 或者按照从后往前的顺序应用一组 Loader，同时还可以分别给 Loader 传入参数</p></li><li><p>重置顺序：一组 Loader 的执行顺序默认是从右到左（从下到上、从后到前）执行，通过 enforce 选项可以让其中一个 Loader 的执行顺序放到最前或者最后</p></li><li><p>在 Loader 需要传入很多参数时，你还可以通过一个 Object 来描述</p></li><li><p>test include exclude 这三个命中文件的配置项可以传入一个字符串或正则，其实它们还都支持数组类型</p></li></ul><p>具体使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            </span><br><span class="line">             &#123;</span><br><span class="line">                <span class="comment">// 命中 JavaScript 文件</span></span><br><span class="line">                test: [</span><br><span class="line">                    /\.js?$/,</span><br><span class="line">                    /\.jsx?$/</span><br><span class="line">                ],</span><br><span class="line">                <span class="comment">// 用 babel-loader 转换 JavaScript 文件</span></span><br><span class="line">                <span class="comment">// ?cacheDirectory 表示传给 babel-loader 的参数，用于缓存 babel 编译结果加快重新编译速度</span></span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader:<span class="string">'babel-loader'</span>,</span><br><span class="line">                        options:&#123;</span><br><span class="line">                            cacheDirectory:<span class="literal">true</span>,</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="comment">// enforce:'post' 的含义是把该 Loader 的执行顺序放到最后</span></span><br><span class="line">                        <span class="comment">// enforce 的值还可以是 pre，代表把 Loader 的执行顺序放到最前面</span></span><br><span class="line">                        enforce:<span class="string">'post'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                <span class="comment">// 只命中src目录里的js文件，加快 Webpack 搜索速度</span></span><br><span class="line">                include: path.resolve(__dirname, <span class="string">'src'</span>)</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 命中 SCSS 文件</span></span><br><span class="line">                test: <span class="regexp">/\.scss$/</span>,</span><br><span class="line">                <span class="comment">// 使用一组 Loader 去处理 SCSS 文件。</span></span><br><span class="line">                <span class="comment">// 处理顺序为从后到前，即先交给 sass-loader 处理，再把结果交给 css-loader 最后再给 style-loader。</span></span><br><span class="line">                use: [<span class="string">'style-loader'</span>, <span class="string">'css-loader'</span>, <span class="string">'sass-loader'</span>],</span><br><span class="line">                <span class="comment">// 排除 node_modules 目录下的文件</span></span><br><span class="line">                exclude: path.resolve(__dirname, <span class="string">'node_modules'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><h3 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h3><p>Plugin 是用来扩展 Webpack 功能的，通过在构建流程里注入钩子实现，它给 Webpack 带来了很大的灵活性。</p><h4 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h4><p>比如每次打包文件到 dist 文件夹下，就可能导致文件夹下面的文件过多，内容过大，那么此时我们可能需要在打包之前先将 dist 文件下的文件都删除掉，但是每次都手动删除岂不是太麻烦，此时我们就可以使用 clean-webpack-plugin 插件来帮助我们清理 dist 文件夹</p><p>插件安装<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install clean-webpack-plugin --save-dev</span><br></pre></td></tr></table></figure></p><p>webpack.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>])</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="其他概念术语"><a href="#其他概念术语" class="headerlink" title="其他概念术语"></a>其他概念术语</h2><h3 id="资源-Asset"><a href="#资源-Asset" class="headerlink" title="资源(Asset)"></a>资源(Asset)</h3><p>这是一个普遍的术语，用于图片、字体、媒体，还有一些其他类型的文件，常用在网站和其他应用程序。这些文件通常最终在输出(output ) 中成为单个文件，但也可以通过一些东西内联，像 style-loader 或者 url-loader 。</p><h3 id="Bundle"><a href="#Bundle" class="headerlink" title="Bundle"></a>Bundle</h3><p>由多个不同的模块生成，bundles 包含了早已经过加载和编译的最终源文件版本。</p><h3 id="Chunk"><a href="#Chunk" class="headerlink" title="Chunk"></a>Chunk</h3><p>这是 webpack 特定的术语被用在内部来管理 building 过程。bundle 由 chunk 组成，其中有几种类型（例如，入口 chunk(entry chunk) 和子 chunk(child chunk)）。通常 chunk 会直接对应所输出的 bundle，但是有一些配置并不会产生一对一的关系。</p><h3 id="依赖关系图-Dependency-Graph"><a href="#依赖关系图-Dependency-Graph" class="headerlink" title="依赖关系图(Dependency Graph)"></a>依赖关系图(Dependency Graph)</h3><p>有时候一个文件依赖于其他文件，webpack 将其视为依赖关系(dependency)。从一个或多个入口点开始，webpack 递归构建一个依赖关系图，里面包含了你的应用程序需要的所有模块/资源(mudule/asset)。</p><h3 id="模块-Module"><a href="#模块-Module" class="headerlink" title="模块(Module)"></a>模块(Module)</h3><p>提供比完整程序接触面(surface area)更小的离散功能块。精心编写的模块提供了可靠的抽象和封装界限，使得应用程序中每个模块都具有条理清楚的设计和明确的目的。</p><ul><li>模块解析(Module Resolution)：一个模块可以作为另一个模块的依赖模块，resolver 是一个库( library )用于帮助找到模块的绝对路径… 模块将在 resolve.modules 中指定的所有目录内搜索。</li></ul><h3 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h3><p>移除未使用/多余的代码，或者更准确地说，只导入引用的代码。编译器(compiler)（例如 webpack）将通过分析各种 import 语句和引入代码的使用情况，来确定哪些部分的依赖关系被实际使用，删除不是“树”的部分，以实现此功能</p><h3 id="第三方库入口点-Vendor-Entry-Point"><a href="#第三方库入口点-Vendor-Entry-Point" class="headerlink" title="第三方库入口点(Vendor Entry Point)"></a>第三方库入口点(Vendor Entry Point)</h3><p> 从 app.js 和 vendors.js 开始创建依赖图(dependency graph)。这些依赖图是彼此完全分离、互相独立的，允许你使用 CommonsChunkPlugin 从「应用程序 bundle」中提取 vendor 引用(vendor reference) 到 vendor bundle。可以帮助你在 webpack 中实现被称为长效缓存的通用模式。</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li><p>Bundle 分离(Bundle Splitting)<br>这个流程提供一个优化 build 的方法，允许 webpack 为应用程序生成多个 bundle。最终效果是，当其他某些 bundle 的改动时，彼此独立的另一些 bundle 都可以不受到影响，减少需要重新发布的代码量，因此由客户端重新下载并利用浏览器缓存。</p></li><li><p>代码分离(Code Splitting)<br>指将代码分离到每个 bundles/chunks 里面，你可以按需加载，而不是加载一个包含全部的 bundle。</p></li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文简单介绍了一下 Webpack 的作用以及 Webpack 核心概念的用法。想了解更多的朋友可以参考我的下一篇文章：<strong><a href="https://lufanfan.github.io/20190130/webpack-dev/" target="_blank" rel="noopener">从零开始搭建一个 Webpack 开发环境配置（附 Demo）</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文介绍了一些 webpack 的核心概念以及一些概念术语，并对核心配置做了一些简单的用法讲解。建议刚刚接触 Webpack 的朋友可以先了解一下。想了解更多 Webpack 使用以及配置的话可以参考我的下一篇文章： &lt;strong&gt;&lt;a href=&quot;https://luf
      
    
    </summary>
    
      <category term="Webpack" scheme="https://beichensky.github.io/categories/Webpack/"/>
    
    
      <category term="Webpack" scheme="https://beichensky.github.io/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>React 组件生命周期详解</title>
    <link href="https://beichensky.github.io/20190121/react-component-lifecycle/"/>
    <id>https://beichensky.github.io/20190121/react-component-lifecycle/</id>
    <published>2019-01-21T07:57:59.000Z</published>
    <updated>2019-02-17T03:48:50.877Z</updated>
    
    <content type="html"><![CDATA[<p>本文详细介绍了 React 生命周期的用法以及各个阶段的生命周期进行，并且用实例代码做了详细演示。<strong><a href="https://github.com/beichensky/ReactUtilsDemo/tree/master/react-component-lifecycle" target="_blank" rel="noopener">代码位置</a></strong></p><a id="more"></a><h2 id="话不多说，先上图"><a href="#话不多说，先上图" class="headerlink" title="话不多说，先上图"></a>话不多说，先上图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-cycle-life/React生命周期图解.png" alt="React生命周期图解" title="">                </div>                <div class="image-caption">React生命周期图解</div>            </figure><blockquote><p>上图是基于 React 16.4 之后的生命周期图解。如感觉不对，请先查看 React 版本</p></blockquote><hr><h2 id="React-生命周期详解"><a href="#React-生命周期详解" class="headerlink" title="React 生命周期详解"></a>React 生命周期详解</h2><h3 id="各个阶段的生命周期函数"><a href="#各个阶段的生命周期函数" class="headerlink" title="各个阶段的生命周期函数"></a>各个阶段的生命周期函数</h3><h4 id="constructor-构造函数"><a href="#constructor-构造函数" class="headerlink" title="constructor 构造函数"></a>constructor 构造函数</h4><p>在 React 组件挂载之前被调用，实现 <code>React.Component</code> 的子类的构造函数时，要在第一行加上 super(props)。</p><p>React 构造函数通常只用于两个目的：</p><ul><li>通过分配一个对象到 <code>this.state</code> 来初始化本地 <code>state</code></li><li>将 事件处理程序 方法绑定到实例</li></ul><p>如果没有初始化状态（<code>state</code>），并且没有绑定方法，通常不需要为 <code>React</code> 组件实现一个构造函数。</p><blockquote><p>不需要在构造函数中调用 <code>setState()</code>，只需将初始状态设置给 <code>this.state</code> 即可 。</p></blockquote><h4 id="static-getDerivedStateFromProps"><a href="#static-getDerivedStateFromProps" class="headerlink" title="static getDerivedStateFromProps()"></a>static getDerivedStateFromProps()</h4><p><code>getDerivedStateFromProps</code> 在每次调用 render 方法之前调用。包括初始化和后续更新时。</p><blockquote><p>包含两个参数：第一个参数为即将更新的 <code>props</code> 值，第二个参数为之前的 <code>state</code> 值</p></blockquote><blockquote><p>返回值：返回为 <code>null</code> 时，不做任何副作用处理。倘若想更新某些 <code>state</code> 状态值，则返回一个对象，就会对 <code>state</code> 进行修改</p></blockquote><blockquote><p>该生命周期是静态函数，属于类的方法，其作用域内是找不到 <code>this</code> 的</p></blockquote><h4 id="render"><a href="#render" class="headerlink" title="render()"></a>render()</h4><p><code>render()</code> 方法是类组件中唯一必须的方法，其余生命周期不是必须要写。<br>组件渲染时会走到该生命周期，展示的组件都是由 render() 生命周期的返回值来决定。</p><blockquote><p><strong>注意：</strong><br>如果 shouldComponentUpdate() 方法返回 false ，render() 不会被调用。</p></blockquote><h4 id="componentDidMount"><a href="#componentDidMount" class="headerlink" title="componentDidMount()"></a>componentDidMount()</h4><p>在 React 组件装载(mounting)（插入树）后被立即调用。</p><p>componentDidMount 生命周期是进行发送网络请求、启用事件监听的好时机</p><p>如果有必要，可以在此生命周期中立刻调用 setState()</p><h4 id="shouldComponentUpdate-nextProps-nextState"><a href="#shouldComponentUpdate-nextProps-nextState" class="headerlink" title="shouldComponentUpdate(nextProps, nextState)"></a>shouldComponentUpdate(nextProps, nextState)</h4><p>在组件准备更新之前调用，可以控制组件是否进行更新，返回 true 时组件更新，返回 false 组件不更新。</p><blockquote><p>包含两个参数，第一个是即将更新的 props 值，第二个是即将跟新后的 state 值，可以根据更新前后的 props 或 state 进行判断，决定是否更新，进行性能优化</p></blockquote><blockquote><p>不要 <code>shouldComponentUpdate</code> 中调用 setState()，否则会导致无限循环调用更新、渲染，直至浏览器内存崩溃</p></blockquote><h4 id="getSnapshotBeforeUpdate-prevProps-prevState"><a href="#getSnapshotBeforeUpdate-prevProps-prevState" class="headerlink" title="getSnapshotBeforeUpdate(prevProps, prevState)"></a>getSnapshotBeforeUpdate(prevProps, prevState)</h4><p><code>getSnapshotBeforeUpdate()</code> 在最近一次的渲染输出被提交之前调用。也就是说，在 render 之后，即将对组件进行挂载时调用。</p><blockquote><p>它可以使组件在 DOM 真正更新之前捕获一些信息（例如滚动位置），此生命周期返回的任何值都会作为参数传递给 <code>componentDidUpdate()</code>。如不需要传递任何值，那么请返回 null</p></blockquote><h4 id="componentDidUpdate-prevProps-prevState-snapshot"><a href="#componentDidUpdate-prevProps-prevState-snapshot" class="headerlink" title="componentDidUpdate(prevProps, prevState, snapshot)"></a>componentDidUpdate(prevProps, prevState, snapshot)</h4><p><code>componentDidUpdate()</code> 在更新发生之后立即被调用。这个生命周期在组件第一次渲染时不会触发。</p><blockquote><p>可以在此生命周期中调用 setState()，但是<strong>必须包含在条件语句</strong>中，否则会造成无限循环，最终导致浏览器内存崩溃</p></blockquote><h4 id="componentWillUnmount"><a href="#componentWillUnmount" class="headerlink" title="componentWillUnmount()"></a>componentWillUnmount()</h4><p><code>componentWillUnmount()</code> 在组件即将被卸载或销毁时进行调用。</p><p>此生命周期是<strong>取消网络请求</strong>、移除<strong>监听事件</strong>、<strong>清理 DOM 元素</strong>、<strong>清理定时器</strong>等操作的好时机</p><blockquote><p><strong>注意：</strong><br>componentWillMount()、componentWillUpdate()、componentWillReceiveProps() 即将被废弃，请不要再在组件中进行使用。因此本文不做讲解，避免混淆。</p></blockquote><h3 id="生命周期执行顺序"><a href="#生命周期执行顺序" class="headerlink" title="生命周期执行顺序"></a>生命周期执行顺序</h3><h4 id="挂载时"><a href="#挂载时" class="headerlink" title="挂载时"></a>挂载时</h4><ul><li><p>constructor()</p></li><li><p>static getDerivedStateFromProps()</p></li><li><p>render()</p></li><li><p>componentDidMount()</p></li></ul><h4 id="更新时"><a href="#更新时" class="headerlink" title="更新时"></a>更新时</h4><ul><li><p>static getDerivedStateFromProps()</p></li><li><p>shouldComponentUpdate()</p></li><li><p>render()</p></li><li><p>getSnapshotBeforeUpdate()</p></li><li><p>componentDidUpdate()</p></li></ul><h4 id="卸载时"><a href="#卸载时" class="headerlink" title="卸载时"></a>卸载时</h4><ul><li>componentWillUnmount()</li></ul><h3 id="生命周期中是否可以调用-setState"><a href="#生命周期中是否可以调用-setState" class="headerlink" title="生命周期中是否可以调用 setState()"></a>生命周期中是否可以调用 setState()</h3><h4 id="初始化-state"><a href="#初始化-state" class="headerlink" title="初始化 state"></a>初始化 state</h4><ul><li>constructor()</li></ul><h4 id="可以调用-setState"><a href="#可以调用-setState" class="headerlink" title="可以调用 setState()"></a>可以调用 setState()</h4><ul><li>componentDidMount()</li></ul><h4 id="根据判断条件可以调用-setState"><a href="#根据判断条件可以调用-setState" class="headerlink" title="根据判断条件可以调用 setState()"></a>根据判断条件可以调用 setState()</h4><ul><li>componentDidUpdate()</li></ul><h4 id="禁止调用-setState"><a href="#禁止调用-setState" class="headerlink" title="禁止调用 setState()"></a>禁止调用 setState()</h4><ul><li><p>shouldComponentUpdate()</p></li><li><p>getSnapshotBeforeUpdate()</p></li><li><p>render()</p></li><li><p>componentWillUnmount()</p></li></ul><hr><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p><strong><a href="https://github.com/beichensky/ReactUtilsDemo/tree/master/react-component-lifecycle" target="_blank" rel="noopener">源码地址</a></strong></p><p>下面根据一个父子组件的props 改变、state 改变以及子组件的挂载/卸载等事件，对各生命周期执行顺序进行理解，有兴趣的同学可以一起看一下，也可以下载代码自己进行测试。</p><h3 id="编写组件代码"><a href="#编写组件代码" class="headerlink" title="编写组件代码"></a>编写组件代码</h3><h4 id="父组件：Parent-js"><a href="#父组件：Parent-js" class="headerlink" title="父组件：Parent.js"></a>父组件：Parent.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Child <span class="keyword">from</span> <span class="string">'./Child.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> parentStyle = &#123;</span><br><span class="line">    padding: <span class="number">40</span>,</span><br><span class="line">    margin: <span class="number">20</span>,</span><br><span class="line">    border: <span class="string">'1px solid pink'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TAG = <span class="string">"Parent 组件："</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'constructor'</span>);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            num: <span class="number">0</span>,</span><br><span class="line">            mountChild: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> getDerivedStateFromProps(nextProps, prevState) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'getDerivedStateFromProps'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'componentDidMount'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'shouldComponentUpdate'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getSnapshotBeforeUpdate(prevProps, prevState) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'getSnapshotBeforeUpdate'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'componentDidUpdate'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'componentWillUnmount'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改传给子组件属性 num 的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    changeNum = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; num &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            num: ++ num</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切换子组件挂载和卸载的方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    toggleMountChild = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; mountChild &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            mountChild: !mountChild</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'render'</span>);</span><br><span class="line">        <span class="keyword">const</span> &#123; num, mountChild &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div style=&#123; parentStyle &#125;&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;p&gt;父组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;button onClick=&#123; this.changeNum &#125;&gt;改变传给子组件的属性 num&lt;/</span>button&gt;</span><br><span class="line">                    &lt;br /&gt;</span><br><span class="line">                    &lt;br /&gt;</span><br><span class="line">                    &lt;button onClick=&#123; <span class="keyword">this</span>.toggleMountChild &#125;&gt;卸载 / 挂载子组件&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>div&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    mountChild ? <span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">num</span>=<span class="string">&#123;</span> <span class="attr">num</span> &#125; /&gt;</span> : null</span></span><br><span class="line"><span class="xml">                &#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子组件：Child-js"><a href="#子组件：Child-js" class="headerlink" title="子组件：Child.js"></a>子组件：Child.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> childStyle = &#123;</span><br><span class="line">    padding: <span class="number">20</span>,</span><br><span class="line">    margin: <span class="number">20</span>,</span><br><span class="line">    border: <span class="string">'1px solid black'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> TAG = <span class="string">'Child 组件：'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'constructor'</span>);</span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            counter: <span class="number">0</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> getDerivedStateFromProps(nextProps, prevState) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'getDerivedStateFromProps'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'componentDidMount'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shouldComponentUpdate(nextProps, nextState) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'shouldComponentUpdate'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    getSnapshotBeforeUpdate(prevProps, prevState) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'getSnapshotBeforeUpdate'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    componentDidUpdate(prevProps, prevState, snapshot) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'componentDidUpdate'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentWillUnmount() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'componentWillUnmount'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    changeCounter = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> &#123; counter &#125;= <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            counter: ++ counter</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(TAG, <span class="string">'render'</span>);</span><br><span class="line">        <span class="keyword">const</span> &#123; num &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">        <span class="keyword">const</span> &#123; counter &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div style=&#123; childStyle &#125;&gt;</span><br><span class="line">                &lt;p&gt;子组件&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;p&gt;父组件传过来的属性 num ： &#123; num &#125;&lt;/</span>p&gt;</span><br><span class="line">                &lt;p&gt;自身状态 counter ： &#123; counter &#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                &lt;button onClick=&#123; this.changeCounter &#125;&gt;改变自身状态 counter&lt;/</span>button&gt;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="从五种组件状态改变的时机来探究生命周期的执行顺序"><a href="#从五种组件状态改变的时机来探究生命周期的执行顺序" class="headerlink" title="从五种组件状态改变的时机来探究生命周期的执行顺序"></a>从五种组件状态改变的时机来探究生命周期的执行顺序</h3><h4 id="一、父子组件初始化"><a href="#一、父子组件初始化" class="headerlink" title="一、父子组件初始化"></a>一、父子组件初始化</h4><p>父子组件第一次进行渲染加载时，界面展示为：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/react-cycle-life/initComponent.png" alt="初始化展示界面" title="">                </div>                <div class="image-caption">初始化展示界面</div>            </figure></p><p>控制台中的 log 打印顺序为：</p><ul><li>Parent 组件： constructor()</li><li>Parent 组件： getDerivedStateFromProps()</li><li>Parent 组件： render()</li><li>Child 组件： constructor()</li><li>Child 组件： getDerivedStateFromProps()</li><li>Child 组件： render()</li><li>Child 组件： componentDidMount()</li><li>Parent 组件： componentDidMount()</li></ul><h4 id="二、修改子组件自身状态-state-时"><a href="#二、修改子组件自身状态-state-时" class="headerlink" title="二、修改子组件自身状态 state 时"></a>二、修改子组件自身状态 state 时</h4><p>点击子组件中的 <em>改变自身状态</em> 按钮，则界面上 <em>自身状态 counter：</em> 的值会 + 1，控制台中的 log 打印顺序为：</p><ul><li>Child 组件： getDerivedStateFromProps()</li><li>Child 组件： shouldComponentUpdate()</li><li>Child 组件： render()</li><li>Child 组件： getSnapshotBeforeUpdate()</li><li>Child 组件： componentDidUpdate()</li></ul><h4 id="三、修改父组件中传入子组件的-props-时"><a href="#三、修改父组件中传入子组件的-props-时" class="headerlink" title="三、修改父组件中传入子组件的 props 时"></a>三、修改父组件中传入子组件的 props 时</h4><p>点击父组件中的 <em>改变传给子组件的属性 num</em> 按钮，则界面上 <em>父组件传过来的属性 num：</em> 的值会 + 1，控制台中的 log 打印顺序为：</p><ul><li>Parent 组件： getDerivedStateFromProps()</li><li>Parent 组件： shouldComponentUpdate()</li><li>Parent 组件： render()</li><li>Child 组件： getDerivedStateFromProps()</li><li>Child 组件： shouldComponentUpdate()</li><li>Child 组件： render()</li><li>Child 组件： getSnapshotBeforeUpdate()</li><li>Parent 组件： getSnapshotBeforeUpdate()</li><li>Child 组件： componentDidUpdate()</li><li>Parent 组件： componentDidUpdate()</li></ul><h4 id="四、卸载子组件"><a href="#四、卸载子组件" class="headerlink" title="四、卸载子组件"></a>四、卸载子组件</h4><p>点击父组件中的 <em>卸载 / 挂载子组件</em> 按钮，则界面上子组件会消失，控制台中的 log 打印顺序为：</p><ul><li>Parent 组件： getDerivedStateFromProps()</li><li>Parent 组件： shouldComponentUpdate()</li><li>Parent 组件： render()</li><li>Parent 组件： getSnapshotBeforeUpdate()</li><li>Child 组件： componentWillUnmount()</li><li>Parent 组件： componentDidUpdate()</li></ul><h4 id="五、重新挂载子组件"><a href="#五、重新挂载子组件" class="headerlink" title="五、重新挂载子组件"></a>五、重新挂载子组件</h4><p>再次点击父组件中的 <em>卸载 / 挂载子组件</em> 按钮，则界面上子组件会重新渲染出来，控制台中的 log 打印顺序为：</p><ul><li>Parent 组件： getDerivedStateFromProps()</li><li>Parent 组件： shouldComponentUpdate()</li><li>Parent 组件： render()</li><li>Child 组件： constructor()</li><li>Child 组件： getDerivedStateFromProps()</li><li>Child 组件： render()</li><li>Parent 组件： getSnapshotBeforeUpdate()</li><li>Child 组件： componentDidMount()</li><li>Parent 组件： componentDidUpdate()</li></ul><h3 id="父子组件生命周期执行顺序总结："><a href="#父子组件生命周期执行顺序总结：" class="headerlink" title="父子组件生命周期执行顺序总结："></a>父子组件生命周期执行顺序总结：</h3><ul><li><p>当子组件自身状态改变时，不会对父组件产生副作用的情况下，父组件不会进行更新，即不会触发父组件的生命周期</p></li><li><p>当父组件中状态发生变化（包括子组件的挂载以及）时，会触发自身对应的生命周期以及子组件的更新</p><ul><li><p>render 以及 render 之前的生命周期，则 父组件 先执行</p></li><li><p>render 以及 render 之后的声明周期，则子组件先执行，并且是与父组件交替执行</p></li></ul></li><li><p>当子组件进行卸载时，只会执行自身的 componentWillUnmount 生命周期，不会再触发别的生命周期</p><blockquote><p>可能总结的不好，不是很完整。只是根据一般情况进行的总结。有不妥之处，希望各位朋友能够多多指正。</p></blockquote></li></ul><hr><h2 id="示例代码下载"><a href="#示例代码下载" class="headerlink" title="示例代码下载"></a>示例代码下载</h2><p><strong><a href="https://github.com/beichensky/ReactUtilsDemo/tree/master/react-component-lifecycle" target="_blank" rel="noopener">源码地址</a></strong></p><p>还没看够？移步至：<strong><a href="https://reactjs.org/docs/react-component.html" target="_blank" rel="noopener">React Component 官网</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文详细介绍了 React 生命周期的用法以及各个阶段的生命周期进行，并且用实例代码做了详细演示。&lt;strong&gt;&lt;a href=&quot;https://github.com/beichensky/ReactUtilsDemo/tree/master/react-component-lifecycle&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;代码位置&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="React" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/React/"/>
    
    
      <category term="React" scheme="https://beichensky.github.io/tags/React/"/>
    
      <category term="生命周期" scheme="https://beichensky.github.io/tags/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>PureComponent 使用注意事项以及源码解析</title>
    <link href="https://beichensky.github.io/20190116/pure-component/"/>
    <id>https://beichensky.github.io/20190116/pure-component/</id>
    <published>2019-01-16T09:42:05.000Z</published>
    <updated>2019-02-17T03:48:50.857Z</updated>
    
    <content type="html"><![CDATA[<p>本文简要介绍了 React 中 PureComponent 与 Component 的区别以及使用时需要注意的问题，并在后面附上了源码解析，希望对有疑惑的朋友提供一些帮助。</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>先介绍一下 PureComponent，平时我们创建 React 组件一般是继承于 Component，而 PureComponent 相当于是一个更纯净的 Component，对更新前后的数据进行了一次浅比较。只有在数据真正发生改变时，才会对组件重新进行 render。这样的话可以大大提高组件的性能。</p><hr><h2 id="对比-Component-和-PureComponent"><a href="#对比-Component-和-PureComponent" class="headerlink" title="对比 Component 和 PureComponent"></a>对比 Component 和 PureComponent</h2><h3 id="继承-Component-创建组件"><a href="#继承-Component-创建组件" class="headerlink" title="继承 Component 创建组件"></a>继承 Component 创建组件</h3><h4 id="App-js"><a href="#App-js" class="headerlink" title="App.js"></a>App.js</h4><p>里面的 state 有两个属性，text 属性是基本数据类型，todo 属性是引用类型。针对这两种数据类型分别进行对比</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component, PureComponent &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.css'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.state = &#123;</span><br><span class="line">            text: <span class="string">'Hello'</span>,</span><br><span class="line">            todo: &#123;</span><br><span class="line">                id: <span class="number">1</span>,</span><br><span class="line">                message: <span class="string">'学习 React'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改 state 中 text 属性的函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    changeText = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            text: <span class="string">'World'</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改 state 中 todo 对象的函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    changeTodo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            id: <span class="number">1</span>,</span><br><span class="line">            message: <span class="string">'学习 Vue'</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="comment">// 打印 log，查看渲染情况</span></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'tag'</span>, <span class="string">'render'</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> &#123; text, todo &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;span&gt;文字：&#123; text &#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;button onClick=&#123; this.changeText &#125;&gt;更改文字&lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">                &lt;br /</span>&gt;</span><br><span class="line">                &lt;div&gt;</span><br><span class="line">                    &lt;span&gt;计划：&#123; todo.message &#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;button onClick=&#123; this.changeTodo &#125;&gt;更改计划&lt;/</span>button&gt;</span><br><span class="line">                &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h4 id="浏览器中界面"><a href="#浏览器中界面" class="headerlink" title="浏览器中界面"></a>浏览器中界面</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pure-component/pure.png" alt="界面显示" title="">                </div>                <div class="image-caption">界面显示</div>            </figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>运行项目，打开控制台，此时看到只有一个 log：<code>tag render</code></p><ul><li><p>点击 5 次 ·更改文字· 按钮，可以看到控制台再次多打印了 5 次 log，浏览器中的 <code>Hello</code> 文字变成了 <code>World</code></p></li><li><p>点击 5 次 ·更改计划· 按钮，控制台一样多打印 5 次 log，浏览器中的 <code>学习 React</code> 计划变成了 <code>学习 Vue</code></p></li></ul><p>分析一下，其实 5 次点击中只有一次是有效的，后来的数据其实并没有真正改变，但是由于依然使用了 setState()，所以还是会重新 render。所以这种模式是比较消耗性能的。</p><h3 id="继承-PureComponent"><a href="#继承-PureComponent" class="headerlink" title="继承 PureComponent"></a>继承 PureComponent</h3><p>其实 PureComponent 用法也是和 Component 一样，只不过是将继承 Component 换成了 PureComponent。</p><h4 id="App-js-1"><a href="#App-js-1" class="headerlink" title="App.js"></a>App.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">...</span><br><span class="line"><span class="comment">// 上面的代码和之前一致</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 下面的代码也和之前一样</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h4 id="浏览器中界面-1"><a href="#浏览器中界面-1" class="headerlink" title="浏览器中界面"></a>浏览器中界面</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/pure-component/pure.png" alt="界面显示" title="">                </div>                <div class="image-caption">界面显示</div>            </figure><h4 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h4><p>和上面 Component 的测试方式一样</p><ul><li><p>点击 5 次 ·更改文字· 按钮，可以看到控制台只多打印了一次 log，浏览器中的 <code>Hello</code> 文字变成了 <code>World</code></p></li><li><p>点击 5 次 ·更改计划· 按钮，控制台只多打印了一次 log，浏览器中的 <code>学习 React</code> 计划变成了 <code>学习 Vue</code></p></li></ul><blockquote><p>由此可以看出，使用 PureComponent 还是比较节省性能的，即便是使用了 setState()，也会在数据真正改变时才会重新渲染组件</p></blockquote><h4 id="使用时可能遇到的问题"><a href="#使用时可能遇到的问题" class="headerlink" title="使用时可能遇到的问题"></a>使用时可能遇到的问题</h4><p>下面我们将代码中 <code>changeText</code> 和 <code>changeTodo</code> 方法修改一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改 state 中 text 属性的函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">changeText = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; text &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    text = <span class="string">'World'</span>;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        text</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改 state 中 todo 对象的函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">changeTodo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; todo &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    todo.message = <span class="string">"学习 Vue"</span>;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        todo</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们再重新测试一下：</p><ul><li><p>点击 ·更改文字· 按钮，控制台多打印一次 log，浏览器中的 <code>Hello</code> 文字变成了 <code>World</code></p></li><li><p><strong>注意：</strong>点击 ·更改计划· 按钮，控制台没有 log 打印，浏览器中的计划也没有发生改变</p></li></ul><blockquote><p>为什么代码修改之后，明明 todo 里的 message 属性也已经发生变化了，调用 setState()，却不进行渲染了呢？这是因为 PureComponent 在调用 shouldComponent 生命周期的时候，对数据进行了一次浅比较，判断数据是否发生改变，没发生改变，返回 false，改变了，就返回 true。那这个浅比较的机制是怎么做的呢？我们一起看下面源码解析，来分析一下。</p></blockquote><hr><h2 id="PureComponent-源码解析"><a href="#PureComponent-源码解析" class="headerlink" title="PureComponent 源码解析"></a>PureComponent 源码解析</h2><h3 id="ReactBaseClasses-js-（Github-代码位置）"><a href="#ReactBaseClasses-js-（Github-代码位置）" class="headerlink" title="ReactBaseClasses.js （Github 代码位置）"></a>ReactBaseClasses.js （<a href="https://github.com/facebook/react/blob/master/packages/react/src/ReactBaseClasses.js" target="_blank" rel="noopener">Github 代码位置</a>）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ComponentDummy</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">ComponentDummy.prototype = Component.prototype;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Convenience component with default shallow equality check for sCU.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">PureComponent</span>(<span class="params">props, context, updater</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.props = props;</span><br><span class="line">    <span class="keyword">this</span>.context = context;</span><br><span class="line">    <span class="comment">// If a component has string refs, we will assign a different object later.</span></span><br><span class="line">    <span class="keyword">this</span>.refs = emptyObject;</span><br><span class="line">    <span class="keyword">this</span>.updater = updater || ReactNoopUpdateQueue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pureComponentPrototype = (PureComponent.prototype = <span class="keyword">new</span> ComponentDummy());</span><br><span class="line">pureComponentPrototype.constructor = PureComponent;</span><br><span class="line"><span class="comment">// Avoid an extra prototype jump for these methods.</span></span><br><span class="line"><span class="built_in">Object</span>.assign(pureComponentPrototype, Component.prototype);</span><br><span class="line">pureComponentPrototype.isPureReactComponent = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>可以看到 PureComponent 的使用和 Component 一致，只时最后为其添加了一个 isPureReactComponent 属性。ComponentDummy 就是通过原型模拟继承的方式将 Component 原型中的方法和属性传递给了 PureComponent。同时为了避免原型链拉长导致属性查找的性能消耗，通过 Object.assign 把属性从 Component 拷贝了过来。</p><p>但是这里只是 PureComponent 的声明创建，没有显示如何进行比较更新的，那我们继续看下面的代码。</p><h3 id="ReactFiberClassComponent-js-（Github-代码位置）"><a href="#ReactFiberClassComponent-js-（Github-代码位置）" class="headerlink" title="ReactFiberClassComponent.js （Github 代码位置）"></a>ReactFiberClassComponent.js （<a href="https://github.com/facebook/react/blob/master/packages/react-reconciler/src/ReactFiberClassComponent.js" target="_blank" rel="noopener">Github 代码位置</a>）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkShouldComponentUpdate</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  workInProgress,</span></span></span><br><span class="line"><span class="function"><span class="params">  ctor,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldProps,</span></span></span><br><span class="line"><span class="function"><span class="params">  newProps,</span></span></span><br><span class="line"><span class="function"><span class="params">  oldState,</span></span></span><br><span class="line"><span class="function"><span class="params">  newState,</span></span></span><br><span class="line"><span class="function"><span class="params">  nextContext,</span></span></span><br><span class="line"><span class="function"><span class="params"></span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里根据上面 PureComponent 设置的属性 isPureReactComponent 判断一下，如果是 PureComponent，就会走里面的代码，将比较的值返回出去</span></span><br><span class="line">    <span class="keyword">if</span> (ctor.prototype &amp;&amp; ctor.prototype.isPureReactComponent) &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>shallowEqual 是在 <code>share</code> 包中一个工具方法，看一下其中的内部实现吧。</p><h3 id="shallowEqual-js-（Github-代码位置）"><a href="#shallowEqual-js-（Github-代码位置）" class="headerlink" title="shallowEqual.js （Github 代码位置）"></a>shallowEqual.js （<a href="https://github.com/facebook/react/blob/master/packages/shared/shallowEqual.js" target="_blank" rel="noopener">Github 代码位置</a>）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> is <span class="keyword">from</span> <span class="string">'./objectIs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> hasOwnProperty = <span class="built_in">Object</span>.prototype.hasOwnProperty;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Performs equality by iterating through keys on an object and returning false</span></span><br><span class="line"><span class="comment"> * when any key has values which are not strictly equal between the arguments.</span></span><br><span class="line"><span class="comment"> * Returns true when the values of all keys are strictly equal.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowEqual</span>(<span class="params">objA: mixed, objB: mixed</span>): <span class="title">boolean</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (is(objA, objB)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> objA !== <span class="string">'object'</span> ||</span><br><span class="line">    objA === <span class="literal">null</span> ||</span><br><span class="line">    <span class="keyword">typeof</span> objB !== <span class="string">'object'</span> ||</span><br><span class="line">    objB === <span class="literal">null</span></span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> keysA = <span class="built_in">Object</span>.keys(objA);</span><br><span class="line">  <span class="keyword">const</span> keysB = <span class="built_in">Object</span>.keys(objB);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (keysA.length !== keysB.length) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Test for A's keys different from B.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; keysA.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">      !hasOwnProperty.call(objB, keysA[i]) ||</span><br><span class="line">      !is(objA[keysA[i]], objB[keysA[i]])</span><br><span class="line">    ) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> shallowEqual;</span><br></pre></td></tr></table></figure><p>这里面还调用了 is 函数，这个函数也是 share 包中的一个工具方法。</p><h3 id="objectIs-js-（Github-代码位置）"><a href="#objectIs-js-（Github-代码位置）" class="headerlink" title="objectIs.js （Github 代码位置）"></a>objectIs.js （<a href="https://github.com/facebook/react/blob/master/packages/shared/objectIs.js" target="_blank" rel="noopener">Github 代码位置</a>）</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * inlined Object.is polyfill to avoid requiring consumers ship their own</span></span><br><span class="line"><span class="comment"> * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is</span>(<span class="params">x: any, y: any</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        (x === y &amp;&amp; (x !== <span class="number">0</span> || <span class="number">1</span> / x === <span class="number">1</span> / y)) || (x !== x &amp;&amp; y !== y) <span class="comment">// eslint-disable-line no-self-compare</span></span><br><span class="line">    );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> is;</span><br></pre></td></tr></table></figure><h3 id="PureComponent-源码分析总结"><a href="#PureComponent-源码分析总结" class="headerlink" title="PureComponent 源码分析总结"></a>PureComponent 源码分析总结</h3><p>由上面的源码可以发现，其实 PureComponent 和 Component 中的方法和属性基本一致，只不过 PureComponent 多了一个 isPureReactComponent 为 true 的属性。在 checkShouldComponentUpdate 的时候，会根据这个属性判断是否是 PureComponent，如果是的话，就会根据 !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState) 这个判断语句的返回值作为更新依据。所以，查看了 shallowEqual 和 objectIs 的文件源码，我们可以得出 PureComponent 的浅比较结论：</p><ul><li><p>先通过 is 函数判断两个参数是否相同，相同则直接返回 ture，也就是不更新组件。</p><ul><li>根据 objectIs.js 代码可知，基本属性类型判断值是否相同（包括 NaN），引用数据类型判断是否是一个引用</li></ul></li><li><p>若 is 函数判断为 false，则判断两个参数是否都为 对象 且 都不为 null，若任意一个 不是对象 或 任意一个为 null，直接返回 false，也就是更新组件</p></li><li><p>若前两个判断都通过，则可断定两个参数皆为对象，此时判断它们 keys 的长度是否相同，若不同，则直接返回 false，即更新组件</p></li><li><p>若 keys 长度不同，则对两个对象中的第一层属性进行比较，若都相同，则返回 true，有任一属性不同，则返回 false</p></li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>阅读源码之后，可以发现之前我们修改了 changeTodo 方法的逻辑之后，为什么数据改变，组件却依然不更新的原因了。是因为修改的是同一个对象，所以 PureComponent 默认引用相同，不进行组件更新，所以才会出现这个陷阱，在使用的过程中希望大家注意一下这个问题。</p><ul><li><p>对比 PureComponent 和 Component，可以发现，PureComponent 性能更高，一般有几次有效修改，就会进行几次有效更新</p></li><li><p>为了避免出现上面所说的陷阱问题，建议将 React 和 Immutable.js 配合使用，因为 Immutable.js 中的数据类型都是不可变，每个变量都不会相同。但是由于 Immutable 学习成本较高，可以在项目中使用 immutability-helper 插件，也能实现类似的功能。关于 immutability-helper 的使用，可以查看我的另一篇博客：<a href="http://localhost:4000/20190104/immutability-helper-basic/" target="_blank" rel="noopener">immutability-helper 插件的基本使用</a></p></li><li><p>虽然 PureComponent 提高了性能，但是也只是对数据进行了一次浅比较，最能优化性能的方式还是自己在 shouldComponent 生命周期中实现响应逻辑</p></li><li><p>关于 PureComponent 浅比较的总结可以查看上面的<a href="#PureComponent-源码分析总结">PureComponent 源码分析总结</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文简要介绍了 React 中 PureComponent 与 Component 的区别以及使用时需要注意的问题，并在后面附上了源码解析，希望对有疑惑的朋友提供一些帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="React" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/React/"/>
    
    
      <category term="React" scheme="https://beichensky.github.io/tags/React/"/>
    
      <category term="PureComponent" scheme="https://beichensky.github.io/tags/PureComponent/"/>
    
  </entry>
  
  <entry>
    <title>在 Create React App 中启用 Sass 和 Less</title>
    <link href="https://beichensky.github.io/20190115/cra-sass-less/"/>
    <id>https://beichensky.github.io/20190115/cra-sass-less/</id>
    <published>2019-01-15T05:12:23.000Z</published>
    <updated>2019-02-17T03:48:50.857Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何在 Create React App 脚手架中启用 Sass 和 Less</p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>关于创建 create-react-app 项目请查看： <strong><a href="https://juejin.im/post/5c3c3df451882525153c2352#heading-0" target="_blank" rel="noopener">create-react-app 的安装与创建</a></strong></p><p>关于在 less 和 sass 如何在 create-react-app 启用 CSS Modules，请查看我的上一篇文章：<strong><a href="https://juejin.im/post/5c3c3df451882525153c2352" target="_blank" rel="noopener">在 Create React App 中使用 CSS Modules</a></strong></p><hr><h2 id="启用-Sass-语法编写-CSS"><a href="#启用-Sass-语法编写-CSS" class="headerlink" title="启用 Sass 语法编写 CSS"></a>启用 Sass 语法编写 CSS</h2><blockquote><p>create-react-app 脚手架中已经添加了 sass-loader 的支持，所以只需要安装 node-sass 插件即可</p></blockquote><h3 id="安装-node-sass-插件"><a href="#安装-node-sass-插件" class="headerlink" title="安装 node-sass 插件"></a>安装 node-sass 插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ npm install node-sass --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="comment"># $ yarn add node-sass</span></span><br></pre></td></tr></table></figure><h3 id="用法："><a href="#用法：" class="headerlink" title="用法："></a>用法：</h3><h4 id="编写-sass-文件：App-scss"><a href="#编写-sass-文件：App-scss" class="headerlink" title="编写 sass 文件：App.scss"></a>编写 sass 文件：App.scss</h4><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.App</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  &amp;-logo &#123;</span><br><span class="line">    <span class="attribute">animation</span>: App-logo-spin infinite <span class="number">20s</span> linear;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40vmin</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在-js-文件中直接使用：改写-App-js-文件"><a href="#在-js-文件中直接使用：改写-App-js-文件" class="headerlink" title="在 js 文件中直接使用：改写 App.js 文件"></a>在 js 文件中直接使用：改写 App.js 文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.scss'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;header className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">          &lt;img src=&#123;logo&#125; className=<span class="string">"App-logo"</span> alt=<span class="string">"logo"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h4 id="在浏览器中查看效果"><a href="#在浏览器中查看效果" class="headerlink" title="在浏览器中查看效果"></a>在浏览器中查看效果</h4><p>运行项目，此时在浏览器中即可查看到 logo 图片在缓慢转动</p><hr><h2 id="启用-Less-语法编写-CSS"><a href="#启用-Less-语法编写-CSS" class="headerlink" title="启用 Less 语法编写 CSS"></a>启用 Less 语法编写 CSS</h2><blockquote><p>由于 create-react-app 脚手架中并没有配置关于 less 文件的解析，所以我们需要自己进行配置。需要安装的插件 <code>less</code>， <code>less-loader</code>。</p></blockquote><h3 id="添加-Less-相关配置"><a href="#添加-Less-相关配置" class="headerlink" title="添加 Less 相关配置"></a>添加 Less 相关配置</h3><ul><li><p>在命令行运行 <code>npm run eject</code> 命令</p><blockquote><p>此命令会将脚手架中隐藏的配置都展示出来，此过程不可逆</p></blockquote></li><li><p>运行完成之后，打开 config 目录下的 webpack.config.js 文件，找到 <code>// style files regexes</code> 注释位置，仿照其解析 sass 的规则，在下面添加两行代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加 less 解析规则</span></span><br><span class="line"><span class="keyword">const</span> lessRegex = <span class="regexp">/\.less$/</span>;</span><br><span class="line"><span class="keyword">const</span> lessModuleRegex = <span class="regexp">/\.module\.less$/</span>;</span><br></pre></td></tr></table></figure></li><li><p>找到 rules 属性配置，在其中添加 less 解析配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Less 解析配置</span></span><br><span class="line">&#123;</span><br><span class="line">    test: lessRegex,</span><br><span class="line">    exclude: lessModuleRegex,</span><br><span class="line">    use: getStyleLoaders(</span><br><span class="line">        &#123;</span><br><span class="line">            importLoaders: <span class="number">2</span>,</span><br><span class="line">            sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'less-loader'</span></span><br><span class="line">    ),</span><br><span class="line">    sideEffects: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">    test: lessModuleRegex,</span><br><span class="line">    use: getStyleLoaders(</span><br><span class="line">        &#123;</span><br><span class="line">            importLoaders: <span class="number">2</span>,</span><br><span class="line">            sourceMap: isEnvProduction &amp;&amp; shouldUseSourceMap,</span><br><span class="line">            modules: <span class="literal">true</span>,</span><br><span class="line">            getLocalIdent: getCSSModuleLocalIdent,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">'less-loader'</span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>此时配置完成，安装 less 和 less-loader 插件即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install less less-loader --save</span><br></pre></td></tr></table></figure></li></ul><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><blockquote><p>以下代码根据上面 sass 用法中的文件进行修改</p></blockquote><h4 id="编写-less-文件：App-less"><a href="#编写-less-文件：App-less" class="headerlink" title="编写 less 文件：App.less"></a>编写 less 文件：App.less</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.App</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="selector-tag">&amp;</span><span class="selector-tag">-logo</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: App-logo-spin infinite <span class="number">20s</span> linear;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40vmin</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在-js-文件中直接使用：改写-App-js-文件-1"><a href="#在-js-文件中直接使用：改写-App-js-文件-1" class="headerlink" title="在 js 文件中直接使用：改写 App.js 文件"></a>在 js 文件中直接使用：改写 App.js 文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">'./logo.svg'</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">'./App.less'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"App"</span>&gt;</span><br><span class="line">        &lt;header className=<span class="string">"App-header"</span>&gt;</span><br><span class="line">          &lt;img src=&#123;logo&#125; className=<span class="string">"App-logo"</span> alt=<span class="string">"logo"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/header&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> App;</span><br></pre></td></tr></table></figure><h4 id="在浏览器中查看效果-1"><a href="#在浏览器中查看效果-1" class="headerlink" title="在浏览器中查看效果"></a>在浏览器中查看效果</h4><p>运行项目，此时在浏览器中即可查看到 logo 图片在缓慢转动</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了如何在 Create React App 脚手架中启用 Sass 和 Less&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="React" scheme="https://beichensky.github.io/tags/React/"/>
    
      <category term="Sass" scheme="https://beichensky.github.io/tags/Sass/"/>
    
      <category term="Less" scheme="https://beichensky.github.io/tags/Less/"/>
    
  </entry>
  
  <entry>
    <title>在 Create React App 中使用 CSS Modules</title>
    <link href="https://beichensky.github.io/20190114/cra-css-modules/"/>
    <id>https://beichensky.github.io/20190114/cra-css-modules/</id>
    <published>2019-01-14T08:02:02.000Z</published>
    <updated>2019-02-17T03:48:50.857Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何在 Create React App 脚手架中使用 CSS Modules 的两种方式</p><a id="more"></a><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><blockquote><p>请先进行全局安装 create-react-app 插件哈，安装命令：npm install create-react-app -g</p></blockquote><h3 id="先使用-create-react-app-命令下载一个脚手架工程，安装命令："><a href="#先使用-create-react-app-命令下载一个脚手架工程，安装命令：" class="headerlink" title="先使用 create-react-app 命令下载一个脚手架工程，安装命令："></a>先使用 create-react-app 命令下载一个脚手架工程，安装命令：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 npx</span></span><br><span class="line">$ npx create-react-app my-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 npm </span></span><br><span class="line">$ npm init npx create-react-app my-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 yarn</span></span><br><span class="line">$ yarn create react-app my-app</span><br></pre></td></tr></table></figure><h3 id="运行项目"><a href="#运行项目" class="headerlink" title="运行项目"></a>运行项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> my-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 npm</span></span><br><span class="line">$ npm start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者使用yarn</span></span><br><span class="line"><span class="comment"># yarn start</span></span><br></pre></td></tr></table></figure><p>在浏览器中输入 <code>http://localhost:3000</code> 查看项目效果</p><hr><h2 id="使用-CSS-Module-的第一种方式"><a href="#使用-CSS-Module-的第一种方式" class="headerlink" title="使用 CSS Module 的第一种方式"></a>使用 CSS Module 的第一种方式</h2><blockquote><p>create-react-app 中内置了使用 CSS Modules 的配置，当前方式就是使用 create-react-app 内置的用法</p></blockquote><h3 id="方式"><a href="#方式" class="headerlink" title="方式"></a>方式</h3><blockquote><p>将所有的 .css/.lee/.scss 等样式文件都修改成 .module.css/.module.less/.module.scss 等。即可使用 CSS Modules 的方式进行引入使用了。</p></blockquote><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="编写一个-css-文件：Button-module-css"><a href="#编写一个-css-文件：Button-module-css" class="headerlink" title="编写一个 css 文件：Button.module.css"></a>编写一个 css 文件：Button.module.css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在编写一个普通的-css-文件：another-stylesheet-css"><a href="#在编写一个普通的-css-文件：another-stylesheet-css" class="headerlink" title="在编写一个普通的 css 文件：another-stylesheet.css"></a>在编写一个普通的 css 文件：another-stylesheet.css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在-js-文件中使用-CSS-Modules-的方式进行引用：Button-js"><a href="#在-js-文件中使用-CSS-Modules-的方式进行引用：Button-js" class="headerlink" title="在 js 文件中使用 CSS Modules 的方式进行引用：Button.js"></a>在 js 文件中使用 CSS Modules 的方式进行引用：Button.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./Button.module.css'</span>; <span class="comment">// 使用 CSS Modules 的方式引入</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./another-stylesheet.css'</span>; <span class="comment">// 普通引入</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// reference as a js object</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#123;styles.error&#125;</span>&gt;</span>Error Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在浏览器中查看效果"><a href="#在浏览器中查看效果" class="headerlink" title="在浏览器中查看效果"></a>在浏览器中查看效果</h4><p>此时 Button 组件的背景颜色是红色，但是字体颜色却不是红色，因为使用了 Css Modules 之后，普通的 css 样式就不起效果了，需要用全局的方式编写才可以(:global)。<br>最后添加到元素上的样式结果为：<code>&lt;button class=&quot;Button_error_ax7yz&quot;&gt;Error Button&lt;/button&gt;</code></p><hr><h2 id="使用-CSS-Module-的第二种方式"><a href="#使用-CSS-Module-的第二种方式" class="headerlink" title="使用 CSS Module 的第二种方式"></a>使用 CSS Module 的第二种方式</h2><h3 id="方式-1"><a href="#方式-1" class="headerlink" title="方式"></a>方式</h3><ul><li><p>在命令行运行 <code>npm run eject</code> 命令</p><blockquote><p>此命令会将脚手架中隐藏的配置都展示出来，此过程不可逆</p></blockquote></li><li><p>运行完成之后，打开 config 目录下的 webpack.config.js 文件，找到 <code>test: cssRegex</code> 这一行</p></li><li><p>在 use 属性执行的方法中添加 <code>modules: true</code>，如下图：<br><img src="/images/cra/cra-css-modules.png" alt="添加 modules 属性"></p></li></ul><h3 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h3><blockquote><p>和第一种方式的用法一致，只是不需要在 css 文件后面加 .module 后缀了</p></blockquote><h4 id="编写一个-css-文件：Button-css"><a href="#编写一个-css-文件：Button-css" class="headerlink" title="编写一个 css 文件：Button.css"></a>编写一个 css 文件：Button.css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="再编写一个普通的-css-文件：another-stylesheet-css"><a href="#再编写一个普通的-css-文件：another-stylesheet-css" class="headerlink" title="再编写一个普通的 css 文件：another-stylesheet.css"></a>再编写一个普通的 css 文件：another-stylesheet.css</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.error</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在-js-文件中使用-CSS-Modules-的方式进行引用：Button-js-1"><a href="#在-js-文件中使用-CSS-Modules-的方式进行引用：Button-js-1" class="headerlink" title="在 js 文件中使用 CSS Modules 的方式进行引用：Button.js"></a>在 js 文件中使用 CSS Modules 的方式进行引用：Button.js</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">'./Button.css'</span>; <span class="comment">// 可以直接使用 CSS Modules 的方式引入了</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'./another-stylesheet.css'</span>; <span class="comment">// 普通引入</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="comment">// reference as a js object</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">className</span>=<span class="string">&#123;styles.error&#125;</span>&gt;</span>Error Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在浏览器中查看效果-1"><a href="#在浏览器中查看效果-1" class="headerlink" title="在浏览器中查看效果"></a>在浏览器中查看效果</h4><p>此时 Button 组件的背景颜色是红色，但是字体颜色却不是红色，因为使用了 Css Modules 之后，普通的 css 样式就不起效果了，需要用全局的方式编写才可以(:global)。<br>最后添加到元素上的样式结果为：<code>&lt;button class=&quot;Button_error_ax7yz&quot;&gt;Error Button&lt;/button&gt;</code></p><p><strong>如想使用第二种方式对 sass 和 less 也使用 CSS Modules 的方式进行引用，则类似的在 sass 和 less 解析配置上也添加<code>modules: true</code> 即可。</strong></p><hr><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><blockquote><p>默认 create-react-app 脚手架不能直接使用 sass 和 less 直接编写 css，需要先进行相应配置。</p></blockquote><p>关于如何在 create-react-app 脚手架中启用 sass 和 less 语法，可参考我的下一篇文章：</p><p><strong><a href="https://juejin.im/post/5c3d67066fb9a049f06a8323" target="_blank" rel="noopener">在 Create React App 中启用 Sass 和 Less</a>。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了如何在 Create React App 脚手架中使用 CSS Modules 的两种方式&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="React" scheme="https://beichensky.github.io/tags/React/"/>
    
      <category term="CSS Modules" scheme="https://beichensky.github.io/tags/CSS-Modules/"/>
    
  </entry>
  
  <entry>
    <title>使用 redux-devtools-extension 查看 Redux 中状态变化</title>
    <link href="https://beichensky.github.io/20190109/redux-devtools/"/>
    <id>https://beichensky.github.io/20190109/redux-devtools/</id>
    <published>2019-01-09T10:57:00.000Z</published>
    <updated>2019-01-14T15:08:04.939Z</updated>
    
    <content type="html"><![CDATA[<p>本文简单介绍了在 Redux 使用 redux-devtools-extension 插件的用法，可以对状态变化进行可视化查看。</p><a id="more"></a><h2 id="本文例子源码"><a href="#本文例子源码" class="headerlink" title="本文例子源码"></a>本文例子源码</h2><p><strong><a href="https://github.com/beichensky/ReactUtilsDemo/tree/master/redux-devtools-demo" target="_blank" rel="noopener">源码地址</a></strong></p><p>欢迎 Star！欢迎 Watch！</p><h2 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h2><p>请先安装 redux：<code>npm install redux -S</code></p><hr><h2 id="redux-devtools-extension-的使用"><a href="#redux-devtools-extension-的使用" class="headerlink" title="redux-devtools-extension 的使用"></a>redux-devtools-extension 的使用</h2><blockquote><p>用法非常简单，只需要三步，而且代码修改极少，跟着下面的提示进行操作即可</p></blockquote><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install redux-devtools-extension -D</span><br></pre></td></tr></table></figure><h3 id="在谷歌浏览器中安装-Redux-DevTools"><a href="#在谷歌浏览器中安装-Redux-DevTools" class="headerlink" title="在谷歌浏览器中安装 Redux DevTools"></a>在谷歌浏览器中安装 Redux DevTools</h3><ul><li><p>如果可以访问谷歌扩展程序，直接在 Chrome 网上应用商店下载即可</p></li><li><p>如果不能访问，可以百度搜索资源进行下载</p></li><li><p>下载完成之后</p><ul><li><p>可以在浏览器工具栏右上角可以看到图标（当应用可以使用该工具时，图标变亮）<br><img src="/images/redux-devtools/icon.png" alt="图标"></p></li><li><p>在页面上右键可以看到 Redux DevTools 选项</p></li><li><p>打开控制台，在菜单栏可以找到 Redux 菜单栏<br>此时项目中尚未应用工具，面板应该这样显示：<br><img src="/images/redux-devtools/unuseDevtools.png" alt="未应用"></p></li></ul></li></ul><hr><h3 id="在代码中添加用法"><a href="#在代码中添加用法" class="headerlink" title="在代码中添加用法"></a>在代码中添加用法</h3><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createStore &#125; = <span class="built_in">require</span>(<span class="string">'redux'</span>);</span><br><span class="line"><span class="comment">// 引入工具插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; composeWithDevTools &#125; = <span class="built_in">require</span>(<span class="string">'redux-devtools-extension'</span>);</span><br><span class="line"><span class="comment">// 创建 store 时，传入参数</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, composeWithDevTools());</span><br></pre></td></tr></table></figure></code></pre><blockquote><p>此时启动应用，在控制台找到 Redux 菜单，点击切换，就可以看到上面提到的正常显示的场景：</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/images/redux-devtools/useDevtools.png" alt="应用成功" title="">                </div>                <div class="image-caption">应用成功</div>            </figure><hr><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="当-Redux-包含其他中间件进行使用时"><a href="#当-Redux-包含其他中间件进行使用时" class="headerlink" title="当 Redux 包含其他中间件进行使用时"></a>当 Redux 包含其他中间件进行使用时</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Store 的参数稍微发生改变</span></span><br><span class="line"><span class="keyword">const</span> &#123; createStore, applyMiddleware &#125; = <span class="built_in">require</span>(<span class="string">'redux'</span>);</span><br><span class="line"><span class="comment">// 引入工具插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; composeWithDevTools &#125; = <span class="built_in">require</span>(<span class="string">'redux-devtools-extension'</span>);</span><br><span class="line"><span class="comment">// 创建 Store</span></span><br><span class="line"><span class="keyword">const</span> storeCompose = createStore(reducer, composeWithDevTools(</span><br><span class="line">    applyMiddleware(...middleware)</span><br><span class="line">    <span class="comment">// other store enhancers if any</span></span><br><span class="line">));</span><br></pre></td></tr></table></figure><h3 id="只希望在开发环境使用"><a href="#只希望在开发环境使用" class="headerlink" title="只希望在开发环境使用"></a>只希望在开发环境使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> enhancers = process.env.NODE_ENV === <span class="string">"development"</span> ? composeWithDevTools(</span><br><span class="line">        applyMiddleware(middleware)</span><br><span class="line">        <span class="comment">// other store enhancers if any</span></span><br><span class="line">    )</span><br><span class="line">    :</span><br><span class="line">    applyMiddleware(thunk);</span><br><span class="line"><span class="keyword">const</span> storeEnv = createStore(counters, enhancers);</span><br></pre></td></tr></table></figure><hr><h2 id="官方说明"><a href="#官方说明" class="headerlink" title="官方说明"></a>官方说明</h2><p>更多信息可以查看：<strong><a href="https://github.com/zalmoxisus/redux-devtools-extension#usage" target="_blank" rel="noopener">redux-devtools-extension 官方 Github</a></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文简单介绍了在 Redux 使用 redux-devtools-extension 插件的用法，可以对状态变化进行可视化查看。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Redux" scheme="https://beichensky.github.io/tags/Redux/"/>
    
      <category term="redux-devtools" scheme="https://beichensky.github.io/tags/redux-devtools/"/>
    
  </entry>
  
  <entry>
    <title>一分钟学会在 Redux 中使用 redux-thunk 进行异步操作</title>
    <link href="https://beichensky.github.io/20190108/redux-thunk/"/>
    <id>https://beichensky.github.io/20190108/redux-thunk/</id>
    <published>2019-01-08T10:07:28.000Z</published>
    <updated>2019-01-08T13:12:56.292Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了在 Redux 中使用 redux-thunk 进行异步操作。</p><a id="more"></a><p>如果对 Redux 尚不熟悉，建议先看我的前一篇博客：<a href="https://lufanfan.github.io/20190108/2019-01-08-react-redux-basic/" target="_blank" rel="noopener">Redux 基础教程以及结合 React 使用方式</a>。</p><p>最下方贴上了 applyMiddleware 和 redux-thunk 的实现源码，有兴趣的同学可以看一看。只能用两个字来形容：<strong>优秀</strong>。</p><hr><h3 id="在项目中引入"><a href="#在项目中引入" class="headerlink" title="在项目中引入"></a>在项目中引入</h3><ul><li><p>安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install redux-thunk;</span><br></pre></td></tr></table></figure></li><li><p>在创建 store 时引入 redux-thunk</p><blockquote><p>使用 commonJs 方式引入时要注意，这样引入才可以正常使用：<code>const thunk = require(&#39;redux-thunk&#39;).default</code></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> thunk <span class="keyword">from</span> <span class="string">'redux-thunk'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 store</span></span><br><span class="line"><span class="comment">// applyMiddleware，在 Redux 中使用中间件时，就需要使用 applyMiddleware() 这个函数进行包裹</span></span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, applyMiddleware(thunk));</span><br></pre></td></tr></table></figure></li><li><p>在 action 中的书写方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步请求成功需要用到的同步 action 创建函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">actionSuccess</span>(<span class="params">msg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'SUCCESS'</span>,</span><br><span class="line">        message: msg</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步请求失败需要用到的同步 action 创建函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">actionError</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">'ERROR'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露异步 Action</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncAction</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 异步 action 的固定写法，返回一个函数，第一个参数为 dispatch 函数，第二个参数为 state</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">dispatch, state</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 执行异步操作</span></span><br><span class="line">        fetch(url)</span><br><span class="line">            .then(<span class="function"><span class="params">reponse</span> =&gt;</span> response.json)</span><br><span class="line">            <span class="comment">// 请求成功调用成功的同步 Action</span></span><br><span class="line">            .then(<span class="function"><span class="params">json</span> =&gt;</span> dispatch(actionSuccess(actionSuccess)))</span><br><span class="line">            .catch(<span class="function"><span class="params">error</span> =&gt;</span> dispatch(actionError()))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在组件中调用</p><ul><li>在组件中和调用同步 Action 一致<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(asyncAction(param));</span><br></pre></td></tr></table></figure></li></ul></li><li><p>在 Reducer 中不需要处理异步 Action，还是只关注同步 Action 即可。因为异步 Action 结束之后还是会调用同步 Action 发送数据更新指令</p></li></ul><hr><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>本文只是单纯的记录一下 redux-thunk 中间件如何进行使用，想要深入了解 applyMiddleware 和 redux-thunk 实现原理的朋友可以移步至阮老师的</p><p><a href="http://www.ruanyifeng.com/blog/2016/09/redux_tutorial_part_two_async_operations.html" target="_blank" rel="noopener">Redux 入门教程（二）：中间件与异步操作</a></p><hr><h3 id="applyMiddleware-源码"><a href="#applyMiddleware-源码" class="headerlink" title="applyMiddleware 源码"></a>applyMiddleware 源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyMiddleware</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> _len = <span class="built_in">arguments</span>.length, middlewares = <span class="keyword">new</span> <span class="built_in">Array</span>(_len), _key = <span class="number">0</span>; _key &lt; _len; _key++) &#123;</span><br><span class="line">    middlewares[_key] = <span class="built_in">arguments</span>[_key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">createStore</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> store = createStore.apply(<span class="keyword">void</span> <span class="number">0</span>, <span class="built_in">arguments</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> _dispatch = <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"Dispatching while constructing your middleware is not allowed. "</span> + <span class="string">"Other middleware would not be applied to this dispatch."</span>);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">var</span> middlewareAPI = &#123;</span><br><span class="line">        getState: store.getState,</span><br><span class="line">        dispatch: <span class="function"><span class="keyword">function</span> <span class="title">dispatch</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">return</span> _dispatch.apply(<span class="keyword">void</span> <span class="number">0</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">var</span> chain = middlewares.map(<span class="function"><span class="keyword">function</span> (<span class="params">middleware</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> middleware(middlewareAPI);</span><br><span class="line">      &#125;);</span><br><span class="line">      _dispatch = compose.apply(<span class="keyword">void</span> <span class="number">0</span>, chain)(store.dispatch);</span><br><span class="line">      <span class="keyword">return</span> _objectSpread(&#123;&#125;, store, &#123;</span><br><span class="line">        dispatch: _dispatch</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="redux-thunk-源码"><a href="#redux-thunk-源码" class="headerlink" title="redux-thunk 源码"></a>redux-thunk 源码</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next(action);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thunk = createThunkMiddleware();</span><br><span class="line">thunk.withExtraArgument = createThunkMiddleware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了在 Redux 中使用 redux-thunk 进行异步操作。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="React" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/React/"/>
    
    
      <category term="Redux" scheme="https://beichensky.github.io/tags/Redux/"/>
    
      <category term="thunk" scheme="https://beichensky.github.io/tags/thunk/"/>
    
  </entry>
  
  <entry>
    <title>Redux 基础教程以及结合 React 使用方式</title>
    <link href="https://beichensky.github.io/20190108/react-redux-basic/"/>
    <id>https://beichensky.github.io/20190108/react-redux-basic/</id>
    <published>2019-01-08T06:22:22.000Z</published>
    <updated>2019-01-08T13:12:56.290Z</updated>
    
    <content type="html"><![CDATA[<p>本文教你实现一个最简单的 Redux 应用，以及结合 React 如何使用</p><a id="more"></a><h2 id="Redux简介"><a href="#Redux简介" class="headerlink" title="Redux简介"></a>Redux简介</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>状态管理工具，使用之后可以清晰的知道应用里发生了什么。数据如何修改，如何更新的。</p><h3 id="出现的动机"><a href="#出现的动机" class="headerlink" title="出现的动机"></a>出现的动机</h3><p>以前我刚接触 Redux 这类状态管理工具的时候就在想：<strong>为什么需要这些东西呢，刷新数据就消失了，也不能持久化存储数据，有啥用呢？</strong><br>后来慢慢的应用越做越多，功能越做越复杂，就会发现，很多数据什么原因修改的，什么时候修改的，自己是一脸懵逼。啥也想不起来了，维护起来真的痛苦。到了这个时候才发现 Redux 这类工具的厉害之处。名字也很应景的，状态管理工具。说的很清楚了，就是管理状态的。让数据变化过程尽可能的清晰、可预测。</p><blockquote><p>在项目中添加 Redux 并不是必须的。请根据项目需求选择是否引入 Redux</p></blockquote><h3 id="三大原则"><a href="#三大原则" class="headerlink" title="三大原则"></a>三大原则</h3><ul><li><p>单一数据源<br>整个应用的 state 被储存在一棵 object tree 中，并且这个 object tree 只存在于唯一一个 store 中。</p></li><li><p>State 是只读的<br>唯一改变 state 的方法就是触发 action，action 是一个用于描述已发生事件的普通对象。</p></li><li><p>使用纯函数来执行修改<br>为了描述 action 如何改变 state tree ，你需要编写 reducers。</p></li></ul><h2 id="Redux-三要素"><a href="#Redux-三要素" class="headerlink" title="Redux 三要素"></a>Redux 三要素</h2><ul><li><p>Action（将要发生的操作）</p></li><li><p>Reducer（根据 action 更新 state，是一个纯函数）</p><ul><li>提供 combineReducers(reducers) 函数组合多个 reducer</li></ul></li><li><p>存放 state 数据的 Store（将 action 和 reducer 联系到一起的对象）</p><ul><li><p>提供 getState() 方法获取 state</p></li><li><p>提供 dispatch(action) 方法更新 state</p></li><li><p>通过 subsctibe(listener) 注册监听器</p></li><li><p>通过 subscribr(listener) 返回的函数注销监听器</p></li></ul></li></ul><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><p>说了这边文章是教你创建一个最简单的 Redux 应用，那我们下面就看看使用一个 Redux 到底能有多简单，多快呢</p><blockquote><p>使用前先引入 Redux：<code>npm install redux -S</code></p></blockquote><ol><li><p>先来个 Action<br>三要素之一不就是有 Action 么，有我们就先写一个 Action 创建函数呗</p><blockquote><p>Action 创建函数，是一个返回 action 的函数，非必须这样写，只是更方便移植和复用，建议使用 Action 创建函数来生成 action</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">increment</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: <span class="string">"INCREMENT"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li><li><p>有了Action，还要有 Reducer 来执行更新啊<br>Reducer 既然必不可少，就在写一个 Reducer。（这里可能会有点迷糊，reducer 不是一个对象，而是一个返回更新后 state 的纯函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* counters 就是一个 reducer，根据传入的 action 的 type 不同，返回一个新的 state 数据</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 先初始化 state</span></span><br><span class="line"><span class="keyword">const</span> initCounter = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">counters</span>(<span class="params">state = initCounter, action</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.type) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'INCREMENT'</span>:</span><br><span class="line">            <span class="keyword">return</span> state ++;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>还得有一个存放 state 数据的 store 吧<br>现在要把我们写好的 Action 和 Reducer 连接起来</p><ul><li><p>先通过 reducer 创建 store</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; createStore &#125; = <span class="built_in">require</span>(<span class="string">'redux'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(counters);</span><br></pre></td></tr></table></figure></li><li><p>通过 store.dispatch(action) 将 action 发送给 reducer，更新 state</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">store.dispatch(increment());</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看结果<br>就这三步，操作完了吧，那我们现在可以看一下结果了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 store.getState() 获取 State 数据</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'counters: '</span>, store.getState());   <span class="comment">// =&gt; counters： 1</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>过程总结：</strong><br>创建一个操作指令 action -&gt; 创建一个 reducer -&gt; 通过 createStore(reducer) 创建一个 store -&gt; 通过 store.dispatch(action) 执行 reducer 中的更新操作，更新 store 中的数据</p><hr><p>这些就是 Redux 的核心用法，有没有感觉很简单的，有兴趣的话可以跟我一起继续往下，看一看结合 React 该如何使用呢。</p><hr><h2 id="结合-React-使用"><a href="#结合-React-使用" class="headerlink" title="结合 React 使用"></a>结合 React 使用</h2><h3 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React-Redux"></a>React-Redux</h3><p>用来组合 React 和 Redux 配合使用的插件</p><blockquote><p>以 create-react-app 脚手架为例，请先使用 create-react-app 创建一个本地项目。本例中默认 create-react-app 已全局安装过了</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm npm init react-app react-redux-todos</span><br><span class="line">$ <span class="built_in">cd</span> react-redux-todos</span><br></pre></td></tr></table></figure><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install redux react-redux -S</span><br></pre></td></tr></table></figure><h3 id="配合组件使用"><a href="#配合组件使用" class="headerlink" title="配合组件使用"></a>配合组件使用</h3><ul><li><p>在组件根目录使用 react-redux 提供的 Prodiver 标签包裹</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"></span><br><span class="line">&lt;Provider store=&#123; store &#125;&gt;</span><br><span class="line">    ...</span><br><span class="line">&lt;<span class="regexp">/Provider&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在需要用到 state 或 action 的组件中使用 connect 高阶组件进行包装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createAction &#125; <span class="keyword">from</span> <span class="string">'./actions'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// mapStateToProps 编写方式</span></span><br><span class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        reducer: state.reducer</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// mapDispatchToProps 编写方式</span></span><br><span class="line"><span class="keyword">const</span> mapDispatchToProps = <span class="function">(<span class="params">dispatch</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        createAction: <span class="function"><span class="params">text</span> =&gt;</span> dispatch(createAction(field));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 connect 将 state 和 dispatch 包装到 Component 的属性中</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(Component);</span><br></pre></td></tr></table></figure></li><li><p>在组件中就可以通过 this.props.reducer 和 this.props.createAction 的方式获取数据以及调用 action 了</p></li></ul><h2 id="TodoList-示例"><a href="#TodoList-示例" class="headerlink" title="TodoList 示例"></a>TodoList 示例</h2><p><strong><a href="https://github.com/reduxjs/redux/tree/master/examples/todos/src" target="_blank" rel="noopener">示例代码</a></strong><br><strong><a href="https://codesandbox.io/s/github/reactjs/redux/tree/master/examples/todos" target="_blank" rel="noopener">预览地址</a></strong></p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><h3 id="Reducer-的-combineReducers-方法"><a href="#Reducer-的-combineReducers-方法" class="headerlink" title="Reducer 的 combineReducers 方法"></a>Reducer 的 combineReducers 方法</h3><p>当有多个 reducer 时，创建 store 之前需要将它们先进行合并<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducers &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 合并成一个 reducers</span></span><br><span class="line"><span class="keyword">const</span> reducers = combineReducers(&#123;</span><br><span class="line">    a: doSomethingWithA,</span><br><span class="line">    b: processB,</span><br><span class="line">    c: c</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="Store-的-subsctibe-方法"><a href="#Store-的-subsctibe-方法" class="headerlink" title="Store 的 subsctibe 方法"></a>Store 的 subsctibe 方法</h3><ul><li><p>调用 store.subsctibe(listener) 注册监听事件<br>store 中的数据发生变化时，就会调用 listener 函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过 store.subscribe(function) 注册一个监听器。每次 state 更新时，都会打印输出日志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(store.getState()));</span><br></pre></td></tr></table></figure></li><li><p>store.subsctibe(listener) 的返回值是一个 注销监听的函数</p><pre><code class="js"><span class="comment">/**</span><span class="comment"> * store.subscribe(func) 会返回一个函数，执行这个函数可以注销监听器</span><span class="comment"> */</span><span class="comment">// 返回一个函数 unsubscribe</span><span class="keyword">const</span> unsubscribe = store.subscribe(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(store.getState()));<span class="comment">// 执行这个函数可以注销监听器</span>unsubscribe();</code></pre></li></ul><h2 id="如果还没看够"><a href="#如果还没看够" class="headerlink" title="如果还没看够"></a>如果还没看够</h2><p><strong><a href="https://cn.redux.js.org/" target="_blank" rel="noopener">Redux 中文文档</a></strong><br>这里有关于 Redux 最详细的介绍和讲解，我就不多此一举了，有兴趣的同学可以去看看哈。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文教你实现一个最简单的 Redux 应用，以及结合 React 如何使用&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="Redux" scheme="https://beichensky.github.io/tags/Redux/"/>
    
      <category term="React" scheme="https://beichensky.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>immutability-helper 插件的基本使用（附源码）</title>
    <link href="https://beichensky.github.io/20190104/immutability-helper-basic/"/>
    <id>https://beichensky.github.io/20190104/immutability-helper-basic/</id>
    <published>2019-01-04T08:30:08.000Z</published>
    <updated>2019-01-07T14:37:21.760Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了 immutability-helper 插件的基本使用，详细介绍了相关 API 的用法及注意事项。</p><a id="more"></a><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>先理解一下 Immutable 的概念，Immutable数据就是一旦创建，就不能更改的数据。每当对Immutable对象进行修改的时候，就会返回一个新的Immutable对象，以此来保证数据的不可变。但是由于 Immutable 的 API 和用法学习起来比较困难，所以可以使用 immutability-helper 这个工具来对原生JS对象进行操作。本文主要是对 immutability-helper 的用法做一个讲解。</p><hr><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><strong><a href="https://github.com/beichensky/ReactUtilsDemo/tree/master/immutability-helper-basic" target="_blank" rel="noopener">源码位置</a></strong></p><p>欢迎 Star！欢迎 Watch！</p><hr><h2 id="注意事项总结"><a href="#注意事项总结" class="headerlink" title="注意事项总结"></a>注意事项总结</h2><ul><li><p>immutability-helper 不会对原有对象进行修改，只是会返回一个新的对象</p></li><li><p>$push、$unshift、$splice 的使用目标必须是数组，否则会报错</p></li><li><p>$add、$remove 的使用目标必须是 Set 或 Map</p></li><li><p>其余 API 的使用目标可以是任意数据</p></li><li><p>$splice 的参数是一个操作数组，可以对目标数组一次进行多次操作，但是参数 arrays 中的项是按顺序执行的，所以使用时需要注意顺序</p></li><li><p>任意 API 均可在多层结构内使用。可查看<a href="#扩展用法">扩展用法示例</a></p></li><li><p>可以同时执行多个 API 操作，但是请注意：<strong>多个 API 在一个语句中执行时，只会执行最后一个！！！</strong>。可查看<a href="#注意用法">注意用法示例</a></p></li></ul><hr><h2 id="常用-API"><a href="#常用-API" class="headerlink" title="常用 API"></a>常用 API</h2><ul><li><p>{$push: array} 同数组的 push 方法，将参数 array 中的所有项 push 到目标数组中</p></li><li><p>{$unshift: array} 同数组的 unshift 方法，将参数 array 中的所有项 unshift 到目标数组中</p></li><li><p>{$splice: array of arrays} 同数组的 splice 方法，对于参数 arrays 中的每一项，使用该项提供的参数对目标数组调用 splice()</p><blockquote><p>PS: 参数 arrays 中的项是按顺序应用的，所以顺序很重要。在操作过程中，目标的指针可能会发生变化</p></blockquote></li><li><p>{$set: any} 使用 any 值替换目标</p></li><li><p>{$toggle: array of strings} 将参数 array 中提供的下标或者属性的值切换成相反的布尔值</p></li><li><p>{$unset: array of strings} 从目标对象中移除参数 array 中的键列表</p></li><li><p>{$merge: object} 将参数 object 的键与目标合并</p></li><li><p>{$apply: function} 将当前值传递给函数并用新的返回值更新它</p></li><li><p>{$add: array of objects} 向 Set 或 Map 中添加值。添加到 Set 时，参数 array 为要添加的对象数组，添加到 Map 时，参数 array 为 [key, value] 数组</p></li><li><p>{$remove: array of strings} 从 Set 或 Map 中移除参数 array 中的键列表</p></li></ul><hr><h2 id="API-用法及示例"><a href="#API-用法及示例" class="headerlink" title="API 用法及示例"></a>API 用法及示例</h2><h3 id="初始化四个变量，之后的各种-API-操作都是基于这四个变量"><a href="#初始化四个变量，之后的各种-API-操作都是基于这四个变量" class="headerlink" title="初始化四个变量，之后的各种 API 操作都是基于这四个变量"></a>初始化四个变量，之后的各种 API 操作都是基于这四个变量</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> initialObject = &#123;</span><br><span class="line">    name: <span class="string">'Jack'</span>,</span><br><span class="line">    age: <span class="number">22</span>,</span><br><span class="line">    gender: <span class="string">'Man'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> initialArray = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>];</span><br><span class="line"><span class="keyword">const</span> initialSet = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'2'</span>, <span class="string">'0'</span>, <span class="string">'1'</span>, <span class="string">'9'</span>, <span class="string">'猪'</span>, <span class="string">'年'</span>, <span class="string">'快'</span>, <span class="string">'乐'</span>]);</span><br><span class="line"><span class="keyword">const</span> initialMap = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'id'</span>, <span class="string">'1'</span>], [<span class="string">'color'</span>, <span class="string">'blue'</span>], [<span class="string">'alias'</span>, <span class="string">'map'</span>]]);</span><br></pre></td></tr></table></figure><h3 id="push-array"><a href="#push-array" class="headerlink" title="{$push: array}"></a>{$push: array}</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API: &#123;$push: array&#125;</span></span><br><span class="line"><span class="comment"> * 同数组的 push 方法，将数组 array 中包含的所有元素添加到 initialArray 的后面，作为一个新数组返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> pushArray = update(initialArray, &#123; <span class="attr">$push</span>: [<span class="string">'f'</span>] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'pushArray：'</span>, pushArray);  <span class="comment">// =&gt; [ 'a', 'b', 'c', 'd', 'e', 'f' ]</span></span><br></pre></td></tr></table></figure><h3 id="unshift-array"><a href="#unshift-array" class="headerlink" title="{$unshift: array}"></a>{$unshift: array}</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API: &#123;$unshift: array&#125;</span></span><br><span class="line"><span class="comment"> * 同数组的 unshift 方法，将数组 ['f'] 中包含的所有元素添加到 initialArray 的前面，作为一个新数组返回</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> unshiftArray = update(initialArray, &#123; <span class="attr">$unshift</span>: [<span class="string">'f'</span>] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'unshiftArray：'</span>, unshiftArray);   <span class="comment">// =&gt; [ 'f', 'a', 'b', 'c', 'd', 'e' ]</span></span><br></pre></td></tr></table></figure><h3 id="splice-array-of-arrays"><a href="#splice-array-of-arrays" class="headerlink" title="{$splice: array of arrays}"></a>{$splice: array of arrays}</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API: &#123;$splice: array of arrays&#125;</span></span><br><span class="line"><span class="comment"> * 同数组的 splice 方法</span></span><br><span class="line"><span class="comment"> *      数组 arrays 中包含的是所有需要执行的操作集合</span></span><br><span class="line"><span class="comment"> *      元素 array 中第一个元素代表下标，第二个元素代表需要删除的个数，第三个元素代表需要插入到 initialArray 中的的元素</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * PS:  1、可以在 arrays 中执行多个集合；</span></span><br><span class="line"><span class="comment"> *      2、两个操作不是同时执行，而是按顺序执行，后面的操作会在前面一个操作的执行结果上执行</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> spliceArray = update(initialArray, &#123; <span class="attr">$splice</span>: [[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">0</span>, <span class="string">'f'</span>, <span class="string">'g'</span>]] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'spliceArray：'</span>, spliceArray);  <span class="comment">// =&gt; [ 'a', 'd', 'f', 'g', 'e' ]</span></span><br></pre></td></tr></table></figure><h3 id="set-any"><a href="#set-any" class="headerlink" title="{$set: any}"></a>{$set: any}</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API: &#123;$set: any&#125;</span></span><br><span class="line"><span class="comment"> * 可以将数组或者对象中某一下标或者属性的值进行替换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 将 initialArray 数组中下标为 1 的元素修改为 'f'</span></span><br><span class="line"><span class="keyword">const</span> setArray = update(initialArray, &#123; <span class="number">1</span>: &#123; <span class="attr">$set</span>: <span class="string">'f'</span> &#125; &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'setArray'</span>, setArray);  <span class="comment">// =&gt; [ 'a', 'f', 'c', 'd', 'e' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 initialObject 对象中 age 属性值修改为 26</span></span><br><span class="line"><span class="keyword">const</span> setObject = update(initialObject, &#123; <span class="attr">age</span>: &#123; <span class="attr">$set</span>: <span class="number">26</span> &#125; &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'setObject'</span>, setObject);    <span class="comment">// =&gt; &#123; name: 'Jack', age: 26, gender: 'Man' &#125;</span></span><br></pre></td></tr></table></figure><h3 id="toggle-array-of-strings"><a href="#toggle-array-of-strings" class="headerlink" title="{$toggle: array of strings}"></a>{$toggle: array of strings}</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API: &#123;$toggle: array of strings&#125;</span></span><br><span class="line"><span class="comment"> * 可以将数组或者对象中下标集合或者属性集合的值进行切换：任何 Truthy 都会切换成 false，任何 Falsy 值都会切换成 true</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 将 initialArray 中下标为 1、2 的元素值进行切换</span></span><br><span class="line"><span class="keyword">const</span> toggleArray = update(initialArray, &#123; <span class="attr">$toggle</span>: [ <span class="number">1</span>, <span class="number">2</span> ] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'toggleArray：'</span>, toggleArray);    <span class="comment">// =&gt; [ 'a', false, false, 'd', 'e' ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> toggleObject = update(initialObject, &#123; <span class="attr">$toggle</span>: [ <span class="string">'name'</span>, <span class="string">'gender'</span> ] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'toggleObject：'</span>, toggleObject);  <span class="comment">// =&gt; &#123; name: false, age: 22, gender: false &#125;</span></span><br></pre></td></tr></table></figure><h3 id="unset-array-of-strings"><a href="#unset-array-of-strings" class="headerlink" title="{$unset: array of strings}"></a>{$unset: array of strings}</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API: &#123;$unset: array of strings&#125;</span></span><br><span class="line"><span class="comment"> * 从目标数组或者对象中移除 array 中的下标或者属性列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 删除数组 initialArray 中下标为 1 和 2 的两个元素，但是保留占位</span></span><br><span class="line"><span class="keyword">const</span> unsetArray = update(initialArray, &#123; <span class="attr">$unset</span>: [<span class="number">1</span>, <span class="number">2</span>] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'unsetArray：'</span>, unsetArray.length, unsetArray); <span class="comment">// 5    [ 'a', &lt;2 empty items&gt;, 'd', 'e' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除对象 initialObject 中 name 和 gender 属性</span></span><br><span class="line"><span class="keyword">const</span> unsetObject = update(initialObject, &#123; <span class="attr">$unset</span>: [<span class="string">'name'</span>, <span class="string">'gender'</span>] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'unsetObject'</span>, unsetObject);    <span class="comment">// unsetObject &#123; age: 22 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="merge-object"><a href="#merge-object" class="headerlink" title="{$merge: object}"></a>{$merge: object}</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API: &#123;$merge: object&#125;</span></span><br><span class="line"><span class="comment"> * 从目标数组或者对象中合并 object 中下标或者属性相同的元素，下标或属性相同时 object 中的元素会替换掉目标中的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 将 initialArray 数组中的 'a', 'b', 'c' 替换为 1, 2, 3</span></span><br><span class="line"><span class="keyword">const</span> mergeArray = update(initialArray, &#123; <span class="attr">$merge</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'mergeArray：'</span>, mergeArray);    <span class="comment">// =&gt; [ 1, 2, 3, 'd', 'e' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 initialObject 和 &#123; name: 'Rose', gender: 'Woman', hobby: 'Swimming' &#125; &#125; 对象进行合并</span></span><br><span class="line"><span class="keyword">const</span> mergeObject = update(initialObject, &#123; <span class="attr">$merge</span>: &#123; <span class="attr">name</span>: <span class="string">'Rose'</span>, <span class="attr">gender</span>: <span class="string">'Woman'</span>, <span class="attr">hobby</span>: <span class="string">'Swimming'</span> &#125; &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'mergeObject'</span>, mergeObject);    <span class="comment">// =&gt; &#123; name: 'Rose', age: 22, gender: 'Woman', hobby: 'Swimming' &#125;</span></span><br></pre></td></tr></table></figure><h3 id="apply-function"><a href="#apply-function" class="headerlink" title="{$apply: function}"></a>{$apply: function}</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API: &#123;$apply: function&#125;</span></span><br><span class="line"><span class="comment"> * 为目标数组或者对象中某个下标或者属性应用 function</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> apply = <span class="function">(<span class="params">val</span>) =&gt;</span> val + <span class="string">'--apply'</span></span><br><span class="line"><span class="comment">// 为 initialArray 数组中下标为 1 的元素执行 apply 函数</span></span><br><span class="line"><span class="keyword">const</span> applyArray = update(initialArray, &#123; <span class="number">1</span>: &#123; <span class="attr">$apply</span>: apply &#125; &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'applyArray：'</span>, applyArray);    <span class="comment">// =&gt; [ 'a', 'b--apply', 'c', 'd', 'e' ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为 initialObject 对象中 name 属性执行 apply 函数</span></span><br><span class="line"><span class="keyword">const</span> applyObject = update(initialObject, &#123; <span class="attr">name</span>: &#123; <span class="attr">$apply</span>: apply &#125; &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'applyObject：'</span>, applyObject);  <span class="comment">// =&gt; &#123; name: 'Jack--apply', age: 22, gender: 'Man' &#125;</span></span><br></pre></td></tr></table></figure><h3 id="add-array-of-objects"><a href="#add-array-of-objects" class="headerlink" title="{$add: array of objects}"></a>{$add: array of objects}</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API: &#123;$add: array of objects&#125;</span></span><br><span class="line"><span class="comment"> * 向 Set 中添加元素时，array 是一个对象的数组，向 Map 中添加元素时， array 是一个 [key, value] 的数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 将 ['Hello', 'World'] 中的元素添加到 initialSet 后，并返回一个新的 Set</span></span><br><span class="line"><span class="keyword">const</span> addSet = update(initialSet, &#123; <span class="attr">$add</span>: [<span class="string">'Hello'</span>, <span class="string">'World'</span>] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'addSet：'</span>, addSet);    <span class="comment">// =&gt; Set &#123; '2', '0', '1', '9', '猪', '年', '快', '乐', 'Hello', 'World' &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 [[3, 'Hello'], ['width', '20px']] 中的元素添加到 initialMap 中，并返回一个新的 Map</span></span><br><span class="line"><span class="keyword">const</span> addMap = update(initialMap, &#123; <span class="attr">$add</span>: [[<span class="number">3</span>, <span class="string">'Hello'</span>], [<span class="string">'width'</span>, <span class="string">'20px'</span>]] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'addMap'</span>, addMap);  <span class="comment">// =&gt; Map &#123; 'id' =&gt; '1', 'color' =&gt; 'blue', 3 =&gt; 'Hello', 'width' =&gt; '20px' &#125;</span></span><br></pre></td></tr></table></figure><h3 id="remove-array-of-strings"><a href="#remove-array-of-strings" class="headerlink" title="{$remove: array of strings}"></a>{$remove: array of strings}</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * API: &#123;$remove: array of strings&#125;</span></span><br><span class="line"><span class="comment"> * 从 Set 或者 Map 中移除 array 中的键列表</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 删除 initialSet 中的 '猪' 和 '年' 这两个元素</span></span><br><span class="line"><span class="keyword">const</span> removeSet = update(initialSet, &#123; <span class="attr">$remove</span>: [<span class="string">'猪'</span>, <span class="string">'年'</span>] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'removeSet：'</span>, removeSet);  <span class="comment">// =&gt; removeSet： Set &#123; '2', '0', '1', '9', '快', '乐' &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除 initialMap 中的 'color'和 'alias' 对应的两个键值对</span></span><br><span class="line"><span class="keyword">const</span> removeMap = update(initialMap, &#123; <span class="attr">$remove</span>: [<span class="string">'color'</span>, <span class="string">'alias'</span>] &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'removeMap：'</span>, removeMap);  <span class="comment">// =&gt; Map &#123; 'id' =&gt; '1' &#125;</span></span><br></pre></td></tr></table></figure><hr><h2 id="扩展用法"><a href="#扩展用法" class="headerlink" title="扩展用法"></a>扩展用法</h2><ul><li>可多层结构内使用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩展用法：可多层结构内使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> initialConfig = &#123;</span><br><span class="line">    width: <span class="number">100</span>,</span><br><span class="line">    height: <span class="number">100</span>,</span><br><span class="line">    options: [</span><br><span class="line">        &#123; <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">shape</span>: <span class="string">'Square'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">color</span>: <span class="string">'blue'</span>, <span class="attr">shape</span>: <span class="string">'Circular'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 多层结构内使用</span></span><br><span class="line"><span class="keyword">const</span> multiConfig1 = update(initialConfig, &#123; <span class="attr">options</span>: &#123; <span class="attr">color</span>: &#123; <span class="attr">$set</span>: <span class="string">'pink'</span> &#125; &#125; &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'multiConfig1：'</span>, multiConfig1);</span><br><span class="line"><span class="comment">/* =&gt; </span></span><br><span class="line"><span class="comment">&#123; width: 100,</span></span><br><span class="line"><span class="comment">  height: 100,</span></span><br><span class="line"><span class="comment">  options:</span></span><br><span class="line"><span class="comment">   [ &#123; color: 'red', shape: 'Square' &#125;,</span></span><br><span class="line"><span class="comment">     &#123; color: 'blue', shape: 'Circular' &#125;,</span></span><br><span class="line"><span class="comment">     color: 'pink' ] &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="注意用法"><a href="#注意用法" class="headerlink" title="注意用法"></a>注意用法</h2><ul><li>多种操作不要一起使用，否则只会执行最后的一个操作<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注意用法：多种操作不要一起使用，否则只会执行最后的一个操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> initialConfig = &#123;</span><br><span class="line">    width: <span class="number">100</span>,</span><br><span class="line">    height: <span class="number">100</span>,</span><br><span class="line">    options: [</span><br><span class="line">        &#123; <span class="attr">color</span>: <span class="string">'red'</span>, <span class="attr">shape</span>: <span class="string">'Square'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">color</span>: <span class="string">'blue'</span>, <span class="attr">shape</span>: <span class="string">'Circular'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子：只会执行最后的设置 color 属性的操作</span></span><br><span class="line"><span class="keyword">const</span> multiConfig2 = update(initialConfig, &#123; <span class="attr">options</span>: &#123; <span class="attr">$push</span>: [ &#123; <span class="attr">color</span>: <span class="string">'deepPink'</span>, <span class="attr">shape</span>: <span class="string">'Triangle'</span> &#125; ] &#125;, <span class="attr">options</span>: &#123; <span class="attr">color</span>: &#123; <span class="attr">$set</span>: <span class="string">'pink'</span> &#125; &#125; &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'multiConfig2：'</span>, multiConfig2);    </span><br><span class="line"><span class="comment">/* =&gt; </span></span><br><span class="line"><span class="comment">&#123; width: 100,</span></span><br><span class="line"><span class="comment">  height: 100,</span></span><br><span class="line"><span class="comment">  options:</span></span><br><span class="line"><span class="comment">   [ &#123; color: 'red', shape: 'Square' &#125;,</span></span><br><span class="line"><span class="comment">     &#123; color: 'blue', shape: 'Circular' &#125;,</span></span><br><span class="line"><span class="comment">     color: 'pink' ] &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了 immutability-helper 插件的基本使用，详细介绍了相关 API 的用法及注意事项。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
      <category term="React" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/React/"/>
    
    
      <category term="React" scheme="https://beichensky.github.io/tags/React/"/>
    
      <category term="Immutable" scheme="https://beichensky.github.io/tags/Immutable/"/>
    
  </entry>
  
  <entry>
    <title>Github仓库中分支的创建和删除</title>
    <link href="https://beichensky.github.io/20190102/github-branch/"/>
    <id>https://beichensky.github.io/20190102/github-branch/</id>
    <published>2019-01-02T10:37:33.000Z</published>
    <updated>2019-01-04T14:41:26.249Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了 GitHub 仓库中分支的创建、删除以及默认分支的设置，希望对有需要的朋友提供些帮助。</p><a id="more"></a><hr><h2 id="创建和删除分支"><a href="#创建和删除分支" class="headerlink" title="创建和删除分支"></a>创建和删除分支</h2><h3 id="直接在仓库上创建分支"><a href="#直接在仓库上创建分支" class="headerlink" title="直接在仓库上创建分支"></a>直接在仓库上创建分支</h3><p>  登录 Github，打开仓库，默认就在 Code 菜单下，不在的话，请点击上面的 Code 菜单栏，切换到 Code 菜单下。</p><ul><li><p>可以看到有一个下拉选择框 Branch:master<br>此时默认是master分支<br><img src="/images/github-branch/branch.png" alt="分支"></p></li><li><p>点击当前选择框<br>展开已有分支，可进行选择<br><img src="/images/github-branch/normal.png" alt="选择分支"></p></li><li><p>在文本框中输入想要新建的分支名<br>下方会出现 <strong>Create branch: 分支名</strong> 的选项，点击即可创建成果<br><img src="/images/github-branch/create.png" alt="创建分支"></p></li></ul><h3 id="在本地创建分支发布到-Github-上"><a href="#在本地创建分支发布到-Github-上" class="headerlink" title="在本地创建分支发布到 Github 上"></a>在本地创建分支发布到 Github 上</h3><ul><li><p>先将代码从 Github 拉取到本地<br>打开命令行，执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git init </span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/username/repo.git</span><br><span class="line">$ <span class="built_in">cd</span> repo</span><br></pre></td></tr></table></figure><blockquote><p>ps: username 请替换为你的用户名，repo 请替换为你的仓库名</p></blockquote></li><li><p>本地新建分支并切换</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b develop</span><br></pre></td></tr></table></figure><blockquote><p>ps: develop 可替换为你的分支名</p></blockquote></li><li><p>发布新分支到 Github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin develop</span><br></pre></td></tr></table></figure></li></ul><h3 id="删除分支"><a href="#删除分支" class="headerlink" title="删除分支"></a>删除分支</h3><blockquote><p><strong>注意：</strong> 删除分支之前：1、本地需要先切换到其他分支上；2、要删除的分支在远程仓库上不能是默认分支。</p></blockquote><p>在 Github 上没有找到删除分支的操作，因此只能从本地进行远程分支的删除。</p><ul><li><p>删除本地分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d develop</span><br></pre></td></tr></table></figure></li><li><p>删除 Github 远程分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin :develop</span><br></pre></td></tr></table></figure><blockquote><p>ps: 分支前的冒号代表删除</p></blockquote></li></ul><hr><h2 id="修改默认分支"><a href="#修改默认分支" class="headerlink" title="修改默认分支"></a>修改默认分支</h2><p>在仓库中，选择菜单栏 Settings 菜单，之后选择右侧菜单中的 Branches，将 master 切换为我们刚才新建的分支，选择后右侧出现 Update 按钮，点击即可完成默认分支的修改。</p><ul><li><p>选择默认分支<br><img src="/images/github-branch/choose.png" alt="选择默认分支"></p></li><li><p>更新分支<br><img src="/images/github-branch/update.png" alt="选择默认分支"></p></li><li><p>确认更新<br><img src="/images/github-branch/confirm.png" alt="确认更新"></p></li></ul><p>PS:会弹窗一个提示框，点击 <strong>I understand, update the default branch.</strong> 按钮即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了 GitHub 仓库中分支的创建、删除以及默认分支的设置，希望对有需要的朋友提供些帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="Git" scheme="https://beichensky.github.io/categories/Git/"/>
    
    
      <category term="Git" scheme="https://beichensky.github.io/tags/Git/"/>
    
      <category term="Github" scheme="https://beichensky.github.io/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>聊聊TypeScript中类、接口之间相互继承与实现的那些事儿</title>
    <link href="https://beichensky.github.io/20181228/ts-extends-impl/"/>
    <id>https://beichensky.github.io/20181228/ts-extends-impl/</id>
    <published>2018-12-28T07:42:26.000Z</published>
    <updated>2019-01-14T15:08:04.938Z</updated>
    
    <content type="html"><![CDATA[<p>本文讲述了类的继承、接口的实现中需要注意的一些小细节，同时也对类、接口的多继承做了一些讲解。</p><a id="more"></a><h2 id="先看一下继承"><a href="#先看一下继承" class="headerlink" title="先看一下继承"></a>先看一下继承</h2><h3 id="类的继承"><a href="#类的继承" class="headerlink" title="类的继承"></a>类的继承</h3><blockquote><p>子类继承了父类之后，就会将父类中定义的非 private 属性以及方法都继承下来</p></blockquote>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> Animal &#123;</span><br><span class="line">    <span class="keyword">public</span> name: <span class="built_in">string</span> = <span class="string">"Animal"</span>;</span><br><span class="line">    <span class="keyword">public</span> age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    sayHello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`Hello <span class="subst">$&#123; this.name &#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">extends</span> Animal &#123;</span><br><span class="line">    age: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>(<span class="params">age</span>) &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span>  Dog(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">dog.sayHello();</span><br></pre></td></tr></table></figure><p>  由于 Dog 继承了 Animal 类，所以同时也继承了 Animal 的 name 属性和 sayHello 方法，因此可以直接使用 dog 实例调用 sayHello 方法。<br>  <strong>那么问题来了：如果可以进行多继承，若多个父类中都包含同一个属性，那么子类使用的应该是哪个父类的属性呢？</strong> 因此 TypeScript 中不允许进行多继承，可是我就是想进行类的多继承该怎么办呢？可以使用用下节所说的 Mixins 的方式。</p><h3 id="类的多继承（Mixins-模拟）"><a href="#类的多继承（Mixins-模拟）" class="headerlink" title="类的多继承（Mixins 模拟）"></a>类的多继承（Mixins 模拟）</h3><ul><li><p>先定义两个类，Person 和 Student 类</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Person 类</span></span><br><span class="line"><span class="keyword">class</span> Person &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    sayHello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'tag'</span>, <span class="string">`Helo <span class="subst">$&#123; this.name &#125;</span>!`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Student 类</span></span><br><span class="line"><span class="keyword">class</span> Student &#123;</span><br><span class="line">    grade: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    study() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'tag'</span>, <span class="string">' I need Study!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>下面创建一个类，结合 Person 和 Student 这两个类<br>首先应该注意到的是，没使用 extends 而是使用 implements。 把类当成了接口，仅使用 Person 和 Student 的类型而非其实现。<br>我们可以这么做来达到目的，为将要mixin进来的属性方法创建出占位属性。 这告诉编译器这些成员在运行时是可用的。</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> SmartObject <span class="keyword">implements</span> Person, Student &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Person</span></span><br><span class="line">    name: <span class="built_in">string</span> = <span class="string">'person'</span>;</span><br><span class="line">    sayHello: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">    <span class="comment">// Activatable</span></span><br><span class="line">    grade: <span class="built_in">number</span> = <span class="number">3</span>;</span><br><span class="line">    study: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后，把mixins混入定义的类，完成全部实现部分</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把mixins混入定义的类</span></span><br><span class="line">applyMixins(SmartObject, [Person, Student]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// applyMixins 方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">applyMixins</span>(<span class="params">derivedCtor: <span class="built_in">any</span>, baseCtors: <span class="built_in">any</span>[]</span>) </span>&#123;</span><br><span class="line">    baseCtors.forEach(<span class="function"><span class="params">baseCtor</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">Object</span>.getOwnPropertyNames(baseCtor.prototype).forEach(<span class="function"><span class="params">name</span> =&gt;</span> &#123;</span><br><span class="line">            derivedCtor.prototype[name] = baseCtor.prototype[name];</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="接口与类之间的继承"><a href="#接口与类之间的继承" class="headerlink" title="接口与类之间的继承"></a>接口与类之间的继承</h3><blockquote><p>接口继承类的方式以及特点与上面类的继承和类的多继承一致。</p></blockquote><h3 id="接口与接口之间的多继承"><a href="#接口与接口之间的多继承" class="headerlink" title="接口与接口之间的多继承"></a>接口与接口之间的多继承</h3><blockquote><p>接口与接口之间是可以直接进行多继承的。</p></blockquote><ul><li><p>先定义两个接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阿里接口</span></span><br><span class="line"><span class="keyword">interface</span> Ali  &#123;</span><br><span class="line">    pay: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 腾讯接口</span></span><br><span class="line"><span class="keyword">interface</span> Tencent &#123;</span><br><span class="line">    game: <span class="built_in">string</span></span><br><span class="line">    play: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在定义一个接口继承 Ali、Tencent 接口</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自己的接口</span></span><br><span class="line"><span class="keyword">interface</span> Self <span class="keyword">extends</span> Ali, Tencent &#123;</span><br><span class="line">    name: <span class="built_in">string</span></span><br><span class="line">    say: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此时Self 接口就包含了 Ali 和 Tencent 接口中所有的属性和方法</p></blockquote></li><li><p>验证一下<br>用一个类继承 Self 接口，必须要将 Ali、 Tencent、 Self 接口中包含的所有属性和方法都声明了才可以，不然会编译报错</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Test 类实现 Self 接口</span></span><br><span class="line"><span class="keyword">class</span> Test <span class="keyword">extends</span> Self &#123;</span><br><span class="line">    game: <span class="built_in">string</span>;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    pay() &#123;</span><br><span class="line">        cosole.log(<span class="string">'经常用于支付'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    play() =&gt; &#123;</span><br><span class="line">        cosole.log(<span class="string">'可以玩各种游戏'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    say() &#123;</span><br><span class="line">        cosole.log(<span class="string">'不知道说点儿什么'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="再来看一下接口的实现"><a href="#再来看一下接口的实现" class="headerlink" title="再来看一下接口的实现"></a>再来看一下接口的实现</h2><h3 id="接口的实现"><a href="#接口的实现" class="headerlink" title="接口的实现"></a>接口的实现</h3><blockquote><p>接口在定义的时候，不能初始化属性以及方法，属性不能进行初始化，方法不能实现方法体。<br>    类实现接口之后，必须声明接口中定义的属性以及方法。</p></blockquote>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    eat: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> Dog <span class="keyword">implements</span> Animal &#123;</span><br><span class="line"></span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    eat() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'tag'</span>, <span class="string">'I love eat bone!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog: Dog = <span class="keyword">new</span> Dog();</span><br><span class="line">dog.eat();</span><br></pre></td></tr></table></figure><h3 id="类对于接口的多实现"><a href="#类对于接口的多实现" class="headerlink" title="类对于接口的多实现"></a>类对于接口的多实现</h3><blockquote><p>一个类可以实现多个接口，不过要将实现的所有接口的属性和方法都实现了。</p></blockquote>  <figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动物接口</span></span><br><span class="line"><span class="keyword">interface</span> Animal &#123;</span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line"></span><br><span class="line">    eat: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猫科接口</span></span><br><span class="line"><span class="keyword">interface</span> Felidae &#123;</span><br><span class="line">    claw: <span class="built_in">number</span>;</span><br><span class="line">    run: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让猫类实现 Animal 和 Felidae 两个接口</span></span><br><span class="line"><span class="keyword">class</span> Cat <span class="keyword">implements</span> Animal, Felidae &#123;</span><br><span class="line"></span><br><span class="line">    name: <span class="built_in">string</span>;</span><br><span class="line">    claw: <span class="built_in">number</span>;</span><br><span class="line"></span><br><span class="line">    eat() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'tag'</span>, <span class="string">'I love eat Food!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    run: () &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'tag'</span>, <span class="string">'My speed is very fast!'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog: Dog = <span class="keyword">new</span> Dog();</span><br><span class="line">dog.eat();</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><p>类与类之间只能进行单继承，想要实现多继承需要使用 Mixins 的方式</p></li><li><p>接口继承类也只能进行单继承，想要实现多继承需要使用 Mixins 的方式<br>Mixins 方式模拟多继承的缺陷：</p><ul><li><p>只能在继承一级父类的方法和属性</p></li><li><p>如果父类中含有同一种方法或属性，会根据赋值的顺序，先赋值的会被覆盖掉</p></li></ul></li><li><p>接口与接口之间可以直接进行多继承</p></li><li><p>类实现接口可以进行多实现，每个接口用 , 隔开即可</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文讲述了类的继承、接口的实现中需要注意的一些小细节，同时也对类、接口的多继承做了一些讲解。&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="TypeScript" scheme="https://beichensky.github.io/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript性能优化（八）</title>
    <link href="https://beichensky.github.io/20181221/js-hack8/"/>
    <id>https://beichensky.github.io/20181221/js-hack8/</id>
    <published>2018-12-21T10:29:19.000Z</published>
    <updated>2018-12-21T13:00:03.586Z</updated>
    
    <content type="html"><![CDATA[<p>本文是阅读《高性能JavaScript》一书后，从 <strong><em>编程实践</em></strong> 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！</p><a id="more"></a><hr><h3 id="避免双重求值"><a href="#避免双重求值" class="headerlink" title="避免双重求值"></a>避免双重求值</h3><p>当你在 JavaScript 代码中执行另一段 JavaScript 代码时，都会导致双重求值的性能消耗。此代码首先会以正常的方式求值，然后在执行过程中对包含于字符串找哪个的代码发起另一个求值运算。<strong>双重求值是一项低价昂贵的操作，它比直接包含的代码执行速度慢许多。</strong> </p><ul><li><p>尽量不使用 eval() 函数 和 Function() 构造函数</p></li><li><p>使用 setTimeout() 和 setInterval() 第一个参数尽量传入函数而不是字符串</p></li></ul><blockquote><p>使用原生代码和 eval() 分别读取 10 000 个数组项的速度对比：</p></blockquote><table><thead><tr><th>浏览器类别</th><th>原生代码（毫秒）</th><th>eval()（毫秒）</th></tr></thead><tbody><tr><td>Firefox 3</td><td>10.57</td><td>822.62</td></tr><tr><td>Firefox 3.5</td><td>0.72</td><td>141.54</td></tr><tr><td>Chrome 1</td><td>5.7</td><td>106.41 </td></tr><tr><td>Chrome 2</td><td>5.17</td><td>54.55</td></tr><tr><td>Internet Explorer 7</td><td>31.25</td><td>5086.13</td></tr><tr><td>Internet Explorer 8</td><td>40.06</td><td>420.55</td></tr><tr><td>Opera 9.64</td><td>2.01</td><td>402.82</td></tr><tr><td>Opera 10 Beta</td><td>10.52</td><td>315.16</td></tr><tr><td>Safari 3.2</td><td>30.37</td><td>306.6</td></tr><tr><td>Safari 4</td><td>22.16</td><td>54.47</td></tr></tbody></table><blockquote><p>优化后的 JavaScript 引擎通常会魂村住那些使用了 eval() 且重复运行的代码。如果你在 Safari 4 和所有版本 Chrome 中对同一段代码字符串反复求值，你会看到显著的性能提升。</p></blockquote><hr><h3 id="使用-Object-Array-直接量"><a href="#使用-Object-Array-直接量" class="headerlink" title="使用 Object/Array 直接量"></a>使用 Object/Array 直接量</h3><blockquote><p>对象属性和数组项的数量越多，使用直接量的好处就越明显。</p></blockquote><hr><h3 id="避免重复工作"><a href="#避免重复工作" class="headerlink" title="避免重复工作"></a>避免重复工作</h3><h4 id="先来看一段基本代码，之后对其进行优化"><a href="#先来看一段基本代码，之后对其进行优化" class="headerlink" title="先来看一段基本代码，之后对其进行优化"></a>先来看一段基本代码，之后对其进行优化</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHandle</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target.addEvenetListener) &#123; <span class="comment">// DOM2 Events</span></span><br><span class="line">        target.addEvenetListener(eventType, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// IE</span></span><br><span class="line">        target.attachEvent(<span class="string">"on"</span> + eventType, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeHandle</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target.removeEvenetListener) &#123; <span class="comment">// DOM2 Events</span></span><br><span class="line">        target.removeEvenetListener(eventType, handler, <span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// IE</span></span><br><span class="line">        target.detachEvent(<span class="string">"on"</span> + eventType, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用延迟加载进行优化"><a href="#使用延迟加载进行优化" class="headerlink" title="使用延迟加载进行优化"></a>使用延迟加载进行优化</h4><blockquote><p>调用延迟加载函数时，第一次总会消耗较长的时间，因为它必须运行监测接着再调用另一个函数完成任务。然随后调动相同的函数会更快，因为不需要再执行检测逻辑。当一个函数在页面中不会立刻调用时，延迟加载是最好的选择</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addHandle</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target.addEvenetListener) &#123; <span class="comment">// DOM2 Events</span></span><br><span class="line">        addHandle = <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</span><br><span class="line">            target.addEvenetListener(eventType, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// IE</span></span><br><span class="line">        addHandle = <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</span><br><span class="line">            target.attachEvent(<span class="string">"on"</span> + eventType, handler);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用新函数</span></span><br><span class="line">    addHandle(target, eventType, handler)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeHandle</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (target.removeEvenetListener) &#123; <span class="comment">// DOM2 Events</span></span><br><span class="line">        removeHandle = <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</span><br><span class="line">            target.removeEvenetListener(eventType, handler, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// IE</span></span><br><span class="line">        removeHandle = <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</span><br><span class="line">            target.detachEvent(<span class="string">"on"</span> + eventType, handler);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用新函数</span></span><br><span class="line">    removeHandle(target, eventType, handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用条件预加载进行优化"><a href="#使用条件预加载进行优化" class="headerlink" title="使用条件预加载进行优化"></a>使用条件预加载进行优化</h4><blockquote><p>条件预加载确保所有函数调用消耗的时间相同。其代价是需要在脚本加载时就检测，而不是加载后。预加载适用于一个函数马上就要被用到，并且在整个页面的生命周期中频繁出现的场合。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> addHandler = <span class="built_in">document</span>.body.addEvenetListener ? </span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</span><br><span class="line">                    target.addEvenetListener(eventType, handler, <span class="literal">false</span>);</span><br><span class="line">                &#125; :</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</span><br><span class="line">                    target.attachEvent(<span class="string">"on"</span> + eventType, handler);</span><br><span class="line">                &#125;;</span><br><span class="line"><span class="keyword">var</span> removeHandler = <span class="built_in">document</span>.body.removeEvenetListener ? </span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</span><br><span class="line">                    target.removeEvenetListener(eventType, handler, <span class="literal">false</span>);</span><br><span class="line">                &#125; :</span><br><span class="line">                <span class="function"><span class="keyword">function</span>(<span class="params">target, eventType, handler</span>) </span>&#123;</span><br><span class="line">                    target.detachEvent(<span class="string">"on"</span> + eventType, handler);</span><br><span class="line">                &#125;;</span><br></pre></td></tr></table></figure></p></blockquote><hr><h3 id="使用速度快的部分"><a href="#使用速度快的部分" class="headerlink" title="使用速度快的部分"></a>使用速度快的部分</h3><h4 id="位操作符"><a href="#位操作符" class="headerlink" title="位操作符"></a>位操作符</h4><blockquote><p>使用位操作符比 JavaScript 其他数学运算和布尔操作相比要快很多。</p><ul><li>按位与 &amp;<ul><li>两个操作数的对应位数都是 1 时，则在该位返回 1</li></ul></li></ul></blockquote><ul><li><p>按位或 |</p><ul><li>两个操作数的对应位数只要一个为 1 时，则在该位返回 1</li></ul></li><li><p>按位异或 ^</p><ul><li>两个操作数的对应位数只有一个为 1，则在该位返回 1</li></ul></li><li><p>按位取反 ~</p><ul><li>遇 0 则返回 1，反之亦然</li></ul></li></ul><h5 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h5><ul><li><p>位运算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通写法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = rows.length; i &lt; len; i ++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span>) &#123;</span><br><span class="line">        className = <span class="string">"even"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        className = <span class="string">"odd"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 增加class</span></span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用位操作符进行优化</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = rows.length; i &lt; len; i ++) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        className = <span class="string">"odd"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        className = <span class="string">"even"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 增加class</span></span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化后的版本比普通版本快了 50%</span></span><br></pre></td></tr></table></figure></li><li><p>位掩码</p><blockquote><p>用于处理同时存在多个布尔值的情形。期数即使用单个数字的每一位来判断是否选项成立，从而有效的把数字转换成有不二指标及组成的数组。掩码中的每个选项的值都等于 2 的幂。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> OPTION_A = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> OPTION_B = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> OPTION_C = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">var</span> OPTION_D = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">var</span> OPTION_E = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过这些选项，可以用按位或运算创建一个数字来包含多个设置选项</span></span><br><span class="line"><span class="keyword">var</span> options = OPTIONS_A | OPTIONS_C | OPTIONS_D;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果该选项未设置则运算结果为 0， 如果已设置则运算结果为 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 选项 A 是否在列表中？</span></span><br><span class="line"><span class="keyword">if</span> (options &amp; OPTIONS_A) &#123;</span><br><span class="line">    <span class="comment">// 代码处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 选项 B 是否在列表中？</span></span><br><span class="line"><span class="keyword">if</span> (options &amp; OPTIONS_B) &#123;</span><br><span class="line">    <span class="comment">// 代码处理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 像这样的位掩码运算速度非常快，原因正如前面提到的，计算操作发生在系统底层。</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>JavaScript 也支持按位左移（&lt;&lt;）， 按位右移（&gt;&gt;），和无符号右移（&gt;&gt;&gt;）等位运算符</p></blockquote><h4 id="原生方法"><a href="#原生方法" class="headerlink" title="原生方法"></a>原生方法</h4><blockquote><p><strong>无论你的 JavaScript 代码如何优化，都永远不会比 JavaScript 引擎提供的原生方法更快</strong>。</p></blockquote><ul><li><p>当你想进行数学运算时，请先查看 Math 对象</p></li><li><p>选择器 API，即使 JQuery 提供的方法也比原生方法要慢</p></li><li><p>当原生方法可用时，尽量使用它们。特别是数学运算和 DOM 操作。用编译后的代码做更多的事情，你的代码就会越快</p></li></ul><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><p>通过避免使用 eval() 和 Function() 构造器来避免双重求值带来的性能消耗。同样的，给 setTimeout 和 setInterval() 传递函数而不是字符串作为参数</p></li><li><p>尽量使用直接量创建对象和数组。直接量的创建和初始化都比非直接量形式要快</p></li><li><p>避免做重复的工作。当需要检测浏览器时，可使用延迟加载或条件预加载</p></li><li><p>在进行数学计算时，考虑使用直接操作数字的二进制形式的位运算</p></li><li><p>JavaScript 的原生方法总会比你写的任何代码都要快。尽量使用原生方法</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是阅读《高性能JavaScript》一书后，从 &lt;strong&gt;&lt;em&gt;编程实践&lt;/em&gt;&lt;/strong&gt; 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://beichensky.github.io/tags/JavaScript/"/>
    
      <category term="性能优化" scheme="https://beichensky.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="Practice" scheme="https://beichensky.github.io/tags/Practice/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript性能优化（七）</title>
    <link href="https://beichensky.github.io/20181221/js-hack7/"/>
    <id>https://beichensky.github.io/20181221/js-hack7/</id>
    <published>2018-12-21T10:29:09.000Z</published>
    <updated>2018-12-21T13:00:03.585Z</updated>
    
    <content type="html"><![CDATA[<p>本文是阅读《高性能JavaScript》一书后，从 <strong><em>Ajax</em></strong> 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！</p><a id="more"></a><hr><h3 id="请求数据"><a href="#请求数据" class="headerlink" title="请求数据"></a>请求数据</h3><p>有五种常用技术：</p><ul><li><p>XMLHttpRequest(XHR)</p></li><li><p>Dynamic script tag insertion 动态脚本注入</p></li><li><p>iframes</p></li><li><p>Comet</p></li><li><p>Multipart XHR</p></li></ul><h4 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h4><p>目前最常用的技术，他允许异步发送和接收数据。所有的主流浏览器对它都提供了完善的支持，而且它还能精准的控制发送请求和数据接收。</p><ul><li><p>范例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">'/data.php'</span>;</span><br><span class="line"><span class="keyword">var</span> params = [</span><br><span class="line">    <span class="string">'id=934875'</span>,</span><br><span class="line">    <span class="string">'limit=20'</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> req = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line"></span><br><span class="line">req.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (req.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> responseHeaders = req.getAllResponseHeaders(); <span class="comment">// 获取响应头信息</span></span><br><span class="line">        <span class="keyword">var</span> data = req.responseText; <span class="comment">// 获取数据</span></span><br><span class="line">        <span class="comment">// 数据处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">req.open(<span class="string">'GET'</span>, url + <span class="string">'?'</span> + params.join(<span class="string">'&amp;'</span>), <span class="literal">true</span>);</span><br><span class="line">req.setRequestHeader(<span class="string">'X-Requested-With'</span>, <span class="string">'XMLHttpRequest'</span>); <span class="comment">// 设置请求头信息</span></span><br><span class="line">req.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></li><li><p>通过监听 readyState 值等于 3，可以与正在传输的服务器响应进行交互：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">req.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (req.readyState === <span class="number">3</span>) &#123; <span class="comment">// 接收到部分信息，但不是所有</span></span><br><span class="line">        <span class="keyword">var</span> dataSoFar = req.responseText;</span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.readyState === <span class="number">4</span>) &#123; <span class="comment">// 所有信息接收完毕</span></span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="动态脚本注入"><a href="#动态脚本注入" class="headerlink" title="动态脚本注入"></a>动态脚本注入</h4><p>  这种技术克服了 XHR 的最大限制：它能跨域请求数据。范例：<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> scriptElement = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">scriptElement.src = <span class="string">'http://any-domin.com/javascript/lib.js'</span>;</span><br><span class="line"><span class="built_in">document</span>.getElementByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(scriptElement);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonCallback</span>(<span class="params">jsonString</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> data = <span class="built_in">eval</span>(<span class="string">'('</span> + jsonString + <span class="string">')'</span>);</span><br><span class="line">    <span class="comment">// 处理数据...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 本例中 libs 文件需要将数据封装在 jsonCallback 函数里：</span></span><br><span class="line"><span class="comment">// jsonCallback(&#123; "status": 1, "colors": ['#fff', '#000', '#ff0000']&#125;);</span></span><br></pre></td></tr></table></figure></p><pre><code>- 弊端：    1. 不能设置请求的头信息    2. 参数传递只能使用 GET 请求    3. 不能设置请求的超时处理或重试    4. 不能使用纯 XML、JSON、或其他任何格式的数据，无论哪种格式，都必须封装在一个回调函数中</code></pre><h4 id="Multipart-XHR"><a href="#Multipart-XHR" class="headerlink" title="Multipart XHR"></a>Multipart XHR</h4><p>编写健壮的 MXHR 代码很复杂，但值得深入研究，访问以下网址可获取完整的类库：<a href="http://techfoolery.com/mxhr/。" target="_blank" rel="noopener">http://techfoolery.com/mxhr/。</a></p><ul><li><p>优点：发送多个资源（图片，文件，HTML 片段）只用一次 HTTP 请求</p></li><li><p>适用场景：</p><ol><li>页面包含了大量其他地方用不到的资源（因此也无须缓存），尤其是图片</li><li>网站已经在每个页面中使用一个独立打包的 JavaScript 或 CSS 文件以减少 HTTP请求</li></ol></li><li><p>局限性：</p><ol><li>这种方式获得的资源不能被缓存</li><li>老版的 IE 不支持 readyState 为 3 的状态和 data: URL。因此无法使用</li></ol></li></ul><hr><h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><h4 id="XMLHttpRequest-1"><a href="#XMLHttpRequest-1" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h4><p>  当使用XHR 发送数据到服务器时， GET方式会更快。这是因为，对于少量数据而言，一个 GET 请求网服务器只发送一个数据包。而一个 POST 请求，至少要发送两个数据包，一个装载头信息，另一个装在 POST 正文。 POST 更适合发送大量数据到服务器，因为它不关心额外数据包的数量，另一个原因是 IE 对URL 长度有限制，它不可能使用过长的 GET 请求</p><h4 id="Beacons-信标"><a href="#Beacons-信标" class="headerlink" title="Beacons(信标)"></a>Beacons(信标)</h4><p>  这项技术非常类似动态脚本注入。使用JavaScript 创建一个新的 Image 对象，并把 src 属性设置为服务器上脚本的 URL。该 URL 包含了我们要通过 GET 传回的键值对数据。</p><blockquote><p>请注意，并没有创建 img 元素或把它插入 DOM</p></blockquote>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="string">'/status_tracker.php'</span>;</span><br><span class="line"><span class="keyword">var</span> params = [</span><br><span class="line">    <span class="string">'step=2'</span>,</span><br><span class="line">    <span class="string">'tmee=1248027314'</span></span><br><span class="line">];</span><br><span class="line">(<span class="keyword">new</span> Image()).src = url + <span class="string">'?'</span> + params.join(<span class="string">'&amp;);</span></span><br></pre></td></tr></table></figure><p>  信标是向服务器会窜数据中最快切最有想的方式。服务器根本不需要发送人性和响应文本，因此你也无须担心客户端下载数据。唯一缺点是你接收到的响应类型是有限的。如果你需要返回大量数据，请使用XHR。</p><hr><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><h4 id="不同数据格式情况下，响应内容大小和解析事件"><a href="#不同数据格式情况下，响应内容大小和解析事件" class="headerlink" title="不同数据格式情况下，响应内容大小和解析事件"></a>不同数据格式情况下，响应内容大小和解析事件</h4><table><thead><tr><th>格式</th><th>大小</th><th>下载耗时</th><th>解析耗时</th><th>总耗时</th></tr></thead><tbody><tr><td>标准的 XML</td><td>582 960 字节</td><td>999.4 毫秒</td><td>343.1 毫秒</td><td>1342.5 毫秒</td></tr><tr><td>简化的 XML</td><td>437 960 字节</td><td>475.1 毫秒</td><td>83.1 毫秒</td><td>558.2 毫秒</td></tr><tr><td>标准 JSON</td><td>487 895 字节</td><td>527.7 毫秒</td><td>26.7 毫秒</td><td>554.4 毫秒</td></tr><tr><td>简化的 JSON</td><td>392 895 字节</td><td>498.7 毫秒</td><td>29.0 毫秒</td><td>527.7 毫秒</td></tr><tr><td>数组 JSON</td><td>292 895 字节</td><td>305.4 毫秒</td><td>18.6 毫秒</td><td>324.0 毫秒</td></tr><tr><td>Verbose JSON-P</td><td>487 913 字节</td><td>598.2 毫秒</td><td>0.0 毫秒</td><td>598.2 毫秒</td></tr><tr><td>Simple JSON-P</td><td>392 913 字节</td><td>454.0 毫秒</td><td>3.1 毫秒</td><td>457.1 毫秒</td></tr><tr><td>Array JSON-P</td><td>292 912 字节</td><td>316.0 毫秒</td><td>3.4 毫秒</td><td>319.4 毫秒</td></tr><tr><td>HTML</td><td>1063 416 字节</td><td>273.1 毫秒</td><td>121.4 毫秒</td><td>394.5 毫秒</td></tr><tr><td>Custom Format (XHR)</td><td>222 892 字节</td><td>63.1 毫秒</td><td>14.5 毫秒</td><td>77.6 毫秒</td></tr><tr><td>Custom Format (script insertion)</td><td>222 912 字节</td><td>66.3 毫秒</td><td>11.7 毫秒</td><td>78.0 毫秒</td></tr></tbody></table><blockquote><p>JSON 是高性能 Ajax 的基础，尤其在使用动态脚本注入时。</p></blockquote><h4 id="数据格式总结"><a href="#数据格式总结" class="headerlink" title="数据格式总结"></a>数据格式总结</h4><p>通常来说数据格式越轻量级越好，JSON 和字符分隔的自定义格式是最好的。如果数据集很大并且对解析事件有要求，那么就从如下两种格式中作出选择：</p><ul><li><p>JSON-P 格式，使用动态脚本注入获取。它把数据当做可执行 JavaScript 而不是字符串，解析速度极快。它能跨域使用，但涉及敏感数据时不应该使用它</p></li><li><p>字符分隔的自定义格式，使用XHR 或动态脚本注入获取，用 split() 解析。这项技术解析大数据比 JSON-P略快，而且通常文件尺寸更小</p></li></ul><hr><h3 id="Ajax-性能指南"><a href="#Ajax-性能指南" class="headerlink" title="Ajax 性能指南"></a>Ajax 性能指南</h3><h4 id="缓存数据"><a href="#缓存数据" class="headerlink" title="缓存数据"></a>缓存数据</h4><ul><li><p>设置 HTTP 头信息</p><p>如果希望 Ajax 响应能够被浏览器缓存，那么你必须使用 GET 方式发出请求。但这还不够，你还必须在响应中发送正确的 HTTP 头信息。Expires 头信息会告诉浏览器应该缓存响应多久。</p><blockquote><p>设置 Expires 头信息是确保浏览器缓存 Ajax 响应最简单的方法。</p></blockquote></li><li><p>本地数据存储</p><p>直接将服务器接收到的数据存储到一个对象中，以 URL 为键值对作为索引。使用时直接从对象中获取。清除缓存时删除对应的 URL 属性即可</p></li></ul><h4 id="Ajax-类库的局限性"><a href="#Ajax-类库的局限性" class="headerlink" title="Ajax 类库的局限性"></a>Ajax 类库的局限性</h4><ul><li>不能放到到 XMLHttpRequest 的完整功能<blockquote><p>直接操作 XHR 对象减少了函数开销，进一步提升了性能。需要的是，如果放弃使用 Ajax 类库，那么你可能在一些古怪的浏览器上遇到一些问题。</p></blockquote></li></ul><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>作为数据格式，纯文本和 HTML 是高度限制的，但它们可节省客户端的 CPU 周期。XML 被广泛应用普遍支持，但它非常冗长且解析缓慢。JSON 是轻量级的，解析迅速（作为本地代码而不是字符串），交互性与 XML 相当。字符分隔的自定义格式非常轻量，在大量数据集解析时速度最快，但需要编写额外的程序在服务器端构造格式，并在客户端解析。</p><p>当从页面域请求数据时，XHR 提供最完善的控制和灵活性，尽管它将所有传入数据视为一个字符串，这有可能降低解析速度。另一方面，动态脚本标签插入技术允许跨域请求和本地运行 JavaScript 和 JSON，虽然它的接口不够安全，而且不能读取信息头或响应报文代码。多部分 XHR 可减少请求的数量，可在一次响应中处理不同的文件类型，尽管它不能缓存收到的响应报文。当发送数据时，图像灯标是最简单和最有效的方法。XHR 也可用 POST 方法发送大量数据。</p><p>除这些格式和传输技术之外，还有一些准则有助于进一步提高 Ajax 的速度：</p><ul><li><p>减少请求数量，可通过 JavaScript 和 CSS 文件打包，或者使用 MXHR</p></li><li><p>缩短页面的加载时间，在页面其它内容加载之后，使用 Ajax 获取少量重要文件</p></li><li><p>确保代码错误不要直接显示给用户，并在服务器端处理错误</p></li><li><p>知道何时使用成熟的 Ajax 类库，以及何时编写自己的底层 Ajax 代码</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是阅读《高性能JavaScript》一书后，从 &lt;strong&gt;&lt;em&gt;Ajax&lt;/em&gt;&lt;/strong&gt; 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://beichensky.github.io/tags/JavaScript/"/>
    
      <category term="性能优化" scheme="https://beichensky.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="Ajax" scheme="https://beichensky.github.io/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript性能优化（六）</title>
    <link href="https://beichensky.github.io/20181220/js-hack6/"/>
    <id>https://beichensky.github.io/20181220/js-hack6/</id>
    <published>2018-12-20T15:33:16.000Z</published>
    <updated>2019-01-07T15:34:19.713Z</updated>
    
    <content type="html"><![CDATA[<p>本文是阅读《高性能JavaScript》一书后，从 <strong><em>快速响应的用户界面</em></strong> 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！</p><a id="more"></a><hr><h3 id="浏览器-UI-线程"><a href="#浏览器-UI-线程" class="headerlink" title="浏览器 UI 线程"></a>浏览器 UI 线程</h3><p>用于执行 JavaScript 和更新用户界面的进程通常被称为“浏览器 UI 线程”。UI 线程的工作基于一个简单的队列系统，任务会被保存到队列中知道进程空闲。一旦空闲，队列中的下一个任务就被重新提取出来并运行。这些任务要么是运行 JavaScript 代码，要么是执行 UI 更新，包括重绘和重排。一次输入（包括：响应用户时间，自执行的 JavaScript 代码等）可能会导致一个或多个任务被加入队列。</p><p>当所有 UI 线程任务都执行完毕，进程进入空闲状态，并等待更多任务加入队列。空闲状态是理想的，因为用户所有的交互都会立刻出发 UI 更新。如果用户试图在任务运行期间与页面交互，不仅没有即时的 UI 更新，甚至可能新的 UI 更新任务都不会被创建并加入到队列。事实上，大多数浏览器在 JavaScript 运行时会停止把新任务加入 UI 线程的队列中，也就是说 JavaScript 任务必须尽快结束，以避免对用户体验造成不良影响。</p><h4 id="浏览器限制"><a href="#浏览器限制" class="headerlink" title="浏览器限制"></a>浏览器限制</h4><p>浏览器限制了 JavaScript 任务的运行时间。这种限制是有必要的，它确保某些恶意代码不能通过永不停止的密集操作锁住用户的浏览器或计算机。此类限制分两种：调用栈大小限制和长时间运行脚本限制</p><p>有两种方法可以度量脚本运行了多“长”：</p><ol><li><p>记录脚本开始以来执行的语句的数量</p></li><li><p>记录脚本执行的总时长</p></li></ol><p>不同浏览器检测长时间运行脚本的方法会略有不同：</p><ul><li><p>IE 自第 4 版开始，设置默认限制为 500 万条语句；此限制存放在 Windows 注册表中，叫做 HKEY_CURRENT_USER\Software\Microsoft\InternetExplorer\Styles\MaxScriptStatements</p></li><li><p>Firefox 的默认限制时间为 10 秒；该限制记录在浏览器配置设置中（通过地址栏输入 about: config 访问），键名为 dom.max_script_run_time</p></li><li><p>Safari 的默认限制为 5 秒；该限制无法更改，但是你可以通过 Develop 菜单选择 DisableRunaway JavaScript Timer 来禁用定时器。</p></li><li><p>Chrome 没有单独的长运行脚本限制，替代做法是依赖其通用崩溃检测系统来处理此类问题</p></li><li><p>Opera 没有长于宁脚本限制，它会继续执行 JavaScript 代码知道结束，鉴于 Opera 的架构，脚本运行结束时不会导致系统不稳定</p></li></ul><h4 id="多久才算“太久”"><a href="#多久才算“太久”" class="headerlink" title="多久才算“太久”"></a>多久才算“太久”</h4><p>浏览器允许脚本持续运行好几秒，但并不意味着你也允许它这样做。</p><blockquote><p>单个 JavaScript 操作花费的总时间（最大值）<strong>不应该超过 100 毫秒</strong>。这个数字源自 Robert Miller 于 1968 年的研究。</p></blockquote><blockquote><p>IE 会控制用户交互行为触发的 JavaScript 任务，因此它会识别连续两次的重复的动作。例如，当有脚本运行时点击一个按钮四次，最终按钮的 onclick 事件处理器只被调用两次。</p></blockquote><hr><h3 id="使用定时器让出时间片段"><a href="#使用定时器让出时间片段" class="headerlink" title="使用定时器让出时间片段"></a>使用定时器让出时间片段</h3><p>尽管你进了最大努力，但难免有一些复杂的 JavaScript 任务不能再 100 毫秒内完成。这个时候，最理想的方法是让出 UI 线程的控制权，使得 UI 可以更新，然后再继续执行 JavaScript。于是引入了 JavaScript 定时器。</p><h4 id="定时器基础"><a href="#定时器基础" class="headerlink" title="定时器基础"></a>定时器基础</h4><p>在 JavaScript 中可以使用 setTimeout() 和 setInterval() 创建定时器，他们接收相同的参数：要执行的函数和执行前的等待时间。setTimeout() 创建一个只执行一次的定时器，而 setInterval() 创建了一个周期性重复运行的定时器。<br>这个执行前等待时间是从 setTimeout() 或 setInterval() 调用时开始计算，而不是在整个函数运行结束后才开始计算。</p><blockquote><p>setTimeout() 和 setInterval() 几近相同，除了前者会重复添加 JavaScript 任务到队列。它们最主要的区别是，如果 UI 队列中已经存在由同一个 setInterval() 创建的任务，那么后续任务不会被添加到 UI 队列中。</p></blockquote><blockquote><p>每个定时器的真实延时时间在很大程度上屈居于具体情况。普通来讲，最好使用至少 25 毫秒，因为更小的延时，对大多数 UI 更新来说不够用。</p></blockquote><h4 id="定时器的精度"><a href="#定时器的精度" class="headerlink" title="定时器的精度"></a>定时器的精度</h4><p>JavaScript 定时器延迟通常不太精准，相差大约几毫秒。因此，定时器不可用于测量实际时间。</p><blockquote><p>定时器延时的最小值有助于避免在其他浏览器和其他操作系统中的定时器出现分辨率问题。大多数浏览器在定时器延时等于或小于 10 毫秒时表现不太一致。</p></blockquote><h4 id="使用定时器处理数组"><a href="#使用定时器处理数组" class="headerlink" title="使用定时器处理数组"></a>使用定时器处理数组</h4><ul><li><p>使用定时器取代循环的两个决定性因素：</p><ol><li>处理过程是否必须同步？否</li><li>数据是否必须按顺序处理？否</li></ol></li><li><p>实例代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通循环</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = items.length; i &lt; len; i++) &#123;</span><br><span class="line">    process(items[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用定时器处理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> todo = items.concat(); <span class="comment">// 克隆原数组</span></span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 取得数组的下个元素并进行处理</span></span><br><span class="line">    process(todo.shift());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果还有需要处理的元素，创建另一个定时器</span></span><br><span class="line">    <span class="keyword">if</span> (todo.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">25</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        callback(items);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">25</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这种优化模式的基本私立：创建一个原始数组的克隆，并将它作为数组向队列来处理。第一次调用 setTimeout() 创建一个定时器处理数组中的第一个条目。调用 todo.shift() 返回它的第一个条目然后把它从数组中删除。这个值作为参数传给 process()。处理完后，检查是否还有更多条目需要处理。如果 todo 数组中还有条目，那么就再启动一个定时器。因为下一个定时器需要运行相同的代码，所以第一个参数为 arguments.callee。该值指向当前正在运行的匿名函数。如果不再有条目需要处理，那么调用 callback() 函数。</p></blockquote></li><li><p>功能封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装后的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">processArray</span>(<span class="params">items, process, callback</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> todo = items.concat(); <span class="comment">// 克隆原数组</span></span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 取得数组的下个元素并进行处理</span></span><br><span class="line">      process(todo.shift());</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 如果还有需要处理的元素，创建另一个定时器</span></span><br><span class="line">      <span class="keyword">if</span> (todo.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">25</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          callback(items);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;, <span class="number">25</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用</span></span><br><span class="line"><span class="keyword">var</span> items = [<span class="number">123</span>, <span class="number">789</span>, <span class="number">323</span>, <span class="number">778</span>, <span class="number">232</span>, <span class="number">654</span>, <span class="number">219</span>, <span class="number">543</span>, <span class="number">321</span>, <span class="number">160</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputValue</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">processArray(items, outputValue, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Done!'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>使用定时器处理数组的副作用是处理数组的总时长增加了。因为在每一个条目处理完后 UI 线程会空闲出来，并且在下一条目开始处理之前会有一段延时。尽管如此，为避免锁定浏览器给用户带来的糟糕体验，这种取舍是有必要的。</p></blockquote><h4 id="分割任务"><a href="#分割任务" class="headerlink" title="分割任务"></a>分割任务</h4><p>我们通常会把一个任务分解成一些列子任务。如果一个函数运行时间太长，那么检查一下是否可以把它拆分成一系列能在较短时间内完成的子函数。</p><ul><li><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveDocument</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    openDocument(id);</span><br><span class="line">    writeText(id);</span><br><span class="line">    closeDocument(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将成功信息更新至界面</span></span><br><span class="line">    updateUI(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>如果这个函数运行时间太长，可以把每个独立的方法放在定时器中调用。使用上一节提到的数组处理模式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveDocument</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tasks = [openDocument, writeText, closeDocument, updateUI];</span><br><span class="line"></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行下一个任务</span></span><br><span class="line">        <span class="keyword">var</span> task = tasks.shift();</span><br><span class="line">        task(id);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否还有其他任务</span></span><br><span class="line">        <span class="keyword">if</span> (tasks.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">25</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">25</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>封装以备用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 功能函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multistep</span>(<span class="params">steps, args, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tasks = steps.concat();</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行下一个任务</span></span><br><span class="line">        <span class="keyword">var</span> task = tasks.shuift();</span><br><span class="line">        task.apply(<span class="literal">null</span>, args || []);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否还有其他任务</span></span><br><span class="line">        <span class="keyword">if</span> (tasks.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">25</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">25</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用时</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">saveDoucment</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> tasks = [openDocument, writeText, closeDocument, updateUI];</span><br><span class="line">    multistep(tasks, [id], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">"save completed!"</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>正如数组处理那样，使用此函数的前提条件是：任务可以异步处理而不影响用户体验或造成相关代码错误。</p></blockquote></li></ul><h4 id="记录代码运行时间"><a href="#记录代码运行时间" class="headerlink" title="记录代码运行时间"></a>记录代码运行时间</h4><ul><li>使用原生的 Date 对象来跟踪代码的运行时间<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> start = + <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> stop;</span><br><span class="line"></span><br><span class="line">someLongProcsee();</span><br><span class="line"></span><br><span class="line">stop = + <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(stop - start &lt; <span class="number">50</span>) &#123;</span><br><span class="line">    alert(<span class="string">'Juest about right.'</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    alert(<span class="string">'Taking too long.);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="定时器与性能"><a href="#定时器与性能" class="headerlink" title="定时器与性能"></a>定时器与性能</h4><blockquote><p>当多个重复的定时器同时创建旺旺会出现性能问题。因为只有一个 UI 线程，而所有的定时器都在争夺运行时间</p></blockquote><p>优化建议：</p><ul><li><p>在 Web 应用重限制高频率重复定时器的数量</p></li><li><p>创建一个独立的重复定时器，每次执行多个操作</p></li></ul><h3 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h3><p>每个新的 Worker 都在自己的线程中运行代码。意味着 Worker 运行代码不仅不会影响浏览器 UI，也不会影响其他 Worker 中运行的代码</p><h4 id="Worker-运行环境"><a href="#Worker-运行环境" class="headerlink" title="Worker 运行环境"></a>Worker 运行环境</h4><ul><li><p>一个 navigator 对象，只包括四个属性：appName、appVersion、user Agent 和 platform</p></li><li><p>一个 location 对象（与 window。location 相同，不过所有的属性都是只读的）</p></li><li><p>一个 Self 对象，指向全局 Worker 对象</p></li><li><p>一个 importScripts() 方法，用来加载 Worker 所用到的外部 JavaScript 文件</p></li><li><p>所有的 ECMAScript 对象，诸如：Object、Array、Date 等</p></li><li><p>XMLHttpRequest 构造器</p></li><li><p>setTimeout() 和 setInterval() 方法</p></li><li><p>一个 close() 方法，它能立刻停止 Worker 运行</p></li></ul><h4 id="与-Worker-通信"><a href="#与-Worker-通信" class="headerlink" title="与 Worker 通信"></a>与 Worker 通信</h4><blockquote><p>消息系统是网页和 Worker 通信的唯一途径</p></blockquote><ul><li><p>网页代码可以通过 postMessage() 方法给 Worker 传递数据，它接受一个参数，即需要传递给 Worker 的数据</p></li><li><p>Worker 还有一个用来接收信息的 onmessage 事件处理器</p></li><li><p>例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建 Worker</span></span><br><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'code.js'</span>);</span><br><span class="line">worker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 此处的 event.data 是 code.js 中组合之后的字符串</span></span><br><span class="line">    alert(event.data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">worker.postMessage(<span class="string">'any message'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// code.js 内部</span></span><br><span class="line">self.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 此处的 event.data 是上面传过来的 'any message'</span></span><br><span class="line">    sele.postMessage(<span class="string">'Hello, '</span> + event.data + <span class="string">'!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="加载外部文件"><a href="#加载外部文件" class="headerlink" title="加载外部文件"></a>加载外部文件</h4><p>Worker 通过 importScripts() 方法家在外部 JavaScript 文件，该方法接受一个或多个 JavaScript 文件URL 作为参数。</p><blockquote><p> importScripts() 调用过程是阻塞式的，知道所有文件加载并执行完成之后，脚本才会继续执行。由于 Worker 在 UI 线程之外运行，所以这种阻塞并不会影响 UI 相应</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// code.js 内部代码</span></span><br><span class="line">importScripts(<span class="string">'file1.js'</span>, <span class="string">'file2.js'</span>);</span><br><span class="line"></span><br><span class="line">self.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    self.postMessage(<span class="string">'Hello, '</span> + event.data + <span class="string">'!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实际应用"><a href="#实际应用" class="headerlink" title="实际应用"></a>实际应用</h4><ul><li><p>适用于处理纯数据或者与浏览器 UI 无关的长时间运行脚本</p></li><li><p>解析一个大字符串</p></li><li><p>编码/解码大字符串</p></li><li><p>复杂数学运算（包括图像或视频处理）</p></li><li><p>大数组排序</p></li><li><p>任何超过 100 毫秒的处理过程</p></li></ul><p><strong>解析一个很大的 JSON 字符串的例子：</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建 Worker 的代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">'jsonparser.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据就位时，调用事件处理器</span></span><br><span class="line">worker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JSON 结构被回传回来</span></span><br><span class="line">    <span class="keyword">var</span> jsonData = event.data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用 JSON 结构</span></span><br><span class="line">    evaluateData(jsonData);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">worker.postMessage(jsonText);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jsonparser.js 内部代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">self.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JSON 字符串由 event.data 传入</span></span><br><span class="line">    <span class="keyword">var</span> jsonText = event.data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析</span></span><br><span class="line">    <span class="keyword">var</span> jsonData = <span class="built_in">JSON</span>.parse(jsonText);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 回传结果</span></span><br><span class="line">    self.postMessage(jsonData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><p>任何 JavaScript 任务都不应当执行超过 100 毫秒。过长的运行时间会导致 UI 更新出现明显的延迟，从而对用户体验产生负面影响</p></li><li><p>JavaScript 运行期间，浏览器响应用户交互的行为存在差异。无论如何，JavaScript 长时间运行将导致用户体验变得混乱和脱节</p></li><li><p>定时器可用来安排代码延迟执行，它使得你可以长时间运行脚本分解成一系列的小任务</p></li><li><p>Web Workers 是新版浏览器支持的特性，它允许你在 UI 线程外部执行 JavaScript 代码，从而避免锁定 UI</p></li></ul><blockquote><p>Web 应用越复杂，积极主动地管理 UI 线程就越重要。即使 JavaScript 代码再重要，也不应该影响用户体验。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是阅读《高性能JavaScript》一书后，从 &lt;strong&gt;&lt;em&gt;快速响应的用户界面&lt;/em&gt;&lt;/strong&gt; 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://beichensky.github.io/tags/JavaScript/"/>
    
      <category term="性能优化" scheme="https://beichensky.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript性能优化（五）</title>
    <link href="https://beichensky.github.io/20181220/js-hack5/"/>
    <id>https://beichensky.github.io/20181220/js-hack5/</id>
    <published>2018-12-20T07:20:16.000Z</published>
    <updated>2018-12-21T13:00:03.584Z</updated>
    
    <content type="html"><![CDATA[<p>本文是阅读《高性能JavaScript》一书后，从 <strong><em>字符串和正则表达式</em></strong> 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！</p><a id="more"></a><hr><h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><h4 id="使用循环"><a href="#使用循环" class="headerlink" title="使用循环"></a>使用循环</h4><ul><li>向字符串末尾不断地添加内容。这种方式在某些浏览器中性能很糟糕</li></ul><h4 id="使用-或者-操作符"><a href="#使用-或者-操作符" class="headerlink" title="使用 + 或者 += 操作符"></a>使用 + 或者 += 操作符</h4><ul><li><p>常用方法：<code>str += &quot;one&quot; + &quot;two&quot;</code><br>此代码运行会经历四个步骤</p><ol><li>在内存中穿件一个临时字符串</li><li>连接后的字符串 “onetwo” 被赋值给临时字符串</li><li>临时字符串与 str 当前的值连接</li><li>结果赋值给 str</li></ol></li><li><p>优化版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str += <span class="string">"one"</span>;</span><br><span class="line">str += <span class="string">"two"</span>;</span><br></pre></td></tr></table></figure></li><li><p>更简化的写法：<code>str = str + &quot;one&quot; + &quot;two&quot;</code></p></li></ul><blockquote><p>下面这两种优化写法避免了产生临时字符串。但是如果改变连接顺序（例如：str = “one” + str + “two”），本优化将失效。<br>这与浏览器合并字符串时分配内存的方法有关。除 IE 外，其他浏览器会尝试为表达式左侧的字符串分配更多的内存，然后简单地将第二个字符串拷贝至它的欧威。如果在一个循环中，基础字符串位于最左端的位置，就可以避免重复拷贝一个逐渐变大的基础字符串。</p></blockquote><h4 id="Firefox-和编译器合并"><a href="#Firefox-和编译器合并" class="headerlink" title="Firefox 和编译器合并"></a>Firefox 和编译器合并</h4><p>  在复制变大是中所有要连接的字符串都属于编译期常量，Firefox 会在编译过程中自动合并它们。下面的方式可以看到这一过程：<br>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foldingDemo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"complie"</span> + <span class="string">"time"</span> + <span class="string">"folding"</span>;</span><br><span class="line">    str += <span class="string">"this"</span> + <span class="string">"works"</span> + <span class="string">"too"</span>;</span><br><span class="line">    str = str + <span class="string">"but"</span> + <span class="string">"not"</span> + <span class="string">"this"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(foldingDemo.toString);</span><br><span class="line"></span><br><span class="line"><span class="comment">// alert 出的结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foldingDemo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">"complietimefolding"</span>;</span><br><span class="line">    str += <span class="string">"thisworkstoo"</span>;</span><br><span class="line">    str = str + <span class="string">"but"</span> + <span class="string">"not"</span> + <span class="string">"this"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>当字符串通过这种方式合并在一起时，由于运行期没有中间字符串，所以花在连接过程的时间和内存可以减少到零。这种做法非常不错，但它不是经常起作用，因为更多的时候是用运行期的数据构建字符串，而不是用编译期常量。</p></blockquote><h4 id="数据项合并（Array-prototype-join）"><a href="#数据项合并（Array-prototype-join）" class="headerlink" title="数据项合并（Array.prototype.join）"></a>数据项合并（Array.prototype.join）</h4><blockquote><p>在大多数浏览器中，数据项合并比其他字符串连接方法更慢，但事实上，它却是IE7及更早版本浏览器中合并大量字符串 <strong>唯一高效的途径</strong>。<br>因为 IE7 的连接算法要求浏览器在循环过程中为逐渐增大的字符串不断复制并分配内存。结果是运行时间和内存消耗以平方关系递增。</p></blockquote><ul><li><p>实例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"I'm a thirty-five character string."</span>,</span><br><span class="line">    newStr = <span class="string">""</span>,</span><br><span class="line">    appends = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (appends --) &#123;</span><br><span class="line">    newStr += str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 IE 中优化</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"I'm a thirty-five character string."</span>,</span><br><span class="line">    strs = [],</span><br><span class="line">    newStr,</span><br><span class="line">    appends = <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (appends --) &#123;</span><br><span class="line">    strs[strs.length] = str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">newStr = strs.join(<span class="string">""</span>);</span><br></pre></td></tr></table></figure><blockquote><p>性能提升原因：当把所有的数组元素连接在一起时，浏览器会分配足够的内存来存放整个字符串，而且不会多次拷贝最终字符串中相同的部分。</p></blockquote></li></ul><h4 id="String-prototype-concat"><a href="#String-prototype-concat" class="headerlink" title="String.prototype.concat"></a>String.prototype.concat</h4><p>  这是最灵活的字符串合并方法，因为你可以用它只附加一个字符串，或者同事附加多个字符串，以至整个字符串数组。</p><blockquote><p>遗憾的是，在多数情况下，使用 concat 比使用简单的 + 和 += 稍慢，尤其是在 IE、Opear、Chrome 中慢的更明显。<br>此外，尽管使用 concat 合并字符串数组与前面讨论的数组项连接类似，但它通常更慢一些（Opera 除外），并且它也潜伏着灾难性的性能问题，就像在 IE7 及早期版本中使用 + 和 += 构建大字符串时那样。</p></blockquote><hr><h3 id="正则表达式优化"><a href="#正则表达式优化" class="headerlink" title="正则表达式优化"></a>正则表达式优化</h3><h4 id="正则表达式处理的基本步骤"><a href="#正则表达式处理的基本步骤" class="headerlink" title="正则表达式处理的基本步骤"></a>正则表达式处理的基本步骤</h4><ol><li>编译</li><li>设置起始位置</li><li>匹配每个正则表达式字元</li><li>匹配成功或失败</li></ol><h4 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h4><p>回溯先关篇幅过长，文字描述过多，想要更多了解请参阅《高性能 JavaScript》第五章：“字符串和正则表达式”。第 89 页</p><h4 id="提高正则表达式效率的方法"><a href="#提高正则表达式效率的方法" class="headerlink" title="提高正则表达式效率的方法"></a>提高正则表达式效率的方法</h4><ul><li><p>关注如何让匹配更快失败<br>正则表达式处理慢往往是因为匹配失败过程慢，而不是匹配成功过程慢。如果你使用正则表达式匹配一个很大字符串的一小部分，情况更为严重，正则表达式匹配失败的位置比匹配成功的位置要多得多。如果 一个修改使正则表达式匹配更快但失败更慢（例如，通过增加所需的回溯次数去尝试所有分支的排列组合），这通常是一个失败的修改。</p></li><li><p>正则表达式以简单、必需的字元开始<br>最理想的情况是，一个正则表达式的起始字元应当尽可能快速地测试并排除明显不匹配的位置。用于此目的好的起始字元通常是一个锚（^或$），特定字符（例如 x 或\u363A），字符类（例如，[a-z]或速记符例如\d），和单词边界（\b）。如果可能的话，避免以分组或选择字元开头，避免顶级分支例如/one|two/，因为它强迫正则表达式识别多种起始字元。Firefox 对起始字元中使用的任何量词都很敏感，能够优化的更好，例如，以\s\s*替代\s+或\s{1,}。其他浏览器大多优化掉这些差异。</p></li><li><p>使用量词模式，使它们后年的字元互斥<br>当字符与字元毗邻或子表达式能够重叠匹配时，一个正则表达式尝试分解文本的路径数量将增加。为避免此现象，尽量具体化你的模板。当你想表达<code>“[^&quot;\r\n]*”</code>时不要使用<code>“.*?”</code>（依赖回溯）</p></li><li><p>减少分支数量，缩小分支范围<br>分支使用 | ，竖线，可能要求在字符串的每一个位置上测试所有的分支选项。你通常可通过使用字符类和选项组件减少对分支的需求，或将分支在正则表达式上的位置推后（允许到达分支之前的一些匹配尝试失败）。</p></li><li><p>使用非捕获组<br>捕获组花费时间和内存用于记录后向引用，并保持它们是最新的。如果你不需要一个后向引用，可通过使用非捕获组避免这种开销——例如，(?:…)替代（…）。有些人当他们需要一个完全匹配的后向引用时，喜欢将他们的正则表达式包装在一个捕获组中。这是不必要的，因为你能够通过其他方法引用完全匹配，例如，使用 regex.exec()返回数组的第一个元素，或替换字符串中的$&amp;。</p></li><li><p>只捕获感兴趣的文本以减少后处理<br>作为上一条的补充说明，如果你需要引用匹配的一部分，应当通过一切手段，捕获那些片断，再使用后向引用处理。例如，如果你写代码处理一个正则表达式所匹配的引号中的字符串内容，使用<code>/&quot;([^&quot;]*)&quot;/</code>然后使用一次后向引用，而不是使用<code>/&quot;[^&quot;]*&quot;/</code>然后从结果中手工剥离引号。当在循环中使用时，减少这方面的工作可以节省大量时间。</p></li><li><p>暴露必须的字元<br>为帮助正则表达式引擎在如何优化查询例程时做出明智的决策，应尽量简单地判断出那些必需的字元。当字元应用在子表达式或者分支中，正则表达式引擎很难判断他们是不是必需的，有些引擎并不作此方面努力。例如，正则表达式/^(ab|cd)/暴露它的字符串起始锚。IE 和 Chrome 会注意到这一点，并阻止正则表达式尝试查找字符串头端之后的匹配，从而使查找瞬间完成而不管字符串长度。但是，由于等价正则表达式/(^ab|^cd)/不暴露它的^锚，IE 无法应用同样的优化，最终无意义地搜索字符串并在每一个位置上匹配。</p></li><li><p>使用适当的量词<br>在确保正确等价的前提下，使用更合适的量词类型（基于预期的回溯次数）可以显著提高性能，尤其在处理长字符串时。</p></li><li><p>把正则表达式赋值给变量并重用它们<br>将正则表达式赋给变量以避免对它们重新编译。有人做的太过火，使用正则表达式缓存池，以避免对给定的模板和标记组合进行多次编译。不要过分忧虑，正则表达式编译很快，这样的缓存池所增加的负担可能超过他们所避免的。重要的是避免在循环体中重复编译正则表达式。</p></li><li><p>将复杂的正则表达式拆分成简单的片段（化繁为简）<br>尽量避免一个正则表达式做太多的工作。复杂的搜索问题需要条件逻辑，拆分为两个或多个正则表达式更容易解决，通常也更高效，每个正则表达式只在最后的匹配结果中执行查找。在一个模板中完成所有工作的正则表达式怪兽很难维护，而且容易引起回溯相关的问题。</p></li></ul><h4 id="何时不使用正则表达式"><a href="#何时不使用正则表达式" class="headerlink" title="何时不使用正则表达式"></a>何时不使用正则表达式</h4><ul><li>当只是搜索字面字符串时，可以使用 string 的 charAt()、slice()、 substr、substring() 等方法替代正则表达式</li></ul><hr><h3 id="去除字符串首尾空白"><a href="#去除字符串首尾空白" class="headerlink" title="去除字符串首尾空白"></a>去除字符串首尾空白</h3><h4 id="使用正则表达式去首尾空白"><a href="#使用正则表达式去首尾空白" class="headerlink" title="使用正则表达式去首尾空白"></a>使用正则表达式去首尾空白</h4><ul><li><p>第一种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!Strig.prototype.trim) &#123;</span><br><span class="line">    <span class="comment">// trim 1</span></span><br><span class="line">    Strig.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+/</span>, <span class="string">""</span>).replace(<span class="regexp">/\s+$/</span>, <span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试新方法</span></span><br><span class="line"><span class="comment">// 头部空白中包含了制表(\t)和换行符(\n)</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"\t\n test string "</span>.trim();</span><br><span class="line">alert(str == <span class="string">"test string"</span>); <span class="comment">// 弹出信息为 true</span></span><br></pre></td></tr></table></figure></li><li><p>第二种：使用分支功能合并了两个简单正则表达式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// trim 2</span></span><br><span class="line">Strig.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>, <span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在处理较长字符串时要比第一种使用两个简单的子表达式要慢。</p></blockquote></li><li><p>第三种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// trim 3</span></span><br><span class="line">Strig.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s*([\s\S]*?)\s*$/</span>, <span class="string">"$1"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个正则表达式的作用是匹配整个字符串，捕获从第一个到最后一个非空白字符串。在处理较长字符串时就变得很慢。</p></blockquote></li><li><p>第四种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// trim 4</span></span><br><span class="line">Strig.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s*([\s\S]*\S)?\s*$/</span>, <span class="string">"$1"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个与第三种类似，但是考虑到性能原因，它把惰性量词替换成了一个贪婪量词。速度很快，甚至超过第一种使用两个子表达式的方案。（除非字符串里的尾部空白比其他文字还多）。但是这个方案在 Firefox 和 Opera 9 中相当慢。因此，第一种方案目前仍是最好的跨浏览器方案。</p></blockquote></li><li><p>第五种</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// trim 5</span></span><br><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s*(\S*(\s+\S+)\s*$/</span>), <span class="string">"$1"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>无论在何种情况下，这种方案都是上述所有方法中最慢的。</p></blockquote></li></ul><blockquote><p>使用正则表达式去除空白时的缺陷：当字符串的末尾有一小段空白时，正则表达式会陷入疯狂工作状态，这是因为正则表达式很好的去除了字符串头部的空白，但它们却不能同样快速地去除长字符串尾部的空白。</p></blockquote><h4 id="不使用正则表达式去除字符串首尾空白"><a href="#不使用正则表达式去除字符串首尾空白" class="headerlink" title="不使用正则表达式去除字符串首尾空白"></a>不使用正则表达式去除字符串首尾空白</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// trim 6</span></span><br><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">    <span class="keyword">var</span> start = <span class="number">0</span>, </span><br><span class="line">        end = <span class="keyword">this</span>.length - <span class="number">1</span>, </span><br><span class="line">        ws = <span class="string">" \n\r\t\f\x0b\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u200b\u2028\u2029\u202f\u205f\u3000\ufeff"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (ws.indexOf(<span class="keyword">this</span>.charAt(start)) &gt; <span class="number">-1</span>) &#123; </span><br><span class="line">        start++; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (end &gt; start &amp;&amp; ws.indexOf(<span class="keyword">this</span>.charAt(end)) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">        end--; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.slice(start, end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不使用正则表达式去除字符串首尾空白时的缺陷：不宜用来处理前后打断的空白字符。因为通过循环遍历字符串来确定白字符的效率比不上正则表达式使用的优化后的搜索代码。</p></blockquote><h4 id="混合解决方案"><a href="#混合解决方案" class="headerlink" title="混合解决方案"></a>混合解决方案</h4><p>使用正则表达式方法过滤头部空白，用非正则表达式的方法过滤尾部字符。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// trim 7</span></span><br><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = <span class="keyword">this</span>.replace(<span class="regexp">/^\s+/</span>, <span class="string">""</span>),</span><br><span class="line">        end = str.length - <span class="number">1</span>,</span><br><span class="line">        ws  = <span class="regexp">/\s/</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (ws.test(str.charAt(end))) &#123;</span><br><span class="line">        end --;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> str.slice(<span class="number">0</span>, end + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>这种混合方法在过来吧一小段空白时速度非常快，在处理头部有很多空白或者仅由空白组成的字符串时，也没有性能风险（尽管在处理尾部长空白时仍然存在不足）。</p></blockquote><h4 id="不同-trim-实现版本在各种浏览器上的性能"><a href="#不同-trim-实现版本在各种浏览器上的性能" class="headerlink" title="不同 trim 实现版本在各种浏览器上的性能"></a>不同 trim 实现版本在各种浏览器上的性能</h4><table><thead><tr><th style="text-align:left">浏览器类别</th><th style="text-align:left">Trim1</th><th style="text-align:left">Trim2</th><th style="text-align:left">Trim3</th><th style="text-align:left">Trim4</th><th style="text-align:left">Trim5</th><th style="text-align:left">Trim6</th><th style="text-align:left">Trim6    </th></tr></thead><tbody><tr><td style="text-align:left">IE 7</td><td style="text-align:left">80/80</td><td style="text-align:left">315/312</td><td style="text-align:left">547/539</td><td style="text-align:left">36/42</td><td style="text-align:left">218/224</td><td style="text-align:left">14/1015</td><td style="text-align:left">18/409</td></tr><tr><td style="text-align:left">IE 8</td><td style="text-align:left">70/70</td><td style="text-align:left">252/256</td><td style="text-align:left">512/425</td><td style="text-align:left">26/30</td><td style="text-align:left">216/222</td><td style="text-align:left">4/334</td><td style="text-align:left">12/205</td></tr><tr><td style="text-align:left">Firefox 3</td><td style="text-align:left">136/147</td><td style="text-align:left">164/174</td><td style="text-align:left">650/600</td><td style="text-align:left">1098/1525</td><td style="text-align:left">1416/1488</td><td style="text-align:left">21/151</td><td style="text-align:left">20/144</td></tr><tr><td style="text-align:left">Firefox 3.5</td><td style="text-align:left">130/147</td><td style="text-align:left">157/172</td><td style="text-align:left">500/510</td><td style="text-align:left">1004/1437</td><td style="text-align:left">1344/1394</td><td style="text-align:left">21/332</td><td style="text-align:left">18/50</td></tr><tr><td style="text-align:left">Safari 3.2.3</td><td style="text-align:left">253/253</td><td style="text-align:left">424/425</td><td style="text-align:left">351/359</td><td style="text-align:left">27/29</td><td style="text-align:left">541/554</td><td style="text-align:left">2/140</td><td style="text-align:left">5/80</td></tr><tr><td style="text-align:left">Safari 4</td><td style="text-align:left">37/37</td><td style="text-align:left">33/31</td><td style="text-align:left">69/68</td><td style="text-align:left">32/33</td><td style="text-align:left">510/514</td><td style="text-align:left">&lt;0.5/29</td><td style="text-align:left">4/18</td></tr><tr><td style="text-align:left">Opera 9.64</td><td style="text-align:left">494/517</td><td style="text-align:left">731/748</td><td style="text-align:left">9066/9601</td><td style="text-align:left">901/955</td><td style="text-align:left">1953/2016</td><td style="text-align:left">&lt;0.5/210</td><td style="text-align:left">20/241</td></tr><tr><td style="text-align:left">Opera 10</td><td style="text-align:left">75/75</td><td style="text-align:left">94/100</td><td style="text-align:left">360/370</td><td style="text-align:left">46/46</td><td style="text-align:left">514/514</td><td style="text-align:left">2/186</td><td style="text-align:left">12/198</td></tr><tr><td style="text-align:left">Chrome 2</td><td style="text-align:left">78/78</td><td style="text-align:left">66/68</td><td style="text-align:left">100/101</td><td style="text-align:left">59/59</td><td style="text-align:left">140/142</td><td style="text-align:left">1/37</td><td style="text-align:left">24/55</td></tr></tbody></table><ul><li>报告时间以毫秒为单位，是修剪一个大字符串（40KB）100次所用的时间，每个字符串以 10 个空格开头，以 1000 个空格结尾</li><li>trim 1 方案测试时关闭 /\s\s*$\优化</li><li>trim 5 方案测试时关闭非捕获组优化</li></ul><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>密集的字符串操作和草率地编写正则表达式可能产生严重的性能障碍，下面的的优化方案可以帮助你避免这些常见的陷阱：</p><ul><li><p>当连接数量巨大或尺寸巨大的字符串时，数组项合并是唯一在 IE7 及更早版本中性能合理的方法</p></li><li><p>如果不考虑 IE7 及更早版本的性能，数组向合并是最慢的字符串链接方法之一。推荐使用简单的 + 或者 += 操作符替代，避免不必要的中间字符串</p></li><li><p>回溯既是正则表达式匹配功能的基本组成部分，也是正则表达式的低效之源</p></li><li><p>回溯失控发生在正则表达式本应快速匹配的地方，但因为某些特殊的字符串匹配动作导致运行缓慢甚至浏览器崩溃。避免这个问题的方法是：使相邻的字元互斥，避免嵌套两次对同一字符串的相同部分多次匹配，通过重复利用预查的原子组去除不必要的回溯</p></li><li><p>提高正则表达式效率的各种手段会有助于正则表达式更快的匹配，并在非匹配位置上花更少的时间</p></li><li><p>正则表达式并不总是完成工作的最佳工具，尤其当你只搜索字面字符串的时候</p></li><li><p>尽管有许多方法可以去除字符串的首尾空白，但使用两个简单的正则表达式（一个用来去除头部空白，一个用来去除尾部空白）来去除大量字符串内容能提供一个简洁而跨浏览器的方法。从字符串末尾开始循环向前搜索第一个非空白字符，或者将此技术同正则表达式结合起来，会提供一个更好的替代方案，它很少受到字符串长度的影响</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是阅读《高性能JavaScript》一书后，从 &lt;strong&gt;&lt;em&gt;字符串和正则表达式&lt;/em&gt;&lt;/strong&gt; 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://beichensky.github.io/tags/JavaScript/"/>
    
      <category term="性能优化" scheme="https://beichensky.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="String" scheme="https://beichensky.github.io/tags/String/"/>
    
      <category term="Regex" scheme="https://beichensky.github.io/tags/Regex/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript性能优化（四）</title>
    <link href="https://beichensky.github.io/20181219/js-hack4/"/>
    <id>https://beichensky.github.io/20181219/js-hack4/</id>
    <published>2018-12-19T03:19:59.000Z</published>
    <updated>2018-12-21T13:00:03.583Z</updated>
    
    <content type="html"><![CDATA[<p>本文是阅读《高性能JavaScript》一书后，从 <strong><em>算法与流程控制</em></strong> 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！</p><a id="more"></a><hr><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><h4 id="循环类型"><a href="#循环类型" class="headerlink" title="循环类型"></a>循环类型</h4><ul><li><p>普通 for 循环</p><blockquote><p>在for循环中初始化的var语句会创建一个函数级的变量，而不是循环级。由于JavaScript只有函数级作用域，因此在for循环中使用var定义一个新变量相当于在循环体外定义一个新变量</p></blockquote></li><li><p>while 循环，while 循环是最简单的前测循环</p></li><li><p>do-while 循环，是 JavaScript 中唯一一种后测循环</p></li><li><p>for-in 循环：可以枚举任何对象的属性名</p><ul><li>for-in 循环是四种循环中最慢的，另外三种循环性能相仿</li><li>不要用 for-in 来遍历数组成员</li><li>尽量避免使用 for-in 循环，除非你明确需要一个属性数量未知的对象</li></ul></li></ul><h4 id="循环性能"><a href="#循环性能" class="headerlink" title="循环性能"></a>循环性能</h4><blockquote><p>当循环复杂度为 O(n) 时，减少每次迭代的工作量是最有效的方法。当复杂度大于 O(n)，建议着重减少迭代次数</p></blockquote><ul><li><p>减少迭代的工作量</p><ol><li><p>减少对象成员及数组项的查找次数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原始版本</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; items.length; i ++) &#123;</span><br><span class="line">    process(items[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最小化属性查找（优化版本）</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = items.length; i &lt; len; i ++) &#123;</span><br><span class="line">    process(items[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化后的版本大概能节省25%的运行时间（IE中甚至可以节省50%）</span></span><br><span class="line"><span class="comment">// 另外三种循环也是一样的优化方式</span></span><br></pre></td></tr></table></figure></li><li><p>使用倒序循环来提高循环性能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组项的顺序与索要执行的染污无关时，可以按照下面方式改写。可以略微提升性能</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = items.length; i --; ) &#123;</span><br><span class="line">    process(items[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>减少迭代次数</p><ol><li><p>达夫设备（Duff’s Device）</p><blockquote><p>是否应该使用“达夫设备”，无论是原始版本还是优化版本，很大程度上取决于迭代次数。若循环次数小于1000，性能提升微不足道。如果迭代次数超过1000，那么“达夫设备”的执行效率明显提升。</p></blockquote><ul><li><p>初始版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// credit: Jeff Greenberg</span></span><br><span class="line"><span class="keyword">var</span> iterations = <span class="built_in">Math</span>.floor(items.length / <span class="number">8</span>),</span><br><span class="line">    startAt    = items.length % <span class="number">8</span>,</span><br><span class="line">    i          = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(startAt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>: process([items[i++]]);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">7</span>: process([items[i++]])</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>: process([items[i++]])</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>: process([items[i++]])</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: process([items[i++]])</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: process([items[i++]])</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: process([items[i++]])</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: process([items[i++]])</span><br><span class="line">    &#125;</span><br><span class="line">    startAt = <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (--iterations);</span><br></pre></td></tr></table></figure></li><li><p>优化版本</p><blockquote><p>此算法将余数处理和主循环分开。尽管这种方式使用两次循环代替之前的一次循环，但它移除了循环体中的 switch 语句，速度比原始循环更快</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// credit: Jeff Greenberg</span></span><br><span class="line"><span class="keyword">var</span> i = items.length % <span class="number">8</span>;</span><br><span class="line"><span class="keyword">while</span>(i) &#123;</span><br><span class="line">    process([items[i--]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">i = <span class="built_in">Math</span>.floor(items.length / <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i) &#123;</span><br><span class="line">    process([items[i--]]);</span><br><span class="line">    process([items[i--]]);</span><br><span class="line">    process([items[i--]]);</span><br><span class="line">    process([items[i--]]);</span><br><span class="line">    process([items[i--]]);</span><br><span class="line">    process([items[i--]]);</span><br><span class="line">    process([items[i--]]);</span><br><span class="line">    process([items[i--]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>其他方案</p></li></ol></li></ul><h4 id="基于函数的迭代"><a href="#基于函数的迭代" class="headerlink" title="基于函数的迭代"></a>基于函数的迭代</h4><blockquote><p>尽管基于函数的迭代提供了一个更为便利的迭代方法，但它仍然 <strong>比基于循环的迭代要慢一些</strong></p></blockquote><ul><li><p>Ecma-262 标准第四版一如了一个新的原生数组方法：forEach()：items.forEach(function(value, index, array) {})</p></li><li><p>YUI 3 的each()：Y.Array.each(items, function(value, index, array) {})</p></li><li><p>Jquery 的 each()：jQuery.each(items, function(index, value) {})</p></li><li><p>Dojo 的 forEach()：dojo.each(items, function(value, index, array) {})</p></li><li><p>ProtoType 的 each()：items.each(function(value, index) {})</p></li><li><p>MooTools 的 each()：$each(items, function(value, index) {})</p></li></ul><hr><h3 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h3><h4 id="if-else-对比-switch"><a href="#if-else-对比-switch" class="headerlink" title="if-else 对比 switch"></a>if-else 对比 switch</h4><blockquote><p>大多数的语言对 switch 语句的实现都采用了 branch table（分支表）索引来进行优化。<br>另外，在 JavaScript 中，switch 语句比较值时使用权等操作符，不会发生类型转换的消耗。</p></blockquote><ul><li><p>大多数情况下，switch 比 if-else 运行得要快</p></li><li><p>循环条件较少时，if-else 更易读，条件数量较多时，switch 更易读</p></li><li><p>if-else 适用于判断两个离散值或者几个不同的值域。当判断多与两个离散值时，switch 语句是更佳选择</p></li></ul><h4 id="优化-if-else"><a href="#优化-if-else" class="headerlink" title="优化 if-else"></a>优化 if-else</h4><p>优化 if-else 的目标是：最小化到达正确分之前所需判断的条件数量</p><ul><li><p>最简单的优化方法是确保可能出现的条件放在首位</p></li><li><p>把 if-else 组织成一系列嵌套的 if-else 语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例代码：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通版本</span></span><br><span class="line"><span class="keyword">if</span> (value == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result0;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value == <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result1;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result2;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value == <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result3;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value == <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result4;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value == <span class="number">5</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result5;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value == <span class="number">6</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result6;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value == <span class="number">7</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result7;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value == <span class="number">8</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result8;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (value == <span class="number">9</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> result9;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化版本</span></span><br><span class="line"><span class="keyword">if</span> (value &lt; <span class="number">6</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result0;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result1;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> result2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result3;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result4;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> result5;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (value &lt; <span class="number">8</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="number">6</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result6;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> result7;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (value == <span class="number">8</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> result8;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> result9;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>重写后的 if-else 语句每次到达正确分支最多经过4次条件判断。它使用二分法把值域分成一系列的区间，然后逐步缩小范围。耗时仅是普通版本的一半。<br>这个方法非常适用于有多个值域需要测试的时候（如果是离散值，那么switch语句通常更为合适）。</p></blockquote></li></ul><h4 id="查找表"><a href="#查找表" class="headerlink" title="查找表"></a>查找表</h4><p>有些时候优化条件语句的最佳方案是避免使用 if-else 和 switch。当有大量离散值需要测试时，if-else 和 switch 比使用查找表慢很多。JavaScript 中可以使用数组和普通对象来构建查找表。通过查找表访问数据比用 if-else 或 switch 快很多，特别是在条件语句数量很大的时候。</p><blockquote><p>使用查找表相对于 if-else 和 switch，不仅速度更快，而且有时代码的可读性更好，特别是当需要测试的离散值数量非常大的时候。</p></blockquote><pre><code><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通switch</span></span><br><span class="line"><span class="keyword">switch</span> (value) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>: </span><br><span class="line">        <span class="keyword">return</span> result0;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: </span><br><span class="line">        <span class="keyword">return</span> result1;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: </span><br><span class="line">        <span class="keyword">return</span> result2;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: </span><br><span class="line">        <span class="keyword">return</span> result3;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: </span><br><span class="line">        <span class="keyword">return</span> result4;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>: </span><br><span class="line">        <span class="keyword">return</span> result5;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>: </span><br><span class="line">        <span class="keyword">return</span> result6;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>: </span><br><span class="line">        <span class="keyword">return</span> result7;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>: </span><br><span class="line">        <span class="keyword">return</span> result8;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>: </span><br><span class="line">        <span class="keyword">return</span> result9;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> result10;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用查找表技术优化</span></span><br><span class="line"><span class="comment">// 将返回值集合存入数组</span></span><br><span class="line"><span class="keyword">var</span> results = [result0, result1, result2, result3, result4, result5, result6, result7, result8, result9, result10];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回当前结果值</span></span><br><span class="line"><span class="keyword">return</span> results[value];</span><br></pre></td></tr></table></figure></code></pre><hr><h3 id="调用栈限制"><a href="#调用栈限制" class="headerlink" title="调用栈限制"></a>调用栈限制</h3><blockquote><p>JavaScript 引擎支持的递归数量与 JavaScript 调用栈大小直接相关。只有 IE 例外，它的调用栈与系统空闲内存有关，而其他浏览器都有固定数量的调用栈限制。</p></blockquote><p>使用了太多递归，甚至超过最大调用栈容量时，浏览器会报告一下错误信息：</p><ul><li><p>Internet Explorer: “Stack overflow at line x”</p></li><li><p>Firefox: “Too much recursion”</p></li><li><p>Safari: “Maximum call stack exceeded”</p></li><li><p>Opera: “Abort（control stack overflow）”</p></li><li><p>Chrome 是唯一不显示调用栈溢出错误的浏览器</p></li></ul><blockquote><p>尽管在 JavaScript 中捕获这些错误是有可能的，但并不推荐这样做。那些有潜在问题的调用栈溢出问题的脚本不应该发布上线</p></blockquote><hr><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>使用递归可以把复杂的算法变简单。比如阶乘函数：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>递归的潜在问题是终止条件不明确或缺少终止条件会导致函数长时间运行，并使得用户界面处于假死状态</p></blockquote><p>当遇到调用栈大小限制时，第一步应该先检查代码中的递归实例。为此，有两种递归模式值得注意：</p><ul><li><p>直接递归模式（即函数调用自身）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recurse</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    recurse();</span><br><span class="line">&#125;</span><br><span class="line">recurse();</span><br></pre></td></tr></table></figure></li><li><p>隐伏模式（两个或多个函数互相调用）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">first</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    second();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">second</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    first();</span><br><span class="line">&#125;</span><br><span class="line">first();</span><br></pre></td></tr></table></figure></li></ul><p>大多数调用栈错误都这两种模式有关。组常见的导致栈溢出的原因是不正确的终止条件，因此定位模式错误的第一步是验证终止条件。如果终止条件没有问题，那么可能是算法中包含了太多层递归，为了能在浏览器中安全的工作，建议改用 <strong>迭代</strong>、<strong>Memoization</strong>，或者结合两者使用。</p><hr><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><p>任何递归能实现的算法同样可以用迭代来实现。迭代算法通常包含以下几个不同的循环，分别对应计算过程的不同方面，这也会引入它们自身的性能问题。然而，使用优化后的循环替代长时间运行的递归函数可以提升性能，因为 <strong>运行一个循环比反复调用一个函数的开销要少很多</strong></p><p>例如合并排序算法：</p><ul><li><p>使用递归</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.concat(left).concat(right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">items</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(items.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> middle = <span class="built_in">Math</span>.floor(items.length / <span class="number">2</span>),</span><br><span class="line">        left   = items.slice(<span class="number">0</span>, middle),</span><br><span class="line">        right  = items.slice(middle);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这段代码相当直观，但是 mergeSort() 函数会导致很频繁的自调用。一个长度为 n 的数组最终会调用 mergeSort() 2*n - 1 次，这意味着一个长度超过 1500 的数组会在 Firefox 上发生栈溢出错误。</p></blockquote></li><li><p>使用迭代优化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt;<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (left[<span class="number">0</span>] &lt; right[<span class="number">0</span>]) &#123;</span><br><span class="line">            result.push(left.shift());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.push(right.shift());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result.concat(left).concat(right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">items</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (items.length == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> items;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> work = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = items.length; i &lt; len; i ++) &#123;</span><br><span class="line">        work.push([items[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    work.push([]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> lim = len; lim &gt; <span class="number">1</span>; lim = (lim + <span class="number">1</span>) / <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, k = <span class="number">0</span>; k &lt; lim; j ++, k += <span class="number">2</span>) &#123;</span><br><span class="line">            work[j] = merge(work[k], work[k + <span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        work[j] = []; <span class="comment">// 如果数组长度为奇数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> work[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这个版本没有使用递归，尽管迭代版本的合并排序算法比递归实现得要慢一些，但它不会像递归版本那样受调用栈限制的影响。把递归算法改用迭代实现是避免栈溢出错误的方法之一。</p></blockquote></li></ul><hr><h3 id="Memoization"><a href="#Memoization" class="headerlink" title="Memoization"></a>Memoization</h3><p>减少工作量就是最好的性能优化技术。代码要处理的事越少，它的运行速度就越快。沿着这个思路，避免重复工作也是有意义的。多次执行相同的任务纯粹是浪费时间。Memoization 正是一种避免重复工作方法，它缓存前一个计算结果供后续计算使用，避免了重复工作。这使得它成为递归算法中有用的技术。</p><ul><li><p>普通的阶乘函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fact6 = factorial(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">var</span> fact5 = factorial(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> fact4 = factorial(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这段代码有3次阶乘计算，导致 factorial() 函数一共被调用了 18 次。改代码中最糟糕的部分是，所有必要的计算在第一行代码里已经处理掉了。</p></blockquote></li><li><p>使用 Memoization 技术进行重写（保存并重用计算结果，而不是每次都重新计算整个函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">memfactorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!memfactorial.cache) &#123;</span><br><span class="line">        memfactorial.cache = &#123;</span><br><span class="line">            <span class="string">"0"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">"1"</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!memfactorial.cache.hasOwnProperty(n)) &#123;</span><br><span class="line">        memfactorial.cache[n] = n * memfactorial(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> memfactorial.cache[n];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fact6 = memfactorial(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">var</span> fact5 = memfactorial(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> fact4 = memfactorial(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><blockquote><p>该代码返回了3个不同的阶乘值，但只调用了 memfactorial() 函数 8 次。因为所有必要的计算都在第一行完成并缓存了，所以接下来的梁行代码不会发生地柜运算，而是直接返回缓存中的值了。</p></blockquote></li><li><p>更简单的版本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基础功能的 memoize 函数</span></span><br><span class="line"><span class="comment"> *    @param &#123;*&#125; fundamental 需要增加缓存功能的函数</span></span><br><span class="line"><span class="comment"> *    @param &#123;*&#125; cache 可选的缓存对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">memoize</span>(<span class="params">fundamental, cache</span>) </span>&#123;</span><br><span class="line">    cache = cache || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> shell = <span class="function"><span class="keyword">function</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!cache.hasOwnProperty(arg)) &#123;</span><br><span class="line">            cache[arg] = fundamental(arg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cache[arg];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> shell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> n * factorial(n - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> memfactorial = memoize(factorial, &#123;<span class="string">"0"</span>: <span class="number">1</span>, <span class="string">"1"</span>: <span class="number">1</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> fact6 = memfactorial(<span class="number">6</span>);</span><br><span class="line"><span class="keyword">var</span> fact5 = memfactorial(<span class="number">5</span>);</span><br><span class="line"><span class="keyword">var</span> fact4 = memfactorial(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这种通用的 Memoization 与手工更新给定函数的算法先比优化效果要差一些，因为 memoize() 函数会缓存特定参数的函数调用结果。当代码以相同的参数多次调用外壳函数时才能节省时间。因此，当 Memoization 函数存在显著性能问题时，最好有针对性的手工实现它，而不是直接用通用 Memoization 方案。</p></blockquote></li></ul><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><p>for、while、和 do-while 循环性能特性相当，并没有一种循环类型明显快于或慢于其他类型</p></li><li><p>避免使用 for-in 循环，除非你需要遍历一个属性数量未知的对象</p></li><li><p>改善循环性能的最佳方式是减少每次迭代的运算量和减少循环迭代次数</p></li><li><p>通常来说，switch 总是比 if-else 快，但并不总是最佳解决方案</p></li><li><p>在判断条件较多时，使用查找表比 if-else 和 switch 更快</p></li><li><p>浏览器的调用栈大小限制了递归算法在 JavaScript 中的应用；栈溢出错误会导致其他代码中断执行</p></li><li><p>如果你遇到栈溢出错误，可将方法改为迭代算法，或使用 Memoization 来避免重复计算</p></li></ul><blockquote><p>运行的代码数量越大，使用这些策略所带来的性能提升也就越明显。</p></blockquote><p>JavaScript 和其他编程语言一样，代码的写法和算法会影响运行时间。与其他语言不同的是，JavaScript 可用资源有限（由于JavaScript是解释型语言，与编译性语言不同的是，它无需编译，而是将代码以字符串的形式交给 JavaScript 引擎来执行。因此，代码性能在一定程度上取决于客户端浏览器的JavaScript引擎），因此优化技术更为重要。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是阅读《高性能JavaScript》一书后，从 &lt;strong&gt;&lt;em&gt;算法与流程控制&lt;/em&gt;&lt;/strong&gt; 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://beichensky.github.io/tags/JavaScript/"/>
    
      <category term="性能优化" scheme="https://beichensky.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript性能优化（三）</title>
    <link href="https://beichensky.github.io/20181218/js-hack3/"/>
    <id>https://beichensky.github.io/20181218/js-hack3/</id>
    <published>2018-12-18T03:19:40.000Z</published>
    <updated>2018-12-21T13:00:03.582Z</updated>
    
    <content type="html"><![CDATA[<p>本文是阅读《高性能JavaScript》一书后，从 <strong><em>DOM编程</em></strong> 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！</p><a id="more"></a><hr><h3 id="慢的必然性"><a href="#慢的必然性" class="headerlink" title="慢的必然性"></a>慢的必然性</h3><ul><li>简单理解，两个相互独立的功能只要通过接口彼此连接，就会产生消耗。</li></ul><hr><h3 id="DOM-的修改与访问"><a href="#DOM-的修改与访问" class="headerlink" title="DOM 的修改与访问"></a>DOM 的修改与访问</h3><p>访问DOM元素是有代价的，修改元素的代价则更为昂贵，因为它会导致浏览器重新计算页面的集合变化</p><p>当然，最坏的情况就是在循环中访问或修改元素，尤其是对 HTML 元素集合循环操作</p><ul><li><p>例一</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerHTMLLoop</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> count = <span class="number">0</span>; count &lt; <span class="number">15000</span>; count ++) &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">'here'</span>).innerHTML += <span class="string">'a'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例二</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">innerHTMLLoop2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> content = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> count = <span class="number">0</span>; count &lt; <span class="number">15000</span>; count ++) &#123;</span><br><span class="line">      content += <span class="string">'a'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'here'</span>).innerHTML += content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>结果显而易见，例二中的 innerHTMLLoop2 运行得更快</p></li><li><p>得出结论，访问DOM的次数越多，代码运行得速度越慢，因此，通用的经验法则是：减少访问 DOM 的次数，把运算尽量留在ECMAScript 这一端处理</p></li></ul><h4 id="innerHTML-对比-DOM-方法"><a href="#innerHTML-对比-DOM-方法" class="headerlink" title="innerHTML 对比 DOM 方法"></a>innerHTML 对比 DOM 方法</h4><ul><li>在旧版本浏览器中 innerHTML 的优势明显，在新版本的浏览器中两种方式相差无几</li></ul><h4 id="节点克隆"><a href="#节点克隆" class="headerlink" title="节点克隆"></a>节点克隆</h4><ul><li>使用 element.cloneNode() 替代 document。createElemnt()，运行效率会稍快一点，但是差距不大</li></ul><hr><h3 id="HTML-集合"><a href="#HTML-集合" class="headerlink" title="HTML 集合"></a>HTML 集合</h3><ul><li>HTML 集合以一种“假定实时态”实时存在，这意味着当底层文档对象更新时，它也会自动更新<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个意外的死循环</span></span><br><span class="line"><span class="keyword">var</span> alldivs = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; alldivs.length; i ++) &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(<span class="built_in">document</span>.createElement(<span class="string">'div));</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">/**</span></span><br><span class="line"><span class="string"> * 结局方案</span></span><br><span class="line"><span class="string">  * 将 HTML 集合拷贝到普通数组，再进行操作</span></span><br><span class="line"><span class="string">  */</span></span><br><span class="line"><span class="string">function toArray(coll) &#123;</span></span><br><span class="line"><span class="string">    for(var i = 0, a = []; i &lt; coll.length; i ++) &#123;</span></span><br><span class="line"><span class="string">        a[i] = coll[i];</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    return a;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">var coll = document.getElementsByTagName('</span>div<span class="string">');</span></span><br><span class="line"><span class="string">var ar = toArray(coll);</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="昂贵的集合"><a href="#昂贵的集合" class="headerlink" title="昂贵的集合"></a>昂贵的集合</h4><p>优化方案：</p><ul><li><p>相同的内容和数量下，便利一个数组的速度明显快于便利一个 HTML 集合</p></li><li><p>循环时缓存数组长度</p></li></ul><hr><h3 id="遍历-DOM"><a href="#遍历-DOM" class="headerlink" title="遍历 DOM"></a>遍历 DOM</h3><h4 id="获取-DOM-元素"><a href="#获取-DOM-元素" class="headerlink" title="获取 DOM 元素"></a>获取 DOM 元素</h4><ul><li><p>在不同浏览器中，elemnt.nextSibling 和 parentEle.childNode 运行时间相差无几</p><ul><li><p>但是在 IE6 中，nextSibling 快16倍</p></li><li><p>在 IE7 中，nextSibling 快 105 倍</p></li></ul></li><li><p>因此得出结论，在老版本的 IE 中，推荐使用 nextSibling 来查找DOM 节点，其他情况取决于个人或团队偏好</p></li></ul><h4 id="元素节点"><a href="#元素节点" class="headerlink" title="元素节点"></a>元素节点</h4><ul><li>在所有浏览器中，children 都比 childNodes 要快，因为集合项更少</li></ul><h4 id="选择器-API"><a href="#选择器-API" class="headerlink" title="选择器 API"></a>选择器 API</h4><ul><li><p>如果需要处理<strong>大量组合</strong>查询，推荐使用 querySelectorAll()</p></li><li><p>还有一个新的选择器API，querySelector()，可以获取第一个匹配到的节点</p></li></ul><hr><h3 id="重绘与重排"><a href="#重绘与重排" class="headerlink" title="重绘与重排"></a>重绘与重排</h3><ul><li>概念：<br> 当DOM的变化影响了元素的几何属性（宽和高）——比如改变边框宽度或给段落增加文字，导致行数增加——浏览器需要重新计算元素的几何数形，同样其他元素的几何属性也会因此受到影响。浏览器回事渲染树中受到影响的部分失效，并重新构建渲染树。这个过程称为“重排”。完成重排后，浏览器会重新绘制受影响的部分到屏幕中，该过程称为“重绘”。</li></ul><ul><li>并不是所有的 DOM 变化都会影响几何属性，例如，改变一个元素的背景色并不会影响它的宽和高。这种情况下，只会发生一次重绘（不需要重排）</li></ul><h4 id="重排何时发生"><a href="#重排何时发生" class="headerlink" title="重排何时发生"></a>重排何时发生</h4><ul><li><p>添加或删除可见的 DOM 元素</p></li><li><p>元素位置改变</p></li><li><p>元素尺寸改变（包括：外边距、内边距、边框厚度、宽度、高度等属性改变）</p></li><li><p>内容改变，例如：文本改变或图片被另一个不同尺寸的图片替代</p></li><li><p>页面渲染器初始化</p></li><li><p>浏览器窗口尺寸改变</p></li><li><p>滚动条出现时</p></li></ul><h4 id="渲染树变化的排队与刷新"><a href="#渲染树变化的排队与刷新" class="headerlink" title="渲染树变化的排队与刷新"></a>渲染树变化的排队与刷新</h4><blockquote><p>由于每次重排都会产生计算消耗，大多数浏览器通过队列化修改并批量执行来优化重拍过程，然而，你可能会（经常不知不觉）强制刷新队列要求计划任务立即执行。获取布局信息的操作会导致队列刷新。例如一下方法:</p></blockquote><ul><li><p>offsetTop, offsetLeft, offsetWidth, offsetHeight</p></li><li><p>scrollTop, scrollLeft, scrollWidth, scrollHeight</p></li><li><p>clientTop, clientLeft, clientWidth, clientHeight</p></li><li><p>getComputedStyle() （currentStyle in IE）</p></li></ul><p>以上属性和方法需要最新的布局信息，因此浏览器不得不执行渲染队列的“待处理变化”并触发重排以返回正确的值。</p><ul><li>因此，在修改样式的过程中，最好避免出现上面列出的属性。它们都会刷新渲染队列，即使你是在获取最近未发生改变的或者与最新改变无关的布局信息</li></ul><hr><h3 id="最小化重绘与重排"><a href="#最小化重绘与重排" class="headerlink" title="最小化重绘与重排"></a>最小化重绘与重排</h3><ul><li>如上所述，通过延迟访问布局信息来避免“重排”</li></ul><h4 id="改变样式"><a href="#改变样式" class="headerlink" title="改变样式"></a>改变样式</h4><ul><li><p>合并所有的改变然后依次处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">el.style.borderLeft = <span class="string">'1px'</span>;</span><br><span class="line">el.style.borderRight = <span class="string">'2px'</span>;</span><br><span class="line">el.style.padding = <span class="string">'5px'</span>;</span><br><span class="line"><span class="comment">// 上面可能会导致浏览器触发三次重排</span></span><br><span class="line"><span class="comment">// 改写成下面的方式就会更高效</span></span><br><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">el.style.cssText = <span class="string">'border-left: 1px; border-right: 1px; padding: 5px;'</span></span><br></pre></td></tr></table></figure></li><li><p>另一个一次性修改样式的方法是修改CSS的class名称，而不是修改内联样式。适用于那些不依赖运行逻辑和计算的情况</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">'box'</span>);</span><br><span class="line">el.className = <span class="string">'active'</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="批量修改-DOM"><a href="#批量修改-DOM" class="headerlink" title="批量修改 DOM"></a>批量修改 DOM</h4><p>可以使用以下步骤进行优化：</p><ol><li><p>使元素脱离文档流</p></li><li><p>对其应用多重改变</p></li><li><p>把元素带回文档中</p></li></ol><p>使 DOM 脱离文档的三种基本方法：</p><ul><li>前情提要<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 如下元素 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"myList"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.google.com"</span>&gt;</span>谷歌<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> data = [</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">"name"</span>: <span class="string">"Jack"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"url"</span>: <span class="string">"https://www.redux.org.cn"</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        &#123;</span></span><br><span class="line"><span class="javascript">            <span class="string">"name"</span>: <span class="string">"Ross"</span>,</span></span><br><span class="line"><span class="javascript">            <span class="string">"url"</span>: <span class="string">"https://github.com"</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 通用函数</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">appendDataToElement</span>(<span class="params">appendToElement, data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> a, li;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, max = data.length; i &lt; max; i ++) &#123;</span></span><br><span class="line"><span class="javascript">            a = <span class="built_in">document</span>.createElement(<span class="string">'a'</span>);</span></span><br><span class="line"><span class="undefined">            a.href = data[i].url;</span></span><br><span class="line"><span class="javascript">            a.appendChild(<span class="built_in">document</span>.createTextNode(data[i].name));</span></span><br><span class="line"><span class="javascript">            li = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span></span><br><span class="line"><span class="undefined">            li.appendChild(a);</span></span><br><span class="line"><span class="undefined">            appendToElement.appendChild(li);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 最普通的更新列表方式</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'myList'</span>);</span></span><br><span class="line"><span class="undefined">    appendDataToElement(ul, data);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ol><li><p>隐藏元素，应用修改，重新显示</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改之后的更新方式</span></span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'myList'</span>);</span><br><span class="line">ul.style.display = <span class="string">'none'</span>;</span><br><span class="line">appendDataToElement(ul, data);</span><br><span class="line">ul.style.display = <span class="string">'block'</span>;</span><br></pre></td></tr></table></figure></li><li><p>使用文档片段（document fragment）在当前 DOM 之外构建一个子树，再把它拷贝回文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改之后的更新方式</span></span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'myList'</span>);</span><br><span class="line"><span class="keyword">var</span> fragment = <span class="built_in">document</span>.creatDocumentFragment();</span><br><span class="line">appendDataToElement(fragment, data);</span><br><span class="line">ul.appendChild(fragment);</span><br></pre></td></tr></table></figure></li><li><p>将原始元素拷贝到一个脱离文档的节点中，修改副本，完成后再替换原始元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改之后的更新方式</span></span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">'myList'</span>);</span><br><span class="line"><span class="keyword">var</span> clone = ul.cloneNode(<span class="literal">true</span>);</span><br><span class="line">appendDataToElement(clone, data);</span><br><span class="line">ul.parentNode.replaceChild(clone, ul);</span><br></pre></td></tr></table></figure></li></ol><h4 id="缓存布局信息"><a href="#缓存布局信息" class="headerlink" title="缓存布局信息"></a>缓存布局信息</h4><ul><li><p>正如开始所说的，尽量减少获取布局信息的获取次数</p></li><li><p>应用场景：获取偏移量、滚动位置、计算出的样式值</p></li><li><p>例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 移动元素到一定位置后停止动画</span></span><br><span class="line"><span class="comment">// 低效的</span></span><br><span class="line">myElement.style.left = <span class="number">1</span> + myElement.offsetLeft + <span class="string">'px'</span>;</span><br><span class="line">myElement.style.top = <span class="number">1</span> + myElement.offsetTop + <span class="string">'px'</span>;</span><br><span class="line"><span class="keyword">if</span> (myElement.offsetLeft &gt;= <span class="number">500</span>) &#123;</span><br><span class="line">    stopAnimation();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改写之后：</span></span><br><span class="line"><span class="comment">// 先将 myElement.offsetLeft 缓存给局部变量 current</span></span><br><span class="line"><span class="keyword">var</span> current = myElement.offsetLeft;</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"><span class="comment">// 循环体中</span></span><br><span class="line">current ++;</span><br><span class="line">myElement.style.left = current + <span class="string">'px'</span>;</span><br><span class="line">myElement.style.top = current + <span class="string">'px'</span>;</span><br><span class="line"><span class="keyword">if</span> (current &gt;= <span class="number">500</span>) &#123;</span><br><span class="line">    stopAnimation();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="让元素脱离动画流"><a href="#让元素脱离动画流" class="headerlink" title="让元素脱离动画流"></a>让元素脱离动画流</h4><ul><li><p>步骤</p><ol><li><p>使用绝对位置定位页面上的动画元素，将其脱离文档流</p></li><li><p>让元素动起来。当它扩大时，会临时覆盖部分页面。但这只是页面一个小区域的重绘过程，不会产生重排并重绘页面的大部分内容</p></li><li><p>当动画结束时恢复定位，从而只会下移一次文档的其他元素</p></li></ol></li></ul><h4 id="hover-伪类"><a href="#hover-伪类" class="headerlink" title="hover 伪类"></a>hover 伪类</h4><ul><li><p>如果你有大量元素使用了 :hover，那么会降低响应速度。此问题在 IE8 中更为明显</p></li><li><p>因此在元素很多时应避免使用这种效果，比如很大的表格或很长的列表</p></li></ul><h4 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h4><p>当页面中存在大量元素，且每一个都要一次或多次绑定事件处理器时，这种情况可能会影响性能。每绑定一个事件处理器都是有代价的，它要么是加重了页面负担（更多的标签或JavaScript代码），要么是增加了运行期的执行时间。</p><p>因此，一个简单而优雅的处理 DOM 事件的技术是事件委托。它基于这样一个原理：事件逐层冒泡并能被父级元素捕获</p><ul><li><p>实例代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 场景： &lt;div&gt;&lt;ul id="menu"&gt;&lt;li&gt;&lt;a href="http://www.github.com"&gt;menu #1&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment"> *    用户点击链接 “menu #1”，点击事件首先由&lt;a&gt;元素收到，然后向 DOM 树上层冒泡，被&lt;li&gt;元素接受，接着是&lt;ul&gt;，然后是&lt;div&gt;。</span></span><br><span class="line"><span class="comment"> *    以此类推，一直到达document 的顶层乃至 window。这使得你可以添加一个事件处理器到父级元素，由它接受所有子节点的事件消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'menu'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 浏览器 target</span></span><br><span class="line">    e = e || <span class="built_in">window</span>.event;</span><br><span class="line">    <span class="keyword">var</span> target = e.target || e.srcElement;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> pageid, hrefparts;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 只关心hrefs， 非链接点击则退出</span></span><br><span class="line">    <span class="keyword">if</span> (target.nodeName !== <span class="string">'A'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从链接中找出页面 ID</span></span><br><span class="line">    hrefparts = target.href.split(<span class="string">'/'</span>);</span><br><span class="line">    pageid = hrefparts[hrefparts.length - <span class="number">1</span>];</span><br><span class="line">    pageid = pageid.replace(<span class="string">'.html'</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新页面</span></span><br><span class="line">    ajaxReauest(<span class="string">'xhr.php?page='</span> + id, updatePageContents);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 浏览器阻止默认行为并取消冒泡</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> e.preventDefault === <span class="string">'function'</span>) &#123;</span><br><span class="line">        e.preventDefault();</span><br><span class="line">        e.stopPropagation();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      e.returnValue = <span class="literal">false</span>;</span><br><span class="line">      e.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>跨浏览器兼容性的部分（可封装到可重用的类库）</p><ul><li><p>访问事件对象，并判断事件源</p></li><li><p>取消文档树中的冒泡（可选）</p></li><li><p>阻止默认动作（可选，但本例需要，因为需要捕获并阻止打开链接）</p></li></ul></li></ul><hr><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>访问和操作 DOM 是现代 Web 应用的重要部分。范每次穿越连接 ECMAScript 和 DOM 两个岛屿之间的前两，都会被收取“过桥费”。为了减少 DOM 编程带来的性能损失，请记住以下几点：</p><ul><li><p>最小化 DOM 访问次数，尽可能在 JavaScript 端处理</p></li><li><p>如果需要多次访问某个 DOM 节点，请使用局部变量存储它的引用</p></li><li><p>小心处理 HTML 集合，因为它实时连系着底层文档。把集合的长度缓存到一个变量中，并在迭代中使用。如果需要经常操作集合，建议把它拷贝到一个数组中</p></li><li><p>如果可能的话，使用速度更快的 API，比如 querySelectorAll()和 firstElementChild</p></li><li><p>要留意重绘和重排；批量修改样式时，“离线”操作 DOM 树，使用缓存，并减少访问布局信息的次数</p></li><li><p>动画中使用绝对定位，使用拖放代理</p></li><li><p>使用事件委托来减少事件处理器的数量</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是阅读《高性能JavaScript》一书后，从 &lt;strong&gt;&lt;em&gt;DOM编程&lt;/em&gt;&lt;/strong&gt; 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://beichensky.github.io/tags/JavaScript/"/>
    
      <category term="性能优化" scheme="https://beichensky.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="DOM" scheme="https://beichensky.github.io/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript性能优化（二）</title>
    <link href="https://beichensky.github.io/20181217/js-hack2/"/>
    <id>https://beichensky.github.io/20181217/js-hack2/</id>
    <published>2018-12-17T08:14:33.000Z</published>
    <updated>2018-12-21T13:00:03.581Z</updated>
    
    <content type="html"><![CDATA[<p>本文是阅读《高性能JavaScript》一书后，从 <strong><em>数据存取</em></strong> 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！</p><a id="more"></a><hr><h3 id="作用域和标识符解析"><a href="#作用域和标识符解析" class="headerlink" title="作用域和标识符解析"></a>作用域和标识符解析</h3><p>每个js函数都表示一个对象，是Function对象的一个实例，拥有可以变成访问的属性和一系列不能通过代码访问而仅供JS引擎存取的内部属性，其中一个属性就是[[Scope]]</p><p>内部属性[[Scope]]包含了一个函数被创建的作用域中对象的集合，这个集合被称为<strong>函数的作用域链</strong>。这个全局对象代表着所有在全局范围内定义的变量。包含诸如window，navigation和document等。</p><p>执行函数时会创建一个称为执行环境的内部对象。一个执行环境定义了一个函数执行时的环境。函数每次执行时对应的执行环境都是独一无二的，所以多次调用同一个函数就会导致创建多个执行环境。当函数执行完毕，执行环境就被销毁。</p><p>每个执行环境都有自己的作用域链，用于解析标识符。当执行环境被创建时，它的作用域链初始化为当前运行函数的[[Scope]]属性中的对象。这些值按照它们出现在函数中的顺序被复制到执行环境的作用域链中。这个过程一旦完成，一个被称为“活动对象”的新对象就为执行环境创建好了。活动对象作为函数运行时的变量对象，包含所有局部变量，命名参数，参数集合以及this。然后此对象被推入作用域链的最前端。当执行环境被销毁，活动对象也随之销毁</p><h3 id="标识符解析的性能"><a href="#标识符解析的性能" class="headerlink" title="标识符解析的性能"></a>标识符解析的性能</h3><p>标识符解析是有代价的，在执行环境的作用域链中，一个标识符所在的位置越深，它的读写速度也就越慢，因此，函数中读写局部变量总是最快的，而读写全局变量通常是最慢的。全局变量总是存在于执行环境作用域链的最末端，因此它也是最远的。</p><h3 id="改变作用域链"><a href="#改变作用域链" class="headerlink" title="改变作用域链"></a>改变作用域链</h3><ul><li><p>改变作用域链会导致访问对应对象的作用域时很快，但访问局部变量却变慢了</p></li><li><p>避免使用with</p></li><li><p>尽量在catch中将错误委托给一个函数来处理</p></li><li><p>在确实有必要时才推荐使用动态作用域</p></li></ul><h3 id="闭包、作用域和内存"><a href="#闭包、作用域和内存" class="headerlink" title="闭包、作用域和内存"></a>闭包、作用域和内存</h3><ul><li>闭包有可能会导致内存泄漏</li></ul><h3 id="对象成员"><a href="#对象成员" class="headerlink" title="对象成员"></a>对象成员</h3><ul><li>访问对象成员的速度比访问字面量和变量要慢，在某些浏览器中比访问数组元素还要慢</li></ul><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><ul><li>对象在原型链中存在的位置越深，存取速度也就越慢</li></ul><h3 id="嵌套成员"><a href="#嵌套成员" class="headerlink" title="嵌套成员"></a>嵌套成员</h3><ul><li>对象成员嵌套的越深，读取速度就会越慢</li></ul><h3 id="缓存对象成员"><a href="#缓存对象成员" class="headerlink" title="缓存对象成员"></a>缓存对象成员</h3><ul><li>在同一个函数或作用域下没必要多次读取同一个对象成员，可以在第一个读取时将对象成员缓存到局部变量中</li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul><li><p>访问字面量和局部变量的速度最快，相反，访问数组元素和对象成员相对较慢</p></li><li><p>由于局部变量存在于作用域链的起始位置，因此访问局部变量比访问跨作用于变量更快。变量在作用域链中的位置越深，访问所需的时间越长。由于全局变量总处在作用域链的最末端，因此访问速度也是最慢的</p></li><li><p>避免使用with语句，因为它会改变执行环境作用域链。同样，try-catch与剧中的catch也有同样的影响，因此也要小心使用</p></li><li><p>嵌套的对象成员会明显影响性能，尽量少用</p></li><li><p>属性或方法在原型链中的位置越深，访问它的速度也越慢</p></li><li><p>通常来说，你可以通过把常用的对象成员、数组元素、跨域变量保存在局部变量中来改善JavaScript性能，因为局部变量访问速度更快</p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是阅读《高性能JavaScript》一书后，从 &lt;strong&gt;&lt;em&gt;数据存取&lt;/em&gt;&lt;/strong&gt; 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://beichensky.github.io/tags/JavaScript/"/>
    
      <category term="性能优化" scheme="https://beichensky.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="JS" scheme="https://beichensky.github.io/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript性能优化（一）</title>
    <link href="https://beichensky.github.io/20181216/js-hack1/"/>
    <id>https://beichensky.github.io/20181216/js-hack1/</id>
    <published>2018-12-16T13:31:22.000Z</published>
    <updated>2018-12-21T13:00:03.580Z</updated>
    
    <content type="html"><![CDATA[<p>本文是阅读《高性能JavaScript》一书后，从 <strong><em>加载和执行</em></strong> 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！</p><a id="more"></a><blockquote><p>多数浏览器使用单一进城来处理用户界面（UI）刷新和JavaScript脚本执行，所以同一时刻只能做一件事。JavaScript执行过程耗时越久，浏览器等待相应的时间就越长。<br>简单说，这意味着<code>&lt;script&gt;</code>标签每次出现都霸道地让页面等待脚本的解析和执行，无论当前的JavaScript代码是内嵌还是包含在外链文件中，页面的下载和选人都必须听下来等待脚本执行完成。</p></blockquote><h3 id="脚本位置"><a href="#脚本位置" class="headerlink" title="脚本位置"></a>脚本位置</h3><ul><li>将所有的<code>&lt;script&gt;</code>标签尽可能的放到<code>&lt;body&gt;</code>标签的底部（雅虎特别性能小组提出的优化JavaScript的首要规则）</li></ul><h3 id="组织脚本"><a href="#组织脚本" class="headerlink" title="组织脚本"></a>组织脚本</h3><ul><li><p>浏览器在解析HTML页面的过程中每遇到一个<code>&lt;script&gt;</code>，都会因执行脚本而导致一定的演示，因此最小化延时时间会名校改善页面的总体性能</p><blockquote><p>建议永远不要把内嵌脚本紧跟在<code>&lt;link&gt;</code>标签后面，因为将一段内嵌脚本放在引用外联样式表的<code>&lt;link&gt;</code>标签之后会导致页面阻塞去等待样式表的下载。这么做是为了确保内嵌脚本在执行时能获得最精准的样式信息</p></blockquote></li><li><p>减少页面中外链脚本的数量，将多个文件合并成一个</p></li></ul><h3 id="无阻塞的脚本"><a href="#无阻塞的脚本" class="headerlink" title="无阻塞的脚本"></a>无阻塞的脚本</h3><p>意味着页面加载完成之后才加载JavaScript代码</p><ul><li>给<code>&lt;script&gt;</code>标签添加 async 属性，则资源下载完成自动执行</li></ul><h3 id="延迟的脚本"><a href="#延迟的脚本" class="headerlink" title="延迟的脚本"></a>延迟的脚本</h3><ul><li><p>给<code>&lt;script&gt;</code>标签添加 async 属性，则资源下载完成也必须等到页面加载完成后执行</p><blockquote><p>PS：async和defer的共同点和区别：<br>共同点：采用并行下载，在下载过程中不会产生阻塞<br>区别：执行时机不同，async是加载完成后自动执行，而defer需要等待页面完成后执行<br><strong>注意：</strong> 使用defer和async时最好先查阅当前浏览器是否支持该属性</p></blockquote></li></ul><h3 id="动态脚本元素"><a href="#动态脚本元素" class="headerlink" title="动态脚本元素"></a>动态脚本元素</h3><p>使用动态代码操作DOM创建<code>&lt;script&gt;</code>元素，这种技术的重点在于：<strong>无论何时启动下载，文件的下载和执行过程不会阻塞页面其他进行。</strong>设置可以将代码放在<code>&lt;head&gt;</code>区域而不会影响页面其他部分</p><p><strong>注意点</strong></p><ul><li><p>创建的<code>&lt;script&gt;</code>标签添加到<code>&lt;head&gt;</code>标签里比添加到<code>&lt;body&gt;</code>里更保险</p><ul><li>因为当<code>&lt;body&gt;</code>中的内容没有全部加载完成时，IE可能会抛出一个“操作已终止”的错误信息</li></ul></li><li><p>当脚本“自执行”时，这种机制运行正常。但是当代码只包含供页面其他接口调用的接口时，就会有问题</p><ul><li><p>在这种情况下，必须跟踪并确保脚本下载完成并准备就绪</p></li><li><p>实现代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script);</span></span><br><span class="line"><span class="string">    script.type = "text/script";</span></span><br><span class="line"><span class="string">    if (script.readyState) &#123; // IE</span></span><br><span class="line"><span class="string">        script.onreadystatechange = function() &#123;</span></span><br><span class="line"><span class="string">            if (script.readyState == "loaded" || script.readyState == "complete") &#123;</span></span><br><span class="line"><span class="string">                // 确保事件不会处理两次</span></span><br><span class="line"><span class="string">                script.onreadystatechange = null;</span></span><br><span class="line"><span class="string">                callback();</span></span><br><span class="line"><span class="string">            &#125;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125; else &#123; // 其他浏览器</span></span><br><span class="line"><span class="string">        script.onload = function() &#123;</span></span><br><span class="line"><span class="string">            callback();</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    script.src = url;</span></span><br><span class="line"><span class="string">    document.getElementsByTagName("head")[0].appendChild(script);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>调用方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">loadScript(<span class="string">"file1.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    loadScript(<span class="string">"file2.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        loadScript(<span class="string">"file2.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(<span class="string">"所以文件加载完成"</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="XMLHTTPRequest脚本注入"><a href="#XMLHTTPRequest脚本注入" class="headerlink" title="XMLHTTPRequest脚本注入"></a>XMLHTTPRequest脚本注入</h3><ul><li><p>此技术会先创建一个XHR对象，然后用它下载JavaScript文件，最后通过动态<code>&lt;script&gt;</code>元素将代码注入到页面中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">"get"</span>, <span class="string">"file1.js"</span>, <span class="literal">true</span>);</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (xhr.status &gt;= <span class="number">200</span> &amp;&amp; xhr.statue &lt; <span class="number">300</span> || xhr.status == <span class="number">304</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">            script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">            script.text = xhr.responseText;</span><br><span class="line">            <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>优点：可以下载JavaScript代码但不立即执行，由于代码实在标签之外返回的，因此下载后不会自动执行，可以将脚本的执行推迟到页面准备好的时候</p></li><li><p>局限性：JavaScript代码必须与所请求的页面处于相同的域，这意味着JavaScript文件不能从CDN下载</p></li></ul><h3 id="推荐的无阻塞模式"><a href="#推荐的无阻塞模式" class="headerlink" title="推荐的无阻塞模式"></a>推荐的无阻塞模式</h3><p>向页面中添加大量JavaScript的推荐方式只需两步：先动态加载所需的代码，然后加载初始化页面所需的剩下的代码。第一部分的代码尽量精简</p><ul><li><p>第一种做法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"loader.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  loadScript(<span class="string">"the-rest.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">      Application.init();</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>第二种做法</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url, callback</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script);</span></span></span><br><span class="line"><span class="javascript">      script.type = <span class="string">"text/script"</span>;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (script.readyState) &#123; <span class="comment">// IE</span></span></span><br><span class="line"><span class="javascript">          script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">if</span> (script.readyState == <span class="string">"loaded"</span> || script.readyState == <span class="string">"complete"</span>) &#123;</span></span><br><span class="line"><span class="javascript">                  <span class="comment">// 确保事件不会处理两次</span></span></span><br><span class="line"><span class="javascript">                  script.onreadystatechange = <span class="literal">null</span>;</span></span><br><span class="line"><span class="undefined">                  callback();</span></span><br><span class="line"><span class="undefined">              &#125;</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="javascript">      &#125; <span class="keyword">else</span> &#123; <span class="comment">// 其他浏览器</span></span></span><br><span class="line"><span class="javascript">          script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">              callback();</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">      script.src = url;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(script);</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="javascript">  loadScript(<span class="string">"the-rest.js"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">      Application.init();</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>第二种做法可以比多产生一次HTTP请求，但是建议使用YUI Compressor 把初始化代码压缩到最小尺寸</p></blockquote><h3 id="YUI3-的方式"><a href="#YUI3-的方式" class="headerlink" title="YUI3 的方式"></a>YUI3 的方式</h3><ul><li><p>YUI3核心设计理念：由页面中的少量代码来加载丰富的功能组件</p></li><li><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://yui.yahooapis.com/combo?3.0.0/build/yui/yui-min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// dom实际上拼装出一个带有所有依赖文件组合的URL</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// Y，当前YUI实例</span></span></span><br><span class="line"><span class="javascript">  YUI.use(<span class="string">"dom"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">Y</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      Y.DOM.addClass(<span class="built_in">document</span>.body, <span class="string">"loaded"</span>)</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="LazyLoad-类库"><a href="#LazyLoad-类库" class="headerlink" title="LazyLoad 类库"></a>LazyLoad 类库</h3><ul><li>使用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- LazyLoader 源代码：http://github.com/rgrove/lazyload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"lazyload-min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  LazyLoad.js([<span class="string">"first-file.js"</span>, <span class="string">"the-rest.js"</span>], <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">      Application.init()</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="LABjs"><a href="#LABjs" class="headerlink" title="LABjs"></a>LABjs</h3><ul><li>使用<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- LABjs源代码：http://labjs.com --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 虽然是同归.script链式调用，其实也是并行下载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"lab.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="comment">// wait 意味着加载好前面的javascript资源才会继续向下加载</span></span></span><br><span class="line"><span class="javascript">  $LAB.script(<span class="string">"first-file.js"</span>).wait()</span></span><br><span class="line"><span class="javascript">      .script(<span class="string">"the-rest.js"</span>)</span></span><br><span class="line"><span class="javascript">      .wait(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">          Appication.init();</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>减少JavaScript对性能的影响的方式：</p><ul><li><p><code>&lt;/body&gt;</code>闭合标签之前，将所有的<code>&lt;script&gt;</code>放到页面底部。这能确保在脚本执行前页面已经完成了渲染</p></li><li><p>合并脚本。页面中的<code>&lt;script&gt;</code>标签越少，加载也就越快，响应也更迅速，无论外链文件还是内嵌脚本都是如此</p></li><li><p>有多种无阻塞下载JavaScript的方法：</p><ul><li><p>使用<code>&lt;script&gt;</code>标签的defer属性</p></li><li><p>使用动态创建的<code>&lt;script&gt;</code>元素来下载并执行代码</p></li><li><p>使用XHR对象下载JavaScript代码并注入到页面中</p></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是阅读《高性能JavaScript》一书后，从 &lt;strong&gt;&lt;em&gt;加载和执行&lt;/em&gt;&lt;/strong&gt; 模块对JavaScript性能优化做了部分总结，记录一下。可能总结的不好，不是很完整，也希望各位大佬能多给出一些建议。万分感谢！&lt;/p&gt;
    
    </summary>
    
      <category term="前端开发" scheme="https://beichensky.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://beichensky.github.io/tags/JavaScript/"/>
    
      <category term="性能优化" scheme="https://beichensky.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
      <category term="script" scheme="https://beichensky.github.io/tags/script/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://beichensky.github.io/20181214/hello-world/"/>
    <id>https://beichensky.github.io/20181214/hello-world/</id>
    <published>2018-12-13T16:14:09.000Z</published>
    <updated>2018-12-20T13:17:46.581Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo基本命令</p><a id="more"></a><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hexo基本命令&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://beichensky.github.io/tags/Hexo/"/>
    
      <category term="md" scheme="https://beichensky.github.io/tags/md/"/>
    
  </entry>
  
</feed>
